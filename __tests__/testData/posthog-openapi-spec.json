{
  "openapi": "3.0.3",
  "info": {
    "title": "PostHog API",
    "version": null,
    "description": ""
  },
  "paths": {
    "/api/organizations/{parent_lookup_organization_id}/domains/": {
      "get": {
        "operationId": "domains_list",
        "parameters": [
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Number of results to return per page.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "offset",
            "required": false,
            "in": "query",
            "description": "The initial index from which to return the results.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "parent_lookup_organization_id",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "tags": ["organizations", "domains"],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedOrganizationDomainList"
                }
              }
            },
            "description": ""
          }
        }
      },
      "post": {
        "operationId": "domains_create",
        "parameters": [
          {
            "in": "path",
            "name": "parent_lookup_organization_id",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "tags": ["organizations", "domains"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OrganizationDomain"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/OrganizationDomain"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/OrganizationDomain"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrganizationDomain"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/organizations/{parent_lookup_organization_id}/domains/{id}/": {
      "get": {
        "operationId": "domains_retrieve",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "A UUID string identifying this domain.",
            "required": true
          },
          {
            "in": "path",
            "name": "parent_lookup_organization_id",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "tags": ["organizations", "domains"],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrganizationDomain"
                }
              }
            },
            "description": ""
          }
        }
      },
      "put": {
        "operationId": "domains_update",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "A UUID string identifying this domain.",
            "required": true
          },
          {
            "in": "path",
            "name": "parent_lookup_organization_id",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "tags": ["organizations", "domains"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OrganizationDomain"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/OrganizationDomain"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/OrganizationDomain"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrganizationDomain"
                }
              }
            },
            "description": ""
          }
        }
      },
      "patch": {
        "operationId": "domains_partial_update",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "A UUID string identifying this domain.",
            "required": true
          },
          {
            "in": "path",
            "name": "parent_lookup_organization_id",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "tags": ["organizations", "domains"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PatchedOrganizationDomain"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/PatchedOrganizationDomain"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/PatchedOrganizationDomain"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrganizationDomain"
                }
              }
            },
            "description": ""
          }
        }
      },
      "delete": {
        "operationId": "domains_destroy",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "A UUID string identifying this domain.",
            "required": true
          },
          {
            "in": "path",
            "name": "parent_lookup_organization_id",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "tags": ["organizations", "domains"],
        "responses": {
          "204": {
            "description": "No response body"
          }
        }
      }
    },
    "/api/organizations/{parent_lookup_organization_id}/domains/{id}/verify/": {
      "post": {
        "operationId": "domains_verify_create",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "A UUID string identifying this domain.",
            "required": true
          },
          {
            "in": "path",
            "name": "parent_lookup_organization_id",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "tags": ["organizations", "domains"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OrganizationDomain"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/OrganizationDomain"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/OrganizationDomain"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrganizationDomain"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/organizations/{parent_lookup_organization_id}/invites/": {
      "get": {
        "operationId": "invites_list",
        "parameters": [
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Number of results to return per page.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "offset",
            "required": false,
            "in": "query",
            "description": "The initial index from which to return the results.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "parent_lookup_organization_id",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "tags": ["organizations", "invites"],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedOrganizationInviteList"
                }
              }
            },
            "description": ""
          }
        }
      },
      "post": {
        "operationId": "invites_create",
        "parameters": [
          {
            "in": "path",
            "name": "parent_lookup_organization_id",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "tags": ["organizations", "invites"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OrganizationInvite"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/OrganizationInvite"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/OrganizationInvite"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrganizationInvite"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/organizations/{parent_lookup_organization_id}/invites/{id}/": {
      "delete": {
        "operationId": "invites_destroy",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "A UUID string identifying this organization invite.",
            "required": true
          },
          {
            "in": "path",
            "name": "parent_lookup_organization_id",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "tags": ["organizations", "invites"],
        "responses": {
          "204": {
            "description": "No response body"
          }
        }
      }
    },
    "/api/organizations/{parent_lookup_organization_id}/invites/bulk/": {
      "post": {
        "operationId": "invites_bulk_create",
        "parameters": [
          {
            "in": "path",
            "name": "parent_lookup_organization_id",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "tags": ["organizations", "invites"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OrganizationInvite"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/OrganizationInvite"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/OrganizationInvite"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrganizationInvite"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/organizations/{parent_lookup_organization_id}/members/": {
      "get": {
        "operationId": "members_list",
        "parameters": [
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Number of results to return per page.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "offset",
            "required": false,
            "in": "query",
            "description": "The initial index from which to return the results.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "parent_lookup_organization_id",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "tags": ["organizations", "members"],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedOrganizationMemberList"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/organizations/{parent_lookup_organization_id}/members/{user__uuid}/": {
      "put": {
        "operationId": "members_update",
        "parameters": [
          {
            "in": "path",
            "name": "parent_lookup_organization_id",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "user__uuid",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true
          }
        ],
        "tags": ["organizations", "members"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OrganizationMember"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/OrganizationMember"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/OrganizationMember"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrganizationMember"
                }
              }
            },
            "description": ""
          }
        }
      },
      "patch": {
        "operationId": "members_partial_update",
        "parameters": [
          {
            "in": "path",
            "name": "parent_lookup_organization_id",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "user__uuid",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true
          }
        ],
        "tags": ["organizations", "members"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PatchedOrganizationMember"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/PatchedOrganizationMember"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/PatchedOrganizationMember"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrganizationMember"
                }
              }
            },
            "description": ""
          }
        }
      },
      "delete": {
        "operationId": "members_destroy",
        "parameters": [
          {
            "in": "path",
            "name": "parent_lookup_organization_id",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "user__uuid",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true
          }
        ],
        "tags": ["organizations", "members"],
        "responses": {
          "204": {
            "description": "No response body"
          }
        }
      }
    },
    "/api/organizations/{parent_lookup_organization_id}/plugins/": {
      "get": {
        "operationId": "plugins_list",
        "parameters": [
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Number of results to return per page.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "offset",
            "required": false,
            "in": "query",
            "description": "The initial index from which to return the results.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "parent_lookup_organization_id",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "tags": ["organizations", "plugins"],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedPluginList"
                }
              }
            },
            "description": ""
          }
        }
      },
      "post": {
        "operationId": "plugins_create",
        "parameters": [
          {
            "in": "path",
            "name": "parent_lookup_organization_id",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "tags": ["organizations", "plugins"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Plugin"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/Plugin"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/Plugin"
              }
            }
          }
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Plugin"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/organizations/{parent_lookup_organization_id}/plugins/{id}/": {
      "get": {
        "operationId": "plugins_retrieve",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "description": "A unique integer value identifying this plugin.",
            "required": true
          },
          {
            "in": "path",
            "name": "parent_lookup_organization_id",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "tags": ["organizations", "plugins"],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Plugin"
                }
              }
            },
            "description": ""
          }
        }
      },
      "put": {
        "operationId": "plugins_update",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "description": "A unique integer value identifying this plugin.",
            "required": true
          },
          {
            "in": "path",
            "name": "parent_lookup_organization_id",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "tags": ["organizations", "plugins"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Plugin"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/Plugin"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/Plugin"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Plugin"
                }
              }
            },
            "description": ""
          }
        }
      },
      "patch": {
        "operationId": "plugins_partial_update",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "description": "A unique integer value identifying this plugin.",
            "required": true
          },
          {
            "in": "path",
            "name": "parent_lookup_organization_id",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "tags": ["organizations", "plugins"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PatchedPlugin"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/PatchedPlugin"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/PatchedPlugin"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Plugin"
                }
              }
            },
            "description": ""
          }
        }
      },
      "delete": {
        "operationId": "plugins_destroy",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "description": "A unique integer value identifying this plugin.",
            "required": true
          },
          {
            "in": "path",
            "name": "parent_lookup_organization_id",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "tags": ["organizations", "plugins"],
        "responses": {
          "204": {
            "description": "No response body"
          }
        }
      }
    },
    "/api/organizations/{parent_lookup_organization_id}/plugins/{id}/check_for_updates/": {
      "get": {
        "operationId": "plugins_check_for_updates_retrieve",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "description": "A unique integer value identifying this plugin.",
            "required": true
          },
          {
            "in": "path",
            "name": "parent_lookup_organization_id",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "tags": ["organizations", "plugins"],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Plugin"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/organizations/{parent_lookup_organization_id}/plugins/{id}/source/": {
      "get": {
        "operationId": "plugins_source_retrieve",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "description": "A unique integer value identifying this plugin.",
            "required": true
          },
          {
            "in": "path",
            "name": "parent_lookup_organization_id",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "tags": ["organizations", "plugins"],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Plugin"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/organizations/{parent_lookup_organization_id}/plugins/{id}/update_source/": {
      "patch": {
        "operationId": "plugins_update_source_partial_update",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "description": "A unique integer value identifying this plugin.",
            "required": true
          },
          {
            "in": "path",
            "name": "parent_lookup_organization_id",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "tags": ["organizations", "plugins"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PatchedPlugin"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/PatchedPlugin"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/PatchedPlugin"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Plugin"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/organizations/{parent_lookup_organization_id}/plugins/{id}/upgrade/": {
      "post": {
        "operationId": "plugins_upgrade_create",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "description": "A unique integer value identifying this plugin.",
            "required": true
          },
          {
            "in": "path",
            "name": "parent_lookup_organization_id",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "tags": ["organizations", "plugins"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Plugin"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/Plugin"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/Plugin"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Plugin"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/organizations/{parent_lookup_organization_id}/plugins/activity/": {
      "get": {
        "operationId": "plugins_activity_retrieve",
        "parameters": [
          {
            "in": "path",
            "name": "parent_lookup_organization_id",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "tags": ["organizations", "plugins"],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Plugin"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/organizations/{parent_lookup_organization_id}/plugins/repository/": {
      "get": {
        "operationId": "plugins_repository_retrieve",
        "parameters": [
          {
            "in": "path",
            "name": "parent_lookup_organization_id",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "tags": ["organizations", "plugins"],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Plugin"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/organizations/{parent_lookup_organization_id}/resource_access/": {
      "get": {
        "operationId": "resource_access_list",
        "parameters": [
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Number of results to return per page.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "offset",
            "required": false,
            "in": "query",
            "description": "The initial index from which to return the results.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "parent_lookup_organization_id",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "tags": ["organizations", "resource_access"],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedOrganizationResourceAccessList"
                }
              }
            },
            "description": ""
          }
        }
      },
      "post": {
        "operationId": "resource_access_create",
        "parameters": [
          {
            "in": "path",
            "name": "parent_lookup_organization_id",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "tags": ["organizations", "resource_access"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OrganizationResourceAccess"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/OrganizationResourceAccess"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/OrganizationResourceAccess"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrganizationResourceAccess"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/organizations/{parent_lookup_organization_id}/resource_access/{id}/": {
      "get": {
        "operationId": "resource_access_retrieve",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "description": "A unique integer value identifying this organization resource access.",
            "required": true
          },
          {
            "in": "path",
            "name": "parent_lookup_organization_id",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "tags": ["organizations", "resource_access"],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrganizationResourceAccess"
                }
              }
            },
            "description": ""
          }
        }
      },
      "put": {
        "operationId": "resource_access_update",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "description": "A unique integer value identifying this organization resource access.",
            "required": true
          },
          {
            "in": "path",
            "name": "parent_lookup_organization_id",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "tags": ["organizations", "resource_access"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OrganizationResourceAccess"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/OrganizationResourceAccess"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/OrganizationResourceAccess"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrganizationResourceAccess"
                }
              }
            },
            "description": ""
          }
        }
      },
      "patch": {
        "operationId": "resource_access_partial_update",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "description": "A unique integer value identifying this organization resource access.",
            "required": true
          },
          {
            "in": "path",
            "name": "parent_lookup_organization_id",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "tags": ["organizations", "resource_access"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PatchedOrganizationResourceAccess"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/PatchedOrganizationResourceAccess"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/PatchedOrganizationResourceAccess"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrganizationResourceAccess"
                }
              }
            },
            "description": ""
          }
        }
      },
      "delete": {
        "operationId": "resource_access_destroy",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "description": "A unique integer value identifying this organization resource access.",
            "required": true
          },
          {
            "in": "path",
            "name": "parent_lookup_organization_id",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "tags": ["organizations", "resource_access"],
        "responses": {
          "204": {
            "description": "No response body"
          }
        }
      }
    },
    "/api/organizations/{parent_lookup_organization_id}/roles/": {
      "get": {
        "operationId": "roles_list",
        "parameters": [
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Number of results to return per page.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "offset",
            "required": false,
            "in": "query",
            "description": "The initial index from which to return the results.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "parent_lookup_organization_id",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "tags": ["organizations", "roles"],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedRoleList"
                }
              }
            },
            "description": ""
          }
        }
      },
      "post": {
        "operationId": "roles_create",
        "parameters": [
          {
            "in": "path",
            "name": "parent_lookup_organization_id",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "tags": ["organizations", "roles"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Role"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/Role"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/Role"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Role"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/organizations/{parent_lookup_organization_id}/roles/{parent_lookup_role_id}/role_memberships/": {
      "get": {
        "operationId": "roles_role_memberships_list",
        "parameters": [
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Number of results to return per page.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "offset",
            "required": false,
            "in": "query",
            "description": "The initial index from which to return the results.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "parent_lookup_organization_id",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "parent_lookup_role_id",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "tags": ["organizations", "roles"],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedRoleMembershipList"
                }
              }
            },
            "description": ""
          }
        }
      },
      "post": {
        "operationId": "roles_role_memberships_create",
        "parameters": [
          {
            "in": "path",
            "name": "parent_lookup_organization_id",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "parent_lookup_role_id",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "tags": ["organizations", "roles"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RoleMembership"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/RoleMembership"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/RoleMembership"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RoleMembership"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/organizations/{parent_lookup_organization_id}/roles/{parent_lookup_role_id}/role_memberships/{id}/": {
      "delete": {
        "operationId": "roles_role_memberships_destroy",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "A UUID string identifying this role membership.",
            "required": true
          },
          {
            "in": "path",
            "name": "parent_lookup_organization_id",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "parent_lookup_role_id",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "tags": ["organizations", "roles"],
        "responses": {
          "204": {
            "description": "No response body"
          }
        }
      }
    },
    "/api/organizations/{parent_lookup_organization_id}/roles/{id}/": {
      "get": {
        "operationId": "roles_retrieve",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "A UUID string identifying this role.",
            "required": true
          },
          {
            "in": "path",
            "name": "parent_lookup_organization_id",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "tags": ["organizations", "roles"],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Role"
                }
              }
            },
            "description": ""
          }
        }
      },
      "put": {
        "operationId": "roles_update",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "A UUID string identifying this role.",
            "required": true
          },
          {
            "in": "path",
            "name": "parent_lookup_organization_id",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "tags": ["organizations", "roles"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Role"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/Role"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/Role"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Role"
                }
              }
            },
            "description": ""
          }
        }
      },
      "patch": {
        "operationId": "roles_partial_update",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "A UUID string identifying this role.",
            "required": true
          },
          {
            "in": "path",
            "name": "parent_lookup_organization_id",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "tags": ["organizations", "roles"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PatchedRole"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/PatchedRole"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/PatchedRole"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Role"
                }
              }
            },
            "description": ""
          }
        }
      },
      "delete": {
        "operationId": "roles_destroy",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "A UUID string identifying this role.",
            "required": true
          },
          {
            "in": "path",
            "name": "parent_lookup_organization_id",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "tags": ["organizations", "roles"],
        "responses": {
          "204": {
            "description": "No response body"
          }
        }
      }
    },
    "/api/projects/": {
      "get": {
        "operationId": "list",
        "description": "Projects for the current organization.",
        "parameters": [
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Number of results to return per page.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "offset",
            "required": false,
            "in": "query",
            "description": "The initial index from which to return the results.",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "tags": ["projects"],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedTeamBasicList"
                }
              }
            },
            "description": ""
          }
        }
      },
      "post": {
        "operationId": "create",
        "description": "Projects for the current organization.",
        "tags": ["projects"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Team"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/Team"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/Team"
              }
            }
          }
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Team"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/projects/{id}/": {
      "get": {
        "operationId": "retrieve",
        "description": "Projects for the current organization.",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "description": "A unique integer value identifying this team.",
            "required": true
          }
        ],
        "tags": ["projects"],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Team"
                }
              }
            },
            "description": ""
          }
        }
      },
      "put": {
        "operationId": "update",
        "description": "Projects for the current organization.",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "description": "A unique integer value identifying this team.",
            "required": true
          }
        ],
        "tags": ["projects"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Team"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/Team"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/Team"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Team"
                }
              }
            },
            "description": ""
          }
        }
      },
      "patch": {
        "operationId": "partial_update",
        "description": "Projects for the current organization.",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "description": "A unique integer value identifying this team.",
            "required": true
          }
        ],
        "tags": ["projects"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PatchedTeam"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/PatchedTeam"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/PatchedTeam"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Team"
                }
              }
            },
            "description": ""
          }
        }
      },
      "delete": {
        "operationId": "destroy",
        "description": "Projects for the current organization.",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "description": "A unique integer value identifying this team.",
            "required": true
          }
        ],
        "tags": ["projects"],
        "responses": {
          "204": {
            "description": "No response body"
          }
        }
      }
    },
    "/api/projects/{id}/is_generating_demo_data/": {
      "get": {
        "operationId": "is_generating_demo_data_retrieve",
        "description": "Projects for the current organization.",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "description": "A unique integer value identifying this team.",
            "required": true
          }
        ],
        "tags": ["is_generating_demo_data"],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Team"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/projects/{id}/reset_token/": {
      "patch": {
        "operationId": "reset_token_partial_update",
        "description": "Projects for the current organization.",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "description": "A unique integer value identifying this team.",
            "required": true
          }
        ],
        "tags": ["reset_token"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PatchedTeam"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/PatchedTeam"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/PatchedTeam"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Team"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/projects/{project_id}/actions/": {
      "get": {
        "operationId": "actions_list",
        "parameters": [
          {
            "in": "query",
            "name": "format",
            "schema": {
              "type": "string",
              "enum": ["csv", "json"]
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Number of results to return per page.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "offset",
            "required": false,
            "in": "query",
            "description": "The initial index from which to return the results.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "project_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/."
          }
        ],
        "tags": ["actions"],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedActionList"
                }
              },
              "text/csv": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedActionList"
                }
              }
            },
            "description": ""
          }
        }
      },
      "post": {
        "operationId": "actions_create",
        "parameters": [
          {
            "in": "query",
            "name": "format",
            "schema": {
              "type": "string",
              "enum": ["csv", "json"]
            }
          },
          {
            "in": "path",
            "name": "project_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/."
          }
        ],
        "tags": ["actions"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Action"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/Action"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/Action"
              }
            }
          }
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Action"
                }
              },
              "text/csv": {
                "schema": {
                  "$ref": "#/components/schemas/Action"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/projects/{project_id}/actions/{id}/": {
      "get": {
        "operationId": "actions_retrieve",
        "parameters": [
          {
            "in": "query",
            "name": "format",
            "schema": {
              "type": "string",
              "enum": ["csv", "json"]
            }
          },
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "description": "A unique integer value identifying this action.",
            "required": true
          },
          {
            "in": "path",
            "name": "project_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/."
          }
        ],
        "tags": ["actions"],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Action"
                }
              },
              "text/csv": {
                "schema": {
                  "$ref": "#/components/schemas/Action"
                }
              }
            },
            "description": ""
          }
        }
      },
      "put": {
        "operationId": "actions_update",
        "parameters": [
          {
            "in": "query",
            "name": "format",
            "schema": {
              "type": "string",
              "enum": ["csv", "json"]
            }
          },
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "description": "A unique integer value identifying this action.",
            "required": true
          },
          {
            "in": "path",
            "name": "project_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/."
          }
        ],
        "tags": ["actions"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Action"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/Action"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/Action"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Action"
                }
              },
              "text/csv": {
                "schema": {
                  "$ref": "#/components/schemas/Action"
                }
              }
            },
            "description": ""
          }
        }
      },
      "patch": {
        "operationId": "actions_partial_update",
        "parameters": [
          {
            "in": "query",
            "name": "format",
            "schema": {
              "type": "string",
              "enum": ["csv", "json"]
            }
          },
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "description": "A unique integer value identifying this action.",
            "required": true
          },
          {
            "in": "path",
            "name": "project_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/."
          }
        ],
        "tags": ["actions"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PatchedAction"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/PatchedAction"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/PatchedAction"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Action"
                }
              },
              "text/csv": {
                "schema": {
                  "$ref": "#/components/schemas/Action"
                }
              }
            },
            "description": ""
          }
        }
      },
      "delete": {
        "operationId": "actions_destroy",
        "description": "Hard delete of this model is not allowed. Use a patch API call to set \"deleted\" to true",
        "parameters": [
          {
            "in": "query",
            "name": "format",
            "schema": {
              "type": "string",
              "enum": ["csv", "json"]
            }
          },
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "description": "A unique integer value identifying this action.",
            "required": true
          },
          {
            "in": "path",
            "name": "project_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/."
          }
        ],
        "tags": ["actions"],
        "responses": {
          "405": {
            "description": "No response body"
          }
        }
      }
    },
    "/api/projects/{project_id}/actions/{id}/count/": {
      "get": {
        "operationId": "actions_count_retrieve",
        "parameters": [
          {
            "in": "query",
            "name": "format",
            "schema": {
              "type": "string",
              "enum": ["csv", "json"]
            }
          },
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "description": "A unique integer value identifying this action.",
            "required": true
          },
          {
            "in": "path",
            "name": "project_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/."
          }
        ],
        "tags": ["actions"],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Action"
                }
              },
              "text/csv": {
                "schema": {
                  "$ref": "#/components/schemas/Action"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/projects/{project_id}/actions/people/": {
      "get": {
        "operationId": "actions_people_retrieve",
        "parameters": [
          {
            "in": "query",
            "name": "format",
            "schema": {
              "type": "string",
              "enum": ["csv", "json"]
            }
          },
          {
            "in": "path",
            "name": "project_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/."
          }
        ],
        "tags": ["actions"],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Action"
                }
              },
              "text/csv": {
                "schema": {
                  "$ref": "#/components/schemas/Action"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/projects/{project_id}/activity_log/bookmark_activity_notification/": {
      "post": {
        "operationId": "activity_log_bookmark_activity_notification_create",
        "parameters": [
          {
            "in": "path",
            "name": "project_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/."
          }
        ],
        "tags": ["activity_log"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ActivityLog"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/ActivityLog"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/ActivityLog"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActivityLog"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/projects/{project_id}/activity_log/important_changes/": {
      "get": {
        "operationId": "activity_log_important_changes_retrieve",
        "parameters": [
          {
            "in": "path",
            "name": "project_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/."
          }
        ],
        "tags": ["activity_log"],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActivityLog"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/projects/{project_id}/annotations/": {
      "get": {
        "operationId": "annotations_list",
        "description": "Create, Read, Update and Delete annotations. [See docs](https://posthog.com/docs/user-guides/annotations) for more information on annotations.",
        "parameters": [
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Number of results to return per page.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "offset",
            "required": false,
            "in": "query",
            "description": "The initial index from which to return the results.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "project_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/."
          },
          {
            "name": "search",
            "required": false,
            "in": "query",
            "description": "A search term.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "tags": ["annotations"],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedAnnotationList"
                }
              }
            },
            "description": ""
          }
        }
      },
      "post": {
        "operationId": "annotations_create",
        "description": "Create, Read, Update and Delete annotations. [See docs](https://posthog.com/docs/user-guides/annotations) for more information on annotations.",
        "parameters": [
          {
            "in": "path",
            "name": "project_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/."
          }
        ],
        "tags": ["annotations"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Annotation"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/Annotation"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/Annotation"
              }
            }
          }
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Annotation"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/projects/{project_id}/annotations/{id}/": {
      "get": {
        "operationId": "annotations_retrieve",
        "description": "Create, Read, Update and Delete annotations. [See docs](https://posthog.com/docs/user-guides/annotations) for more information on annotations.",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "description": "A unique integer value identifying this annotation.",
            "required": true
          },
          {
            "in": "path",
            "name": "project_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/."
          }
        ],
        "tags": ["annotations"],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Annotation"
                }
              }
            },
            "description": ""
          }
        }
      },
      "put": {
        "operationId": "annotations_update",
        "description": "Create, Read, Update and Delete annotations. [See docs](https://posthog.com/docs/user-guides/annotations) for more information on annotations.",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "description": "A unique integer value identifying this annotation.",
            "required": true
          },
          {
            "in": "path",
            "name": "project_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/."
          }
        ],
        "tags": ["annotations"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Annotation"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/Annotation"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/Annotation"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Annotation"
                }
              }
            },
            "description": ""
          }
        }
      },
      "patch": {
        "operationId": "annotations_partial_update",
        "description": "Create, Read, Update and Delete annotations. [See docs](https://posthog.com/docs/user-guides/annotations) for more information on annotations.",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "description": "A unique integer value identifying this annotation.",
            "required": true
          },
          {
            "in": "path",
            "name": "project_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/."
          }
        ],
        "tags": ["annotations"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PatchedAnnotation"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/PatchedAnnotation"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/PatchedAnnotation"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Annotation"
                }
              }
            },
            "description": ""
          }
        }
      },
      "delete": {
        "operationId": "annotations_destroy",
        "description": "Hard delete of this model is not allowed. Use a patch API call to set \"deleted\" to true",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "description": "A unique integer value identifying this annotation.",
            "required": true
          },
          {
            "in": "path",
            "name": "project_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/."
          }
        ],
        "tags": ["annotations"],
        "responses": {
          "405": {
            "description": "No response body"
          }
        }
      }
    },
    "/api/projects/{project_id}/app_metrics/{parent_lookup_plugin_config_id}/historical_exports/": {
      "get": {
        "operationId": "app_metrics_historical_exports_retrieve",
        "parameters": [
          {
            "in": "path",
            "name": "parent_lookup_plugin_config_id",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "project_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/."
          }
        ],
        "tags": ["app_metrics"],
        "responses": {
          "200": {
            "description": "No response body"
          }
        }
      }
    },
    "/api/projects/{project_id}/app_metrics/{parent_lookup_plugin_config_id}/historical_exports/{id}/": {
      "get": {
        "operationId": "app_metrics_historical_exports_retrieve_2",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "parent_lookup_plugin_config_id",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "project_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/."
          }
        ],
        "tags": ["app_metrics"],
        "responses": {
          "200": {
            "description": "No response body"
          }
        }
      }
    },
    "/api/projects/{project_id}/app_metrics/{id}/": {
      "get": {
        "operationId": "app_metrics_retrieve",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "description": "A unique integer value identifying this plugin config.",
            "required": true
          },
          {
            "in": "path",
            "name": "project_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/."
          }
        ],
        "tags": ["app_metrics"],
        "responses": {
          "200": {
            "description": "No response body"
          }
        }
      }
    },
    "/api/projects/{project_id}/app_metrics/{id}/error_details/": {
      "get": {
        "operationId": "app_metrics_error_details_retrieve",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "description": "A unique integer value identifying this plugin config.",
            "required": true
          },
          {
            "in": "path",
            "name": "project_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/."
          }
        ],
        "tags": ["app_metrics"],
        "responses": {
          "200": {
            "description": "No response body"
          }
        }
      }
    },
    "/api/projects/{project_id}/batch_exports/": {
      "get": {
        "operationId": "batch_exports_list",
        "parameters": [
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Number of results to return per page.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "offset",
            "required": false,
            "in": "query",
            "description": "The initial index from which to return the results.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "project_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/."
          }
        ],
        "tags": ["batch_exports"],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedBatchExportList"
                }
              }
            },
            "description": ""
          }
        }
      },
      "post": {
        "operationId": "batch_exports_create",
        "parameters": [
          {
            "in": "path",
            "name": "project_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/."
          }
        ],
        "tags": ["batch_exports"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BatchExport"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/BatchExport"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/BatchExport"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BatchExport"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/projects/{project_id}/batch_exports/{parent_lookup_batch_export_id}/runs/": {
      "get": {
        "operationId": "batch_exports_runs_list",
        "description": "Get all BatchExportRuns for a BatchExport.",
        "parameters": [
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Number of results to return per page.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "offset",
            "required": false,
            "in": "query",
            "description": "The initial index from which to return the results.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "parent_lookup_batch_export_id",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "project_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/."
          }
        ],
        "tags": ["batch_exports"],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedBatchExportRunList"
                }
              }
            },
            "description": ""
          }
        }
      },
      "post": {
        "operationId": "batch_exports_runs_create",
        "parameters": [
          {
            "in": "path",
            "name": "parent_lookup_batch_export_id",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "project_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/."
          }
        ],
        "tags": ["batch_exports"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BatchExportRun"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/BatchExportRun"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/BatchExportRun"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BatchExportRun"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/projects/{project_id}/batch_exports/{parent_lookup_batch_export_id}/runs/{id}/": {
      "get": {
        "operationId": "batch_exports_runs_retrieve",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "A UUID string identifying this batch export run.",
            "required": true
          },
          {
            "in": "path",
            "name": "parent_lookup_batch_export_id",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "project_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/."
          }
        ],
        "tags": ["batch_exports"],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BatchExportRun"
                }
              }
            },
            "description": ""
          }
        }
      },
      "put": {
        "operationId": "batch_exports_runs_update",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "A UUID string identifying this batch export run.",
            "required": true
          },
          {
            "in": "path",
            "name": "parent_lookup_batch_export_id",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "project_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/."
          }
        ],
        "tags": ["batch_exports"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BatchExportRun"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/BatchExportRun"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/BatchExportRun"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BatchExportRun"
                }
              }
            },
            "description": ""
          }
        }
      },
      "patch": {
        "operationId": "batch_exports_runs_partial_update",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "A UUID string identifying this batch export run.",
            "required": true
          },
          {
            "in": "path",
            "name": "parent_lookup_batch_export_id",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "project_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/."
          }
        ],
        "tags": ["batch_exports"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PatchedBatchExportRun"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/PatchedBatchExportRun"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/PatchedBatchExportRun"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BatchExportRun"
                }
              }
            },
            "description": ""
          }
        }
      },
      "delete": {
        "operationId": "batch_exports_runs_destroy",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "A UUID string identifying this batch export run.",
            "required": true
          },
          {
            "in": "path",
            "name": "parent_lookup_batch_export_id",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "project_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/."
          }
        ],
        "tags": ["batch_exports"],
        "responses": {
          "204": {
            "description": "No response body"
          }
        }
      }
    },
    "/api/projects/{project_id}/batch_exports/{parent_lookup_batch_export_id}/runs/{id}/reset/": {
      "post": {
        "operationId": "batch_exports_runs_reset_create",
        "description": "Reset a BatchExportRun by resetting its associated Temporal Workflow.",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "A UUID string identifying this batch export run.",
            "required": true
          },
          {
            "in": "path",
            "name": "parent_lookup_batch_export_id",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "project_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/."
          }
        ],
        "tags": ["batch_exports"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BatchExportRun"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/BatchExportRun"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/BatchExportRun"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BatchExportRun"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/projects/{project_id}/batch_exports/{id}/": {
      "get": {
        "operationId": "batch_exports_retrieve",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "A UUID string identifying this batch export.",
            "required": true
          },
          {
            "in": "path",
            "name": "project_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/."
          }
        ],
        "tags": ["batch_exports"],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BatchExport"
                }
              }
            },
            "description": ""
          }
        }
      },
      "put": {
        "operationId": "batch_exports_update",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "A UUID string identifying this batch export.",
            "required": true
          },
          {
            "in": "path",
            "name": "project_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/."
          }
        ],
        "tags": ["batch_exports"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BatchExport"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/BatchExport"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/BatchExport"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BatchExport"
                }
              }
            },
            "description": ""
          }
        }
      },
      "patch": {
        "operationId": "batch_exports_partial_update",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "A UUID string identifying this batch export.",
            "required": true
          },
          {
            "in": "path",
            "name": "project_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/."
          }
        ],
        "tags": ["batch_exports"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PatchedBatchExport"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/PatchedBatchExport"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/PatchedBatchExport"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BatchExport"
                }
              }
            },
            "description": ""
          }
        }
      },
      "delete": {
        "operationId": "batch_exports_destroy",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "A UUID string identifying this batch export.",
            "required": true
          },
          {
            "in": "path",
            "name": "project_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/."
          }
        ],
        "tags": ["batch_exports"],
        "responses": {
          "204": {
            "description": "No response body"
          }
        }
      }
    },
    "/api/projects/{project_id}/batch_exports/{id}/backfill/": {
      "post": {
        "operationId": "batch_exports_backfill_create",
        "description": "Trigger a backfill for a BatchExport.",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "A UUID string identifying this batch export.",
            "required": true
          },
          {
            "in": "path",
            "name": "project_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/."
          }
        ],
        "tags": ["batch_exports"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BatchExport"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/BatchExport"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/BatchExport"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BatchExport"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/projects/{project_id}/batch_exports/{id}/pause/": {
      "post": {
        "operationId": "batch_exports_pause_create",
        "description": "Pause a BatchExport.",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "A UUID string identifying this batch export.",
            "required": true
          },
          {
            "in": "path",
            "name": "project_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/."
          }
        ],
        "tags": ["batch_exports"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BatchExport"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/BatchExport"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/BatchExport"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BatchExport"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/projects/{project_id}/batch_exports/{id}/unpause/": {
      "post": {
        "operationId": "batch_exports_unpause_create",
        "description": "Unpause a BatchExport.",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "A UUID string identifying this batch export.",
            "required": true
          },
          {
            "in": "path",
            "name": "project_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/."
          }
        ],
        "tags": ["batch_exports"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BatchExport"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/BatchExport"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/BatchExport"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BatchExport"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/projects/{project_id}/cohorts/": {
      "get": {
        "operationId": "cohorts_list",
        "parameters": [
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Number of results to return per page.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "offset",
            "required": false,
            "in": "query",
            "description": "The initial index from which to return the results.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "project_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/."
          }
        ],
        "tags": ["cohorts"],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedCohortList"
                }
              }
            },
            "description": ""
          }
        }
      },
      "post": {
        "operationId": "cohorts_create",
        "parameters": [
          {
            "in": "path",
            "name": "project_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/."
          }
        ],
        "tags": ["cohorts"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Cohort"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/Cohort"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/Cohort"
              }
            }
          }
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Cohort"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/projects/{project_id}/cohorts/{id}/": {
      "get": {
        "operationId": "cohorts_retrieve",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "description": "A unique integer value identifying this cohort.",
            "required": true
          },
          {
            "in": "path",
            "name": "project_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/."
          }
        ],
        "tags": ["cohorts"],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Cohort"
                }
              }
            },
            "description": ""
          }
        }
      },
      "put": {
        "operationId": "cohorts_update",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "description": "A unique integer value identifying this cohort.",
            "required": true
          },
          {
            "in": "path",
            "name": "project_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/."
          }
        ],
        "tags": ["cohorts"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Cohort"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/Cohort"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/Cohort"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Cohort"
                }
              }
            },
            "description": ""
          }
        }
      },
      "patch": {
        "operationId": "cohorts_partial_update",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "description": "A unique integer value identifying this cohort.",
            "required": true
          },
          {
            "in": "path",
            "name": "project_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/."
          }
        ],
        "tags": ["cohorts"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PatchedCohort"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/PatchedCohort"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/PatchedCohort"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Cohort"
                }
              }
            },
            "description": ""
          }
        }
      },
      "delete": {
        "operationId": "cohorts_destroy",
        "description": "Hard delete of this model is not allowed. Use a patch API call to set \"deleted\" to true",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "description": "A unique integer value identifying this cohort.",
            "required": true
          },
          {
            "in": "path",
            "name": "project_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/."
          }
        ],
        "tags": ["cohorts"],
        "responses": {
          "405": {
            "description": "No response body"
          }
        }
      }
    },
    "/api/projects/{project_id}/cohorts/{id}/persons/": {
      "get": {
        "operationId": "cohorts_persons_retrieve",
        "parameters": [
          {
            "in": "query",
            "name": "format",
            "schema": {
              "type": "string",
              "enum": ["csv", "json"]
            }
          },
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "description": "A unique integer value identifying this cohort.",
            "required": true
          },
          {
            "in": "path",
            "name": "project_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/."
          }
        ],
        "tags": ["cohorts"],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Cohort"
                }
              },
              "text/csv": {
                "schema": {
                  "$ref": "#/components/schemas/Cohort"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/projects/{project_id}/dashboard_templates/": {
      "get": {
        "operationId": "dashboard_templates_list",
        "parameters": [
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Number of results to return per page.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "offset",
            "required": false,
            "in": "query",
            "description": "The initial index from which to return the results.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "project_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/."
          }
        ],
        "tags": ["dashboard_templates"],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedDashboardTemplateList"
                }
              }
            },
            "description": ""
          }
        }
      },
      "post": {
        "operationId": "dashboard_templates_create",
        "parameters": [
          {
            "in": "path",
            "name": "project_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/."
          }
        ],
        "tags": ["dashboard_templates"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DashboardTemplate"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/DashboardTemplate"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/DashboardTemplate"
              }
            }
          }
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DashboardTemplate"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/projects/{project_id}/dashboard_templates/{id}/": {
      "get": {
        "operationId": "dashboard_templates_retrieve",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "project_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/."
          }
        ],
        "tags": ["dashboard_templates"],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DashboardTemplate"
                }
              }
            },
            "description": ""
          }
        }
      },
      "put": {
        "operationId": "dashboard_templates_update",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "project_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/."
          }
        ],
        "tags": ["dashboard_templates"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DashboardTemplate"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/DashboardTemplate"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/DashboardTemplate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DashboardTemplate"
                }
              }
            },
            "description": ""
          }
        }
      },
      "patch": {
        "operationId": "dashboard_templates_partial_update",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "project_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/."
          }
        ],
        "tags": ["dashboard_templates"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PatchedDashboardTemplate"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/PatchedDashboardTemplate"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/PatchedDashboardTemplate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DashboardTemplate"
                }
              }
            },
            "description": ""
          }
        }
      },
      "delete": {
        "operationId": "dashboard_templates_destroy",
        "description": "Hard delete of this model is not allowed. Use a patch API call to set \"deleted\" to true",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "project_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/."
          }
        ],
        "tags": ["dashboard_templates"],
        "responses": {
          "405": {
            "description": "No response body"
          }
        }
      }
    },
    "/api/projects/{project_id}/dashboard_templates/json_schema/": {
      "get": {
        "operationId": "dashboard_templates_json_schema_retrieve",
        "parameters": [
          {
            "in": "path",
            "name": "project_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/."
          }
        ],
        "tags": ["dashboard_templates"],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DashboardTemplate"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/projects/{project_id}/dashboards/": {
      "get": {
        "operationId": "dashboards_list",
        "parameters": [
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Number of results to return per page.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "offset",
            "required": false,
            "in": "query",
            "description": "The initial index from which to return the results.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "project_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/."
          }
        ],
        "tags": ["dashboards"],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedDashboardBasicList"
                }
              }
            },
            "description": ""
          }
        }
      },
      "post": {
        "operationId": "dashboards_create",
        "parameters": [
          {
            "in": "path",
            "name": "project_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/."
          }
        ],
        "tags": ["dashboards"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Dashboard"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/Dashboard"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/Dashboard"
              }
            }
          }
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Dashboard"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/projects/{project_id}/dashboards/{id}/": {
      "get": {
        "operationId": "dashboards_retrieve",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "description": "A unique integer value identifying this dashboard.",
            "required": true
          },
          {
            "in": "path",
            "name": "project_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/."
          }
        ],
        "tags": ["dashboards"],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Dashboard"
                }
              }
            },
            "description": ""
          }
        }
      },
      "put": {
        "operationId": "dashboards_update",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "description": "A unique integer value identifying this dashboard.",
            "required": true
          },
          {
            "in": "path",
            "name": "project_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/."
          }
        ],
        "tags": ["dashboards"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Dashboard"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/Dashboard"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/Dashboard"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Dashboard"
                }
              }
            },
            "description": ""
          }
        }
      },
      "patch": {
        "operationId": "dashboards_partial_update",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "description": "A unique integer value identifying this dashboard.",
            "required": true
          },
          {
            "in": "path",
            "name": "project_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/."
          }
        ],
        "tags": ["dashboards"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PatchedDashboard"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/PatchedDashboard"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/PatchedDashboard"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Dashboard"
                }
              }
            },
            "description": ""
          }
        }
      },
      "delete": {
        "operationId": "dashboards_destroy",
        "description": "Hard delete of this model is not allowed. Use a patch API call to set \"deleted\" to true",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "description": "A unique integer value identifying this dashboard.",
            "required": true
          },
          {
            "in": "path",
            "name": "project_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/."
          }
        ],
        "tags": ["dashboards"],
        "responses": {
          "405": {
            "description": "No response body"
          }
        }
      }
    },
    "/api/projects/{project_id}/dashboards/{id}/move_tile/": {
      "patch": {
        "operationId": "dashboards_move_tile_partial_update",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "description": "A unique integer value identifying this dashboard.",
            "required": true
          },
          {
            "in": "path",
            "name": "project_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/."
          }
        ],
        "tags": ["dashboards"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PatchedDashboard"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/PatchedDashboard"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/PatchedDashboard"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Dashboard"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/projects/{project_id}/dashboards/create_from_template_json/": {
      "post": {
        "operationId": "dashboards_create_from_template_json_create",
        "parameters": [
          {
            "in": "path",
            "name": "project_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/."
          }
        ],
        "tags": ["dashboards"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Dashboard"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Dashboard"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/projects/{project_id}/data_management/activity/": {
      "get": {
        "operationId": "data_management_activity_retrieve",
        "parameters": [
          {
            "in": "path",
            "name": "project_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/."
          }
        ],
        "tags": ["data_management"],
        "responses": {
          "200": {
            "description": "No response body"
          }
        }
      }
    },
    "/api/projects/{project_id}/early_access_feature/": {
      "get": {
        "operationId": "early_access_feature_list",
        "parameters": [
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Number of results to return per page.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "offset",
            "required": false,
            "in": "query",
            "description": "The initial index from which to return the results.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "project_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/."
          }
        ],
        "tags": ["early_access_feature"],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedEarlyAccessFeatureList"
                }
              }
            },
            "description": ""
          }
        }
      },
      "post": {
        "operationId": "early_access_feature_create",
        "parameters": [
          {
            "in": "path",
            "name": "project_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/."
          }
        ],
        "tags": ["early_access_feature"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EarlyAccessFeatureSerializerCreateOnly"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/EarlyAccessFeatureSerializerCreateOnly"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/EarlyAccessFeatureSerializerCreateOnly"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EarlyAccessFeatureSerializerCreateOnly"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/projects/{project_id}/early_access_feature/{id}/": {
      "get": {
        "operationId": "early_access_feature_retrieve",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "A UUID string identifying this early access feature.",
            "required": true
          },
          {
            "in": "path",
            "name": "project_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/."
          }
        ],
        "tags": ["early_access_feature"],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EarlyAccessFeature"
                }
              }
            },
            "description": ""
          }
        }
      },
      "put": {
        "operationId": "early_access_feature_update",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "A UUID string identifying this early access feature.",
            "required": true
          },
          {
            "in": "path",
            "name": "project_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/."
          }
        ],
        "tags": ["early_access_feature"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EarlyAccessFeature"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/EarlyAccessFeature"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/EarlyAccessFeature"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EarlyAccessFeature"
                }
              }
            },
            "description": ""
          }
        }
      },
      "patch": {
        "operationId": "early_access_feature_partial_update",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "A UUID string identifying this early access feature.",
            "required": true
          },
          {
            "in": "path",
            "name": "project_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/."
          }
        ],
        "tags": ["early_access_feature"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PatchedEarlyAccessFeature"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/PatchedEarlyAccessFeature"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/PatchedEarlyAccessFeature"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EarlyAccessFeature"
                }
              }
            },
            "description": ""
          }
        }
      },
      "delete": {
        "operationId": "early_access_feature_destroy",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "A UUID string identifying this early access feature.",
            "required": true
          },
          {
            "in": "path",
            "name": "project_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/."
          }
        ],
        "tags": ["early_access_feature"],
        "responses": {
          "204": {
            "description": "No response body"
          }
        }
      }
    },
    "/api/projects/{project_id}/event_definitions/": {
      "get": {
        "operationId": "event_definitions_list",
        "parameters": [
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Number of results to return per page.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "offset",
            "required": false,
            "in": "query",
            "description": "The initial index from which to return the results.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "project_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/."
          }
        ],
        "tags": ["event_definitions"],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedEnterpriseEventDefinitionList"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/projects/{project_id}/event_definitions/{id}/": {
      "get": {
        "operationId": "event_definitions_retrieve",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "project_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/."
          }
        ],
        "tags": ["event_definitions"],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EnterpriseEventDefinition"
                }
              }
            },
            "description": ""
          }
        }
      },
      "put": {
        "operationId": "event_definitions_update",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "project_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/."
          }
        ],
        "tags": ["event_definitions"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EnterpriseEventDefinition"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/EnterpriseEventDefinition"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/EnterpriseEventDefinition"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EnterpriseEventDefinition"
                }
              }
            },
            "description": ""
          }
        }
      },
      "patch": {
        "operationId": "event_definitions_partial_update",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "project_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/."
          }
        ],
        "tags": ["event_definitions"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PatchedEnterpriseEventDefinition"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/PatchedEnterpriseEventDefinition"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/PatchedEnterpriseEventDefinition"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EnterpriseEventDefinition"
                }
              }
            },
            "description": ""
          }
        }
      },
      "delete": {
        "operationId": "event_definitions_destroy",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "project_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/."
          }
        ],
        "tags": ["event_definitions"],
        "responses": {
          "204": {
            "description": "No response body"
          }
        }
      }
    },
    "/api/projects/{project_id}/events/": {
      "get": {
        "operationId": "events_list",
        "parameters": [
          {
            "in": "query",
            "name": "after",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "Only return events with a timestamp after this time."
          },
          {
            "in": "query",
            "name": "before",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "Only return events with a timestamp before this time."
          },
          {
            "in": "query",
            "name": "distinct_id",
            "schema": {
              "type": "integer"
            },
            "description": "Filter list by distinct id."
          },
          {
            "in": "query",
            "name": "event",
            "schema": {
              "type": "string"
            },
            "description": "Filter list by event. For example `user sign up` or `$pageview`."
          },
          {
            "in": "query",
            "name": "format",
            "schema": {
              "type": "string",
              "enum": ["csv", "json"]
            }
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "integer"
            },
            "description": "The maximum number of results to return"
          },
          {
            "name": "offset",
            "required": false,
            "in": "query",
            "description": "The initial index from which to return the results.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "person_id",
            "schema": {
              "type": "integer"
            },
            "description": "Filter list by person id."
          },
          {
            "in": "path",
            "name": "project_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/."
          },
          {
            "in": "query",
            "name": "properties",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Property"
              }
            },
            "description": "Filter events by event property, person property, cohort, groups and more."
          },
          {
            "in": "query",
            "name": "select",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "(Experimental) JSON-serialized array of HogQL expressions to return"
          },
          {
            "in": "query",
            "name": "where",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "(Experimental) JSON-serialized array of HogQL expressions that must pass"
          }
        ],
        "tags": ["events"],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedClickhouseEventList"
                }
              },
              "text/csv": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedClickhouseEventList"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/projects/{project_id}/events/{id}/": {
      "get": {
        "operationId": "events_retrieve",
        "parameters": [
          {
            "in": "query",
            "name": "format",
            "schema": {
              "type": "string",
              "enum": ["csv", "json"]
            }
          },
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "project_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/."
          }
        ],
        "tags": ["events"],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClickhouseEvent"
                }
              },
              "text/csv": {
                "schema": {
                  "$ref": "#/components/schemas/ClickhouseEvent"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/projects/{project_id}/events/values/": {
      "get": {
        "operationId": "events_values_retrieve",
        "parameters": [
          {
            "in": "query",
            "name": "format",
            "schema": {
              "type": "string",
              "enum": ["csv", "json"]
            }
          },
          {
            "in": "path",
            "name": "project_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/."
          }
        ],
        "tags": ["events"],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClickhouseEvent"
                }
              },
              "text/csv": {
                "schema": {
                  "$ref": "#/components/schemas/ClickhouseEvent"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/projects/{project_id}/experiments/": {
      "get": {
        "operationId": "experiments_list",
        "parameters": [
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Number of results to return per page.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "offset",
            "required": false,
            "in": "query",
            "description": "The initial index from which to return the results.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "project_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/."
          }
        ],
        "tags": ["experiments"],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedExperimentList"
                }
              }
            },
            "description": ""
          }
        }
      },
      "post": {
        "operationId": "experiments_create",
        "parameters": [
          {
            "in": "path",
            "name": "project_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/."
          }
        ],
        "tags": ["experiments"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Experiment"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/Experiment"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/Experiment"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Experiment"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/projects/{project_id}/experiments/{id}/": {
      "get": {
        "operationId": "experiments_retrieve",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "description": "A unique integer value identifying this experiment.",
            "required": true
          },
          {
            "in": "path",
            "name": "project_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/."
          }
        ],
        "tags": ["experiments"],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Experiment"
                }
              }
            },
            "description": ""
          }
        }
      },
      "put": {
        "operationId": "experiments_update",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "description": "A unique integer value identifying this experiment.",
            "required": true
          },
          {
            "in": "path",
            "name": "project_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/."
          }
        ],
        "tags": ["experiments"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Experiment"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/Experiment"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/Experiment"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Experiment"
                }
              }
            },
            "description": ""
          }
        }
      },
      "patch": {
        "operationId": "experiments_partial_update",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "description": "A unique integer value identifying this experiment.",
            "required": true
          },
          {
            "in": "path",
            "name": "project_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/."
          }
        ],
        "tags": ["experiments"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PatchedExperiment"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/PatchedExperiment"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/PatchedExperiment"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Experiment"
                }
              }
            },
            "description": ""
          }
        }
      },
      "delete": {
        "operationId": "experiments_destroy",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "description": "A unique integer value identifying this experiment.",
            "required": true
          },
          {
            "in": "path",
            "name": "project_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/."
          }
        ],
        "tags": ["experiments"],
        "responses": {
          "204": {
            "description": "No response body"
          }
        }
      }
    },
    "/api/projects/{project_id}/experiments/{id}/results/": {
      "get": {
        "operationId": "experiments_results_retrieve",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "description": "A unique integer value identifying this experiment.",
            "required": true
          },
          {
            "in": "path",
            "name": "project_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/."
          }
        ],
        "tags": ["experiments"],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Experiment"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/projects/{project_id}/experiments/{id}/secondary_results/": {
      "get": {
        "operationId": "experiments_secondary_results_retrieve",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "description": "A unique integer value identifying this experiment.",
            "required": true
          },
          {
            "in": "path",
            "name": "project_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/."
          }
        ],
        "tags": ["experiments"],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Experiment"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/projects/{project_id}/experiments/requires_flag_implementation/": {
      "get": {
        "operationId": "experiments_requires_flag_implementation_retrieve",
        "parameters": [
          {
            "in": "path",
            "name": "project_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/."
          }
        ],
        "tags": ["experiments"],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Experiment"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/projects/{project_id}/exports/": {
      "post": {
        "operationId": "exports_create",
        "parameters": [
          {
            "in": "path",
            "name": "project_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/."
          }
        ],
        "tags": ["exports"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ExportedAsset"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/ExportedAsset"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/ExportedAsset"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExportedAsset"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/projects/{project_id}/exports/{id}/": {
      "get": {
        "operationId": "exports_retrieve",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "description": "A unique integer value identifying this exported asset.",
            "required": true
          },
          {
            "in": "path",
            "name": "project_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/."
          }
        ],
        "tags": ["exports"],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExportedAsset"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/projects/{project_id}/exports/{id}/content/": {
      "get": {
        "operationId": "exports_content_retrieve",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "description": "A unique integer value identifying this exported asset.",
            "required": true
          },
          {
            "in": "path",
            "name": "project_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/."
          }
        ],
        "tags": ["exports"],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExportedAsset"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/projects/{project_id}/feature_flags/": {
      "get": {
        "operationId": "feature_flags_list",
        "description": "Create, read, update and delete feature flags. [See docs](https://posthog.com/docs/user-guides/feature-flags) for more information on feature flags.\n\nIf you're looking to use feature flags on your application, you can either use our JavaScript Library or our dedicated endpoint to check if feature flags are enabled for a given user.",
        "parameters": [
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Number of results to return per page.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "offset",
            "required": false,
            "in": "query",
            "description": "The initial index from which to return the results.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "project_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/."
          }
        ],
        "tags": ["feature_flags"],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedFeatureFlagList"
                }
              }
            },
            "description": ""
          }
        }
      },
      "post": {
        "operationId": "feature_flags_create",
        "description": "Create, read, update and delete feature flags. [See docs](https://posthog.com/docs/user-guides/feature-flags) for more information on feature flags.\n\nIf you're looking to use feature flags on your application, you can either use our JavaScript Library or our dedicated endpoint to check if feature flags are enabled for a given user.",
        "parameters": [
          {
            "in": "path",
            "name": "project_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/."
          }
        ],
        "tags": ["feature_flags"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FeatureFlag"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/FeatureFlag"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/FeatureFlag"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FeatureFlag"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/projects/{project_id}/feature_flags/{parent_lookup_feature_flag_id}/role_access/": {
      "get": {
        "operationId": "feature_flags_role_access_list",
        "parameters": [
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Number of results to return per page.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "offset",
            "required": false,
            "in": "query",
            "description": "The initial index from which to return the results.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "parent_lookup_feature_flag_id",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "project_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/."
          }
        ],
        "tags": ["feature_flags"],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedFeatureFlagRoleAccessList"
                }
              }
            },
            "description": ""
          }
        }
      },
      "post": {
        "operationId": "feature_flags_role_access_create",
        "parameters": [
          {
            "in": "path",
            "name": "parent_lookup_feature_flag_id",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "project_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/."
          }
        ],
        "tags": ["feature_flags"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FeatureFlagRoleAccess"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/FeatureFlagRoleAccess"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/FeatureFlagRoleAccess"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FeatureFlagRoleAccess"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/projects/{project_id}/feature_flags/{parent_lookup_feature_flag_id}/role_access/{id}/": {
      "get": {
        "operationId": "feature_flags_role_access_retrieve",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "description": "A unique integer value identifying this feature flag role access.",
            "required": true
          },
          {
            "in": "path",
            "name": "parent_lookup_feature_flag_id",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "project_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/."
          }
        ],
        "tags": ["feature_flags"],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FeatureFlagRoleAccess"
                }
              }
            },
            "description": ""
          }
        }
      },
      "delete": {
        "operationId": "feature_flags_role_access_destroy",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "description": "A unique integer value identifying this feature flag role access.",
            "required": true
          },
          {
            "in": "path",
            "name": "parent_lookup_feature_flag_id",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "project_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/."
          }
        ],
        "tags": ["feature_flags"],
        "responses": {
          "204": {
            "description": "No response body"
          }
        }
      }
    },
    "/api/projects/{project_id}/feature_flags/{id}/": {
      "get": {
        "operationId": "feature_flags_retrieve",
        "description": "Create, read, update and delete feature flags. [See docs](https://posthog.com/docs/user-guides/feature-flags) for more information on feature flags.\n\nIf you're looking to use feature flags on your application, you can either use our JavaScript Library or our dedicated endpoint to check if feature flags are enabled for a given user.",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "description": "A unique integer value identifying this feature flag.",
            "required": true
          },
          {
            "in": "path",
            "name": "project_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/."
          }
        ],
        "tags": ["feature_flags"],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FeatureFlag"
                }
              }
            },
            "description": ""
          }
        }
      },
      "put": {
        "operationId": "feature_flags_update",
        "description": "Create, read, update and delete feature flags. [See docs](https://posthog.com/docs/user-guides/feature-flags) for more information on feature flags.\n\nIf you're looking to use feature flags on your application, you can either use our JavaScript Library or our dedicated endpoint to check if feature flags are enabled for a given user.",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "description": "A unique integer value identifying this feature flag.",
            "required": true
          },
          {
            "in": "path",
            "name": "project_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/."
          }
        ],
        "tags": ["feature_flags"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FeatureFlag"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/FeatureFlag"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/FeatureFlag"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FeatureFlag"
                }
              }
            },
            "description": ""
          }
        }
      },
      "patch": {
        "operationId": "feature_flags_partial_update",
        "description": "Create, read, update and delete feature flags. [See docs](https://posthog.com/docs/user-guides/feature-flags) for more information on feature flags.\n\nIf you're looking to use feature flags on your application, you can either use our JavaScript Library or our dedicated endpoint to check if feature flags are enabled for a given user.",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "description": "A unique integer value identifying this feature flag.",
            "required": true
          },
          {
            "in": "path",
            "name": "project_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/."
          }
        ],
        "tags": ["feature_flags"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PatchedFeatureFlag"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/PatchedFeatureFlag"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/PatchedFeatureFlag"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FeatureFlag"
                }
              }
            },
            "description": ""
          }
        }
      },
      "delete": {
        "operationId": "feature_flags_destroy",
        "description": "Hard delete of this model is not allowed. Use a patch API call to set \"deleted\" to true",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "description": "A unique integer value identifying this feature flag.",
            "required": true
          },
          {
            "in": "path",
            "name": "project_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/."
          }
        ],
        "tags": ["feature_flags"],
        "responses": {
          "405": {
            "description": "No response body"
          }
        }
      }
    },
    "/api/projects/{project_id}/feature_flags/{id}/activity/": {
      "get": {
        "operationId": "feature_flags_activity_retrieve_2",
        "description": "Create, read, update and delete feature flags. [See docs](https://posthog.com/docs/user-guides/feature-flags) for more information on feature flags.\n\nIf you're looking to use feature flags on your application, you can either use our JavaScript Library or our dedicated endpoint to check if feature flags are enabled for a given user.",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "description": "A unique integer value identifying this feature flag.",
            "required": true
          },
          {
            "in": "path",
            "name": "project_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/."
          }
        ],
        "tags": ["feature_flags"],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FeatureFlag"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/projects/{project_id}/feature_flags/{id}/dashboard/": {
      "post": {
        "operationId": "feature_flags_dashboard_create",
        "description": "Create, read, update and delete feature flags. [See docs](https://posthog.com/docs/user-guides/feature-flags) for more information on feature flags.\n\nIf you're looking to use feature flags on your application, you can either use our JavaScript Library or our dedicated endpoint to check if feature flags are enabled for a given user.",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "description": "A unique integer value identifying this feature flag.",
            "required": true
          },
          {
            "in": "path",
            "name": "project_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/."
          }
        ],
        "tags": ["feature_flags"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FeatureFlag"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/FeatureFlag"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/FeatureFlag"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FeatureFlag"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/projects/{project_id}/feature_flags/activity/": {
      "get": {
        "operationId": "feature_flags_activity_retrieve",
        "description": "Create, read, update and delete feature flags. [See docs](https://posthog.com/docs/user-guides/feature-flags) for more information on feature flags.\n\nIf you're looking to use feature flags on your application, you can either use our JavaScript Library or our dedicated endpoint to check if feature flags are enabled for a given user.",
        "parameters": [
          {
            "in": "path",
            "name": "project_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/."
          }
        ],
        "tags": ["feature_flags"],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FeatureFlag"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/projects/{project_id}/feature_flags/evaluation_reasons/": {
      "get": {
        "operationId": "feature_flags_evaluation_reasons_retrieve",
        "description": "Create, read, update and delete feature flags. [See docs](https://posthog.com/docs/user-guides/feature-flags) for more information on feature flags.\n\nIf you're looking to use feature flags on your application, you can either use our JavaScript Library or our dedicated endpoint to check if feature flags are enabled for a given user.",
        "parameters": [
          {
            "in": "path",
            "name": "project_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/."
          }
        ],
        "tags": ["feature_flags"],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FeatureFlag"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/projects/{project_id}/feature_flags/local_evaluation/": {
      "get": {
        "operationId": "feature_flags_local_evaluation_retrieve",
        "description": "Create, read, update and delete feature flags. [See docs](https://posthog.com/docs/user-guides/feature-flags) for more information on feature flags.\n\nIf you're looking to use feature flags on your application, you can either use our JavaScript Library or our dedicated endpoint to check if feature flags are enabled for a given user.",
        "parameters": [
          {
            "in": "path",
            "name": "project_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/."
          }
        ],
        "tags": ["feature_flags"],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FeatureFlag"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/projects/{project_id}/feature_flags/my_flags/": {
      "get": {
        "operationId": "feature_flags_my_flags_retrieve",
        "description": "Create, read, update and delete feature flags. [See docs](https://posthog.com/docs/user-guides/feature-flags) for more information on feature flags.\n\nIf you're looking to use feature flags on your application, you can either use our JavaScript Library or our dedicated endpoint to check if feature flags are enabled for a given user.",
        "parameters": [
          {
            "in": "path",
            "name": "project_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/."
          }
        ],
        "tags": ["feature_flags"],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FeatureFlag"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/projects/{project_id}/feature_flags/user_blast_radius/": {
      "post": {
        "operationId": "feature_flags_user_blast_radius_create",
        "description": "Create, read, update and delete feature flags. [See docs](https://posthog.com/docs/user-guides/feature-flags) for more information on feature flags.\n\nIf you're looking to use feature flags on your application, you can either use our JavaScript Library or our dedicated endpoint to check if feature flags are enabled for a given user.",
        "parameters": [
          {
            "in": "path",
            "name": "project_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/."
          }
        ],
        "tags": ["feature_flags"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FeatureFlag"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/FeatureFlag"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/FeatureFlag"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FeatureFlag"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/projects/{project_id}/groups/": {
      "get": {
        "operationId": "groups_list",
        "description": "List all groups of a specific group type. You must pass ?group_type_index= in the URL. To get a list of valid group types, call /api/:project_id/groups_types/",
        "parameters": [
          {
            "name": "cursor",
            "required": false,
            "in": "query",
            "description": "The pagination cursor value.",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "group_type_index",
            "schema": {
              "type": "integer"
            },
            "description": "Specify the group type to list",
            "required": true
          },
          {
            "in": "path",
            "name": "project_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/."
          },
          {
            "in": "query",
            "name": "search",
            "schema": {
              "type": "string"
            },
            "description": "Search the group name",
            "required": true
          }
        ],
        "tags": ["groups"],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedGroupList"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/projects/{project_id}/groups/find/": {
      "get": {
        "operationId": "groups_find_retrieve",
        "parameters": [
          {
            "in": "query",
            "name": "group_key",
            "schema": {
              "type": "string"
            },
            "description": "Specify the key of the group to find",
            "required": true
          },
          {
            "in": "query",
            "name": "group_type_index",
            "schema": {
              "type": "integer"
            },
            "description": "Specify the group type to find",
            "required": true
          },
          {
            "in": "path",
            "name": "project_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/."
          }
        ],
        "tags": ["groups"],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Group"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/projects/{project_id}/groups/property_definitions/": {
      "get": {
        "operationId": "groups_property_definitions_retrieve",
        "parameters": [
          {
            "in": "path",
            "name": "project_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/."
          }
        ],
        "tags": ["groups"],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Group"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/projects/{project_id}/groups/property_values/": {
      "get": {
        "operationId": "groups_property_values_retrieve",
        "parameters": [
          {
            "in": "query",
            "name": "group_type_index",
            "schema": {
              "type": "integer"
            },
            "description": "Specify the group type to find property values of",
            "required": true
          },
          {
            "in": "query",
            "name": "key",
            "schema": {
              "type": "string"
            },
            "description": "Specify the property key to find values for",
            "required": true
          },
          {
            "in": "path",
            "name": "project_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/."
          }
        ],
        "tags": ["groups"],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Group"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/projects/{project_id}/groups/related/": {
      "get": {
        "operationId": "groups_related_retrieve",
        "parameters": [
          {
            "in": "query",
            "name": "group_type_index",
            "schema": {
              "type": "integer"
            },
            "description": "Specify the group type to find",
            "required": true
          },
          {
            "in": "query",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "description": "Specify the id of the user to find groups for",
            "required": true
          },
          {
            "in": "path",
            "name": "project_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/."
          }
        ],
        "tags": ["groups"],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Group"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/projects/{project_id}/groups_types/": {
      "get": {
        "operationId": "groups_types_list",
        "parameters": [
          {
            "in": "path",
            "name": "project_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/."
          }
        ],
        "tags": ["groups_types"],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GroupType"
                  }
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/projects/{project_id}/groups_types/update_metadata/": {
      "patch": {
        "operationId": "groups_types_update_metadata_partial_update",
        "parameters": [
          {
            "in": "path",
            "name": "project_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/."
          }
        ],
        "tags": ["groups_types"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PatchedGroupType"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/PatchedGroupType"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/PatchedGroupType"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GroupType"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/projects/{project_id}/hooks/": {
      "get": {
        "operationId": "hooks_list",
        "description": "Retrieve, create, update or destroy REST hooks.",
        "parameters": [
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Number of results to return per page.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "offset",
            "required": false,
            "in": "query",
            "description": "The initial index from which to return the results.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "project_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/."
          }
        ],
        "tags": ["hooks"],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedHookList"
                }
              }
            },
            "description": ""
          }
        }
      },
      "post": {
        "operationId": "hooks_create",
        "description": "Retrieve, create, update or destroy REST hooks.",
        "parameters": [
          {
            "in": "path",
            "name": "project_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/."
          }
        ],
        "tags": ["hooks"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Hook"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/Hook"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/Hook"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Hook"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/projects/{project_id}/hooks/{id}/": {
      "get": {
        "operationId": "hooks_retrieve",
        "description": "Retrieve, create, update or destroy REST hooks.",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "description": "A unique value identifying this hook.",
            "required": true
          },
          {
            "in": "path",
            "name": "project_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/."
          }
        ],
        "tags": ["hooks"],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Hook"
                }
              }
            },
            "description": ""
          }
        }
      },
      "put": {
        "operationId": "hooks_update",
        "description": "Retrieve, create, update or destroy REST hooks.",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "description": "A unique value identifying this hook.",
            "required": true
          },
          {
            "in": "path",
            "name": "project_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/."
          }
        ],
        "tags": ["hooks"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Hook"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/Hook"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/Hook"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Hook"
                }
              }
            },
            "description": ""
          }
        }
      },
      "patch": {
        "operationId": "hooks_partial_update",
        "description": "Retrieve, create, update or destroy REST hooks.",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "description": "A unique value identifying this hook.",
            "required": true
          },
          {
            "in": "path",
            "name": "project_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/."
          }
        ],
        "tags": ["hooks"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PatchedHook"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/PatchedHook"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/PatchedHook"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Hook"
                }
              }
            },
            "description": ""
          }
        }
      },
      "delete": {
        "operationId": "hooks_destroy",
        "description": "Retrieve, create, update or destroy REST hooks.",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "description": "A unique value identifying this hook.",
            "required": true
          },
          {
            "in": "path",
            "name": "project_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/."
          }
        ],
        "tags": ["hooks"],
        "responses": {
          "204": {
            "description": "No response body"
          }
        }
      }
    },
    "/api/projects/{project_id}/ingestion_warnings/": {
      "get": {
        "operationId": "ingestion_warnings_retrieve",
        "parameters": [
          {
            "in": "path",
            "name": "project_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/."
          }
        ],
        "tags": ["ingestion_warnings"],
        "responses": {
          "200": {
            "description": "No response body"
          }
        }
      }
    },
    "/api/projects/{project_id}/insights/": {
      "get": {
        "operationId": "insights_list",
        "parameters": [
          {
            "in": "query",
            "name": "created_by",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "format",
            "schema": {
              "type": "string",
              "enum": ["csv", "json"]
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Number of results to return per page.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "offset",
            "required": false,
            "in": "query",
            "description": "The initial index from which to return the results.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "project_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/."
          },
          {
            "in": "query",
            "name": "short_id",
            "schema": {
              "type": "string"
            }
          }
        ],
        "tags": ["insights"],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedInsightList"
                }
              },
              "text/csv": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedInsightList"
                }
              }
            },
            "description": ""
          }
        }
      },
      "post": {
        "operationId": "insights_create",
        "parameters": [
          {
            "in": "query",
            "name": "format",
            "schema": {
              "type": "string",
              "enum": ["csv", "json"]
            }
          },
          {
            "in": "path",
            "name": "project_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/."
          }
        ],
        "tags": ["insights"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Insight"
              }
            }
          }
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Insight"
                }
              },
              "text/csv": {
                "schema": {
                  "$ref": "#/components/schemas/Insight"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/projects/{project_id}/insights/{id}/": {
      "get": {
        "operationId": "insights_retrieve",
        "parameters": [
          {
            "in": "query",
            "name": "format",
            "schema": {
              "type": "string",
              "enum": ["csv", "json"]
            }
          },
          {
            "in": "query",
            "name": "from_dashboard",
            "schema": {
              "type": "integer"
            },
            "description": "\nWhen loading an insight for a dashboard pass a `from_dashboard` query parameter containing the dashboard ID\n\ne.g. `\"/api/projects/{team_id}/insights/{insight_id}?from_dashboard={dashboard_id}\"`\n\nInsights can be added to more than one dashboard, this allows the insight to be loaded in the correct context.\n\nUsing the correct cache and enriching the response with dashboard specific config (e.g. layouts or colors)"
          },
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "description": "A unique integer value identifying this insight.",
            "required": true
          },
          {
            "in": "path",
            "name": "project_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/."
          },
          {
            "in": "query",
            "name": "refresh",
            "schema": {
              "type": "boolean"
            },
            "description": "\n                The client can request that an insight be refreshed by setting the `refresh=true` parameter.\n                The server will then decide if the data should or not be refreshed based on a set of heuristics\n                meant to determine the staleness of cached data. The result will contain as `is_cached` field\n                that indicates whether the insight was actually refreshed or not through the request."
          }
        ],
        "tags": ["insights"],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Insight"
                }
              },
              "text/csv": {
                "schema": {
                  "$ref": "#/components/schemas/Insight"
                }
              }
            },
            "description": ""
          }
        }
      },
      "put": {
        "operationId": "insights_update",
        "parameters": [
          {
            "in": "query",
            "name": "format",
            "schema": {
              "type": "string",
              "enum": ["csv", "json"]
            }
          },
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "description": "A unique integer value identifying this insight.",
            "required": true
          },
          {
            "in": "path",
            "name": "project_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/."
          }
        ],
        "tags": ["insights"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Insight"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Insight"
                }
              },
              "text/csv": {
                "schema": {
                  "$ref": "#/components/schemas/Insight"
                }
              }
            },
            "description": ""
          }
        }
      },
      "patch": {
        "operationId": "insights_partial_update",
        "parameters": [
          {
            "in": "query",
            "name": "format",
            "schema": {
              "type": "string",
              "enum": ["csv", "json"]
            }
          },
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "description": "A unique integer value identifying this insight.",
            "required": true
          },
          {
            "in": "path",
            "name": "project_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/."
          }
        ],
        "tags": ["insights"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PatchedInsight"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Insight"
                }
              },
              "text/csv": {
                "schema": {
                  "$ref": "#/components/schemas/Insight"
                }
              }
            },
            "description": ""
          }
        }
      },
      "delete": {
        "operationId": "insights_destroy",
        "description": "Hard delete of this model is not allowed. Use a patch API call to set \"deleted\" to true",
        "parameters": [
          {
            "in": "query",
            "name": "format",
            "schema": {
              "type": "string",
              "enum": ["csv", "json"]
            }
          },
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "description": "A unique integer value identifying this insight.",
            "required": true
          },
          {
            "in": "path",
            "name": "project_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/."
          }
        ],
        "tags": ["insights"],
        "responses": {
          "405": {
            "description": "No response body"
          }
        }
      }
    },
    "/api/projects/{project_id}/insights/{id}/activity/": {
      "get": {
        "operationId": "insights_activity_retrieve_2",
        "parameters": [
          {
            "in": "query",
            "name": "format",
            "schema": {
              "type": "string",
              "enum": ["csv", "json"]
            }
          },
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "description": "A unique integer value identifying this insight.",
            "required": true
          },
          {
            "in": "path",
            "name": "project_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/."
          }
        ],
        "tags": ["insights"],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Insight"
                }
              },
              "text/csv": {
                "schema": {
                  "$ref": "#/components/schemas/Insight"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/projects/{project_id}/insights/{id}/viewed/": {
      "post": {
        "operationId": "insights_viewed_create",
        "parameters": [
          {
            "in": "query",
            "name": "format",
            "schema": {
              "type": "string",
              "enum": ["csv", "json"]
            }
          },
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "description": "A unique integer value identifying this insight.",
            "required": true
          },
          {
            "in": "path",
            "name": "project_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/."
          }
        ],
        "tags": ["insights"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Insight"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Insight"
                }
              },
              "text/csv": {
                "schema": {
                  "$ref": "#/components/schemas/Insight"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/projects/{project_id}/insights/activity/": {
      "get": {
        "operationId": "insights_activity_retrieve",
        "parameters": [
          {
            "in": "query",
            "name": "format",
            "schema": {
              "type": "string",
              "enum": ["csv", "json"]
            }
          },
          {
            "in": "path",
            "name": "project_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/."
          }
        ],
        "tags": ["insights"],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Insight"
                }
              },
              "text/csv": {
                "schema": {
                  "$ref": "#/components/schemas/Insight"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/projects/{project_id}/insights/cancel/": {
      "post": {
        "operationId": "insights_cancel_create",
        "parameters": [
          {
            "in": "query",
            "name": "format",
            "schema": {
              "type": "string",
              "enum": ["csv", "json"]
            }
          },
          {
            "in": "path",
            "name": "project_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/."
          }
        ],
        "tags": ["insights"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Insight"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Insight"
                }
              },
              "text/csv": {
                "schema": {
                  "$ref": "#/components/schemas/Insight"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/projects/{project_id}/insights/funnel/": {
      "get": {
        "operationId": "insights_funnel_retrieve",
        "parameters": [
          {
            "in": "query",
            "name": "format",
            "schema": {
              "type": "string",
              "enum": ["csv", "json"]
            }
          },
          {
            "in": "path",
            "name": "project_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/."
          }
        ],
        "tags": ["insights"],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Insight"
                }
              },
              "text/csv": {
                "schema": {
                  "$ref": "#/components/schemas/Insight"
                }
              }
            },
            "description": ""
          }
        }
      },
      "post": {
        "operationId": "Funnels",
        "parameters": [
          {
            "in": "query",
            "name": "format",
            "schema": {
              "type": "string",
              "enum": ["csv", "json"]
            }
          },
          {
            "in": "path",
            "name": "project_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/."
          }
        ],
        "tags": ["funnel", "insights"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Funnel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FunnelStepsResults"
                }
              },
              "text/csv": {
                "schema": {
                  "$ref": "#/components/schemas/FunnelStepsResults"
                }
              }
            },
            "description": "Note, if funnel_viz_type is set the response will be different."
          }
        }
      }
    },
    "/api/projects/{project_id}/insights/funnel/correlation/": {
      "get": {
        "operationId": "insights_funnel_correlation_retrieve",
        "parameters": [
          {
            "in": "query",
            "name": "format",
            "schema": {
              "type": "string",
              "enum": ["csv", "json"]
            }
          },
          {
            "in": "path",
            "name": "project_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/."
          }
        ],
        "tags": ["insights"],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Insight"
                }
              },
              "text/csv": {
                "schema": {
                  "$ref": "#/components/schemas/Insight"
                }
              }
            },
            "description": ""
          }
        }
      },
      "post": {
        "operationId": "insights_funnel_correlation_create",
        "parameters": [
          {
            "in": "query",
            "name": "format",
            "schema": {
              "type": "string",
              "enum": ["csv", "json"]
            }
          },
          {
            "in": "path",
            "name": "project_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/."
          }
        ],
        "tags": ["insights"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Insight"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Insight"
                }
              },
              "text/csv": {
                "schema": {
                  "$ref": "#/components/schemas/Insight"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/projects/{project_id}/insights/my_last_viewed/": {
      "get": {
        "operationId": "insights_my_last_viewed_retrieve",
        "description": "Returns basic details about the last 5 insights viewed by this user. Most recently viewed first.",
        "parameters": [
          {
            "in": "query",
            "name": "format",
            "schema": {
              "type": "string",
              "enum": ["csv", "json"]
            }
          },
          {
            "in": "path",
            "name": "project_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/."
          }
        ],
        "tags": ["insights"],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Insight"
                }
              },
              "text/csv": {
                "schema": {
                  "$ref": "#/components/schemas/Insight"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/projects/{project_id}/insights/path/": {
      "get": {
        "operationId": "insights_path_retrieve",
        "parameters": [
          {
            "in": "query",
            "name": "format",
            "schema": {
              "type": "string",
              "enum": ["csv", "json"]
            }
          },
          {
            "in": "path",
            "name": "project_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/."
          }
        ],
        "tags": ["insights"],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Insight"
                }
              },
              "text/csv": {
                "schema": {
                  "$ref": "#/components/schemas/Insight"
                }
              }
            },
            "description": ""
          }
        }
      },
      "post": {
        "operationId": "insights_path_create",
        "parameters": [
          {
            "in": "query",
            "name": "format",
            "schema": {
              "type": "string",
              "enum": ["csv", "json"]
            }
          },
          {
            "in": "path",
            "name": "project_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/."
          }
        ],
        "tags": ["insights"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Insight"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Insight"
                }
              },
              "text/csv": {
                "schema": {
                  "$ref": "#/components/schemas/Insight"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/projects/{project_id}/insights/retention/": {
      "get": {
        "operationId": "insights_retention_retrieve",
        "parameters": [
          {
            "in": "query",
            "name": "format",
            "schema": {
              "type": "string",
              "enum": ["csv", "json"]
            }
          },
          {
            "in": "path",
            "name": "project_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/."
          }
        ],
        "tags": ["insights"],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Insight"
                }
              },
              "text/csv": {
                "schema": {
                  "$ref": "#/components/schemas/Insight"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/projects/{project_id}/insights/timing/": {
      "post": {
        "operationId": "insights_timing_create",
        "parameters": [
          {
            "in": "query",
            "name": "format",
            "schema": {
              "type": "string",
              "enum": ["csv", "json"]
            }
          },
          {
            "in": "path",
            "name": "project_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/."
          }
        ],
        "tags": ["insights"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Insight"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Insight"
                }
              },
              "text/csv": {
                "schema": {
                  "$ref": "#/components/schemas/Insight"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/projects/{project_id}/insights/trend/": {
      "get": {
        "operationId": "insights_trend_retrieve",
        "parameters": [
          {
            "in": "query",
            "name": "format",
            "schema": {
              "type": "string",
              "enum": ["csv", "json"]
            }
          },
          {
            "in": "path",
            "name": "project_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/."
          }
        ],
        "tags": ["insights"],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Insight"
                }
              },
              "text/csv": {
                "schema": {
                  "$ref": "#/components/schemas/Insight"
                }
              }
            },
            "description": ""
          }
        }
      },
      "post": {
        "operationId": "Trends",
        "parameters": [
          {
            "in": "query",
            "name": "format",
            "schema": {
              "type": "string",
              "enum": ["csv", "json"]
            }
          },
          {
            "in": "path",
            "name": "project_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/."
          }
        ],
        "tags": ["trend", "insights"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Trend"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TrendResults"
                }
              },
              "text/csv": {
                "schema": {
                  "$ref": "#/components/schemas/TrendResults"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/projects/{project_id}/integrations/": {
      "get": {
        "operationId": "integrations_list",
        "parameters": [
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Number of results to return per page.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "offset",
            "required": false,
            "in": "query",
            "description": "The initial index from which to return the results.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "project_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/."
          }
        ],
        "tags": ["integrations"],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedIntegrationList"
                }
              }
            },
            "description": ""
          }
        }
      },
      "post": {
        "operationId": "integrations_create",
        "parameters": [
          {
            "in": "path",
            "name": "project_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/."
          }
        ],
        "tags": ["integrations"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Integration"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/Integration"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/Integration"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Integration"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/projects/{project_id}/integrations/{id}/": {
      "get": {
        "operationId": "integrations_retrieve",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "description": "A unique integer value identifying this integration.",
            "required": true
          },
          {
            "in": "path",
            "name": "project_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/."
          }
        ],
        "tags": ["integrations"],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Integration"
                }
              }
            },
            "description": ""
          }
        }
      },
      "delete": {
        "operationId": "integrations_destroy",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "description": "A unique integer value identifying this integration.",
            "required": true
          },
          {
            "in": "path",
            "name": "project_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/."
          }
        ],
        "tags": ["integrations"],
        "responses": {
          "204": {
            "description": "No response body"
          }
        }
      }
    },
    "/api/projects/{project_id}/integrations/{id}/channels/": {
      "get": {
        "operationId": "integrations_channels_retrieve",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "description": "A unique integer value identifying this integration.",
            "required": true
          },
          {
            "in": "path",
            "name": "project_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/."
          }
        ],
        "tags": ["integrations"],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Integration"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/projects/{project_id}/performance_events/": {
      "get": {
        "operationId": "performance_events_list",
        "parameters": [
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Number of results to return per page.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "offset",
            "required": false,
            "in": "query",
            "description": "The initial index from which to return the results.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "project_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/."
          }
        ],
        "tags": ["performance_events"],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedPerformanceEventList"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/projects/{project_id}/performance_events/recent_pageviews/": {
      "get": {
        "operationId": "performance_events_recent_pageviews_retrieve",
        "parameters": [
          {
            "in": "path",
            "name": "project_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/."
          }
        ],
        "tags": ["performance_events"],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PerformanceEvent"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/projects/{project_id}/persons/": {
      "get": {
        "operationId": "persons_list",
        "description": "To create or update persons, use a PostHog library of your choice and [use an identify call](/docs/integrate/identifying-users). This API endpoint is only for reading and deleting.",
        "parameters": [
          {
            "in": "query",
            "name": "distinct_id",
            "schema": {
              "type": "string"
            },
            "description": "Filter list by distinct id."
          },
          {
            "in": "query",
            "name": "email",
            "schema": {
              "type": "string"
            },
            "description": "Filter persons by email (exact match)",
            "examples": {
              "Email": {
                "value": "test@test.com",
                "summary": "email"
              }
            }
          },
          {
            "in": "query",
            "name": "format",
            "schema": {
              "type": "string",
              "enum": ["csv", "json"]
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Number of results to return per page.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "offset",
            "required": false,
            "in": "query",
            "description": "The initial index from which to return the results.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "project_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/."
          },
          {
            "in": "query",
            "name": "properties",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Property"
              }
            },
            "description": "Filter Persons by person properties."
          },
          {
            "in": "query",
            "name": "search",
            "schema": {
              "type": "string"
            },
            "description": "Search persons, either by email (full text search) or distinct_id (exact match)."
          }
        ],
        "tags": ["persons"],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedPersonList"
                }
              },
              "text/csv": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedPersonList"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/projects/{project_id}/persons/{id}/": {
      "get": {
        "operationId": "persons_retrieve",
        "description": "To create or update persons, use a PostHog library of your choice and [use an identify call](/docs/integrate/identifying-users). This API endpoint is only for reading and deleting.",
        "parameters": [
          {
            "in": "query",
            "name": "format",
            "schema": {
              "type": "string",
              "enum": ["csv", "json"]
            }
          },
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "description": "A unique integer value identifying this person.",
            "required": true
          },
          {
            "in": "path",
            "name": "project_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/."
          }
        ],
        "tags": ["persons"],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Person"
                }
              },
              "text/csv": {
                "schema": {
                  "$ref": "#/components/schemas/Person"
                }
              }
            },
            "description": ""
          }
        }
      },
      "put": {
        "operationId": "persons_update",
        "description": "Only for setting properties on the person. \"properties\" from the request data will be updated via a \"$set\" event.\nThis means that only the properties listed will be updated, but other properties won't be removed nor updated.\nIf you would like to remove a property use the `delete_property` endpoint.",
        "parameters": [
          {
            "in": "query",
            "name": "format",
            "schema": {
              "type": "string",
              "enum": ["csv", "json"]
            }
          },
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "description": "A unique integer value identifying this person.",
            "required": true
          },
          {
            "in": "path",
            "name": "project_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/."
          }
        ],
        "tags": ["persons"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Person"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/Person"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/Person"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Person"
                }
              },
              "text/csv": {
                "schema": {
                  "$ref": "#/components/schemas/Person"
                }
              }
            },
            "description": ""
          }
        }
      },
      "patch": {
        "operationId": "persons_partial_update",
        "description": "To create or update persons, use a PostHog library of your choice and [use an identify call](/docs/integrate/identifying-users). This API endpoint is only for reading and deleting.",
        "parameters": [
          {
            "in": "query",
            "name": "format",
            "schema": {
              "type": "string",
              "enum": ["csv", "json"]
            }
          },
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "description": "A unique integer value identifying this person.",
            "required": true
          },
          {
            "in": "path",
            "name": "project_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/."
          }
        ],
        "tags": ["persons"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PatchedPerson"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/PatchedPerson"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/PatchedPerson"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Person"
                }
              },
              "text/csv": {
                "schema": {
                  "$ref": "#/components/schemas/Person"
                }
              }
            },
            "description": ""
          }
        }
      },
      "delete": {
        "operationId": "persons_destroy",
        "description": "To create or update persons, use a PostHog library of your choice and [use an identify call](/docs/integrate/identifying-users). This API endpoint is only for reading and deleting.",
        "parameters": [
          {
            "in": "query",
            "name": "delete_events",
            "schema": {
              "type": "boolean",
              "default": false
            },
            "description": "If true, a task to delete all events associated with this person will be created and queued. The task does not run immediately and instead is batched together and at 5AM UTC every Sunday (controlled by environment variable CLEAR_CLICKHOUSE_REMOVED_DATA_SCHEDULE_CRON)"
          },
          {
            "in": "query",
            "name": "format",
            "schema": {
              "type": "string",
              "enum": ["csv", "json"]
            }
          },
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "description": "A unique integer value identifying this person.",
            "required": true
          },
          {
            "in": "path",
            "name": "project_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/."
          }
        ],
        "tags": ["persons"],
        "responses": {
          "204": {
            "description": "No response body"
          }
        }
      }
    },
    "/api/projects/{project_id}/persons/{id}/activity/": {
      "get": {
        "operationId": "persons_activity_retrieve_2",
        "description": "To create or update persons, use a PostHog library of your choice and [use an identify call](/docs/integrate/identifying-users). This API endpoint is only for reading and deleting.",
        "parameters": [
          {
            "in": "query",
            "name": "format",
            "schema": {
              "type": "string",
              "enum": ["csv", "json"]
            }
          },
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "description": "A unique integer value identifying this person.",
            "required": true
          },
          {
            "in": "path",
            "name": "project_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/."
          }
        ],
        "tags": ["persons"],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Person"
                }
              },
              "text/csv": {
                "schema": {
                  "$ref": "#/components/schemas/Person"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/projects/{project_id}/persons/{id}/delete_property/": {
      "post": {
        "operationId": "persons_delete_property_create",
        "description": "To create or update persons, use a PostHog library of your choice and [use an identify call](/docs/integrate/identifying-users). This API endpoint is only for reading and deleting.",
        "parameters": [
          {
            "in": "query",
            "name": "$unset",
            "schema": {
              "type": "string"
            },
            "description": "Specify the property key to delete",
            "required": true
          },
          {
            "in": "query",
            "name": "format",
            "schema": {
              "type": "string",
              "enum": ["csv", "json"]
            }
          },
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "description": "A unique integer value identifying this person.",
            "required": true
          },
          {
            "in": "path",
            "name": "project_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/."
          }
        ],
        "tags": ["persons"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Person"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/Person"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/Person"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Person"
                }
              },
              "text/csv": {
                "schema": {
                  "$ref": "#/components/schemas/Person"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/projects/{project_id}/persons/{id}/properties_timeline/": {
      "get": {
        "operationId": "persons_properties_timeline_retrieve",
        "description": "To create or update persons, use a PostHog library of your choice and [use an identify call](/docs/integrate/identifying-users). This API endpoint is only for reading and deleting.",
        "parameters": [
          {
            "in": "query",
            "name": "format",
            "schema": {
              "type": "string",
              "enum": ["csv", "json"]
            }
          },
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "description": "A unique integer value identifying this person.",
            "required": true
          },
          {
            "in": "path",
            "name": "project_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/."
          }
        ],
        "tags": ["persons"],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Person"
                }
              },
              "text/csv": {
                "schema": {
                  "$ref": "#/components/schemas/Person"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/projects/{project_id}/persons/{id}/split/": {
      "post": {
        "operationId": "persons_split_create",
        "description": "To create or update persons, use a PostHog library of your choice and [use an identify call](/docs/integrate/identifying-users). This API endpoint is only for reading and deleting.",
        "parameters": [
          {
            "in": "query",
            "name": "format",
            "schema": {
              "type": "string",
              "enum": ["csv", "json"]
            }
          },
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "description": "A unique integer value identifying this person.",
            "required": true
          },
          {
            "in": "path",
            "name": "project_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/."
          }
        ],
        "tags": ["persons"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Person"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/Person"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/Person"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Person"
                }
              },
              "text/csv": {
                "schema": {
                  "$ref": "#/components/schemas/Person"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/projects/{project_id}/persons/{id}/update_property/": {
      "post": {
        "operationId": "persons_update_property_create",
        "description": "To create or update persons, use a PostHog library of your choice and [use an identify call](/docs/integrate/identifying-users). This API endpoint is only for reading and deleting.",
        "parameters": [
          {
            "in": "query",
            "name": "format",
            "schema": {
              "type": "string",
              "enum": ["csv", "json"]
            }
          },
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "description": "A unique integer value identifying this person.",
            "required": true
          },
          {
            "in": "query",
            "name": "key",
            "schema": {
              "type": "string"
            },
            "description": "Specify the property key",
            "required": true
          },
          {
            "in": "path",
            "name": "project_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/."
          },
          {
            "in": "query",
            "name": "value",
            "schema": {},
            "description": "Specify the property value",
            "required": true
          }
        ],
        "tags": ["persons"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Person"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/Person"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/Person"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Person"
                }
              },
              "text/csv": {
                "schema": {
                  "$ref": "#/components/schemas/Person"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/projects/{project_id}/persons/activity/": {
      "get": {
        "operationId": "persons_activity_retrieve",
        "description": "To create or update persons, use a PostHog library of your choice and [use an identify call](/docs/integrate/identifying-users). This API endpoint is only for reading and deleting.",
        "parameters": [
          {
            "in": "query",
            "name": "format",
            "schema": {
              "type": "string",
              "enum": ["csv", "json"]
            }
          },
          {
            "in": "path",
            "name": "project_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/."
          }
        ],
        "tags": ["persons"],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Person"
                }
              },
              "text/csv": {
                "schema": {
                  "$ref": "#/components/schemas/Person"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/projects/{project_id}/persons/cohorts/": {
      "get": {
        "operationId": "persons_cohorts_retrieve",
        "description": "To create or update persons, use a PostHog library of your choice and [use an identify call](/docs/integrate/identifying-users). This API endpoint is only for reading and deleting.",
        "parameters": [
          {
            "in": "query",
            "name": "format",
            "schema": {
              "type": "string",
              "enum": ["csv", "json"]
            }
          },
          {
            "in": "path",
            "name": "project_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/."
          }
        ],
        "tags": ["persons"],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Person"
                }
              },
              "text/csv": {
                "schema": {
                  "$ref": "#/components/schemas/Person"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/projects/{project_id}/persons/funnel/": {
      "get": {
        "operationId": "persons_funnel_retrieve",
        "description": "To create or update persons, use a PostHog library of your choice and [use an identify call](/docs/integrate/identifying-users). This API endpoint is only for reading and deleting.",
        "parameters": [
          {
            "in": "query",
            "name": "format",
            "schema": {
              "type": "string",
              "enum": ["csv", "json"]
            }
          },
          {
            "in": "path",
            "name": "project_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/."
          }
        ],
        "tags": ["persons"],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Person"
                }
              },
              "text/csv": {
                "schema": {
                  "$ref": "#/components/schemas/Person"
                }
              }
            },
            "description": ""
          }
        }
      },
      "post": {
        "operationId": "persons_funnel_create",
        "description": "To create or update persons, use a PostHog library of your choice and [use an identify call](/docs/integrate/identifying-users). This API endpoint is only for reading and deleting.",
        "parameters": [
          {
            "in": "query",
            "name": "format",
            "schema": {
              "type": "string",
              "enum": ["csv", "json"]
            }
          },
          {
            "in": "path",
            "name": "project_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/."
          }
        ],
        "tags": ["persons"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Person"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/Person"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/Person"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Person"
                }
              },
              "text/csv": {
                "schema": {
                  "$ref": "#/components/schemas/Person"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/projects/{project_id}/persons/funnel/correlation/": {
      "get": {
        "operationId": "persons_funnel_correlation_retrieve",
        "description": "To create or update persons, use a PostHog library of your choice and [use an identify call](/docs/integrate/identifying-users). This API endpoint is only for reading and deleting.",
        "parameters": [
          {
            "in": "query",
            "name": "format",
            "schema": {
              "type": "string",
              "enum": ["csv", "json"]
            }
          },
          {
            "in": "path",
            "name": "project_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/."
          }
        ],
        "tags": ["persons"],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Person"
                }
              },
              "text/csv": {
                "schema": {
                  "$ref": "#/components/schemas/Person"
                }
              }
            },
            "description": ""
          }
        }
      },
      "post": {
        "operationId": "persons_funnel_correlation_create",
        "description": "To create or update persons, use a PostHog library of your choice and [use an identify call](/docs/integrate/identifying-users). This API endpoint is only for reading and deleting.",
        "parameters": [
          {
            "in": "query",
            "name": "format",
            "schema": {
              "type": "string",
              "enum": ["csv", "json"]
            }
          },
          {
            "in": "path",
            "name": "project_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/."
          }
        ],
        "tags": ["persons"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Person"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/Person"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/Person"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Person"
                }
              },
              "text/csv": {
                "schema": {
                  "$ref": "#/components/schemas/Person"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/projects/{project_id}/persons/lifecycle/": {
      "get": {
        "operationId": "persons_lifecycle_retrieve",
        "description": "To create or update persons, use a PostHog library of your choice and [use an identify call](/docs/integrate/identifying-users). This API endpoint is only for reading and deleting.",
        "parameters": [
          {
            "in": "query",
            "name": "format",
            "schema": {
              "type": "string",
              "enum": ["csv", "json"]
            }
          },
          {
            "in": "path",
            "name": "project_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/."
          }
        ],
        "tags": ["persons"],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Person"
                }
              },
              "text/csv": {
                "schema": {
                  "$ref": "#/components/schemas/Person"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/projects/{project_id}/persons/path/": {
      "get": {
        "operationId": "persons_path_retrieve",
        "description": "To create or update persons, use a PostHog library of your choice and [use an identify call](/docs/integrate/identifying-users). This API endpoint is only for reading and deleting.",
        "parameters": [
          {
            "in": "query",
            "name": "format",
            "schema": {
              "type": "string",
              "enum": ["csv", "json"]
            }
          },
          {
            "in": "path",
            "name": "project_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/."
          }
        ],
        "tags": ["persons"],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Person"
                }
              },
              "text/csv": {
                "schema": {
                  "$ref": "#/components/schemas/Person"
                }
              }
            },
            "description": ""
          }
        }
      },
      "post": {
        "operationId": "persons_path_create",
        "description": "To create or update persons, use a PostHog library of your choice and [use an identify call](/docs/integrate/identifying-users). This API endpoint is only for reading and deleting.",
        "parameters": [
          {
            "in": "query",
            "name": "format",
            "schema": {
              "type": "string",
              "enum": ["csv", "json"]
            }
          },
          {
            "in": "path",
            "name": "project_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/."
          }
        ],
        "tags": ["persons"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Person"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/Person"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/Person"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Person"
                }
              },
              "text/csv": {
                "schema": {
                  "$ref": "#/components/schemas/Person"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/projects/{project_id}/persons/retention/": {
      "get": {
        "operationId": "persons_retention_retrieve",
        "description": "To create or update persons, use a PostHog library of your choice and [use an identify call](/docs/integrate/identifying-users). This API endpoint is only for reading and deleting.",
        "parameters": [
          {
            "in": "query",
            "name": "format",
            "schema": {
              "type": "string",
              "enum": ["csv", "json"]
            }
          },
          {
            "in": "path",
            "name": "project_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/."
          }
        ],
        "tags": ["persons"],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Person"
                }
              },
              "text/csv": {
                "schema": {
                  "$ref": "#/components/schemas/Person"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/projects/{project_id}/persons/stickiness/": {
      "get": {
        "operationId": "persons_stickiness_retrieve",
        "description": "To create or update persons, use a PostHog library of your choice and [use an identify call](/docs/integrate/identifying-users). This API endpoint is only for reading and deleting.",
        "parameters": [
          {
            "in": "query",
            "name": "format",
            "schema": {
              "type": "string",
              "enum": ["csv", "json"]
            }
          },
          {
            "in": "path",
            "name": "project_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/."
          }
        ],
        "tags": ["persons"],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Person"
                }
              },
              "text/csv": {
                "schema": {
                  "$ref": "#/components/schemas/Person"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/projects/{project_id}/persons/trends/": {
      "get": {
        "operationId": "persons_trends_retrieve",
        "description": "To create or update persons, use a PostHog library of your choice and [use an identify call](/docs/integrate/identifying-users). This API endpoint is only for reading and deleting.",
        "parameters": [
          {
            "in": "query",
            "name": "format",
            "schema": {
              "type": "string",
              "enum": ["csv", "json"]
            }
          },
          {
            "in": "path",
            "name": "project_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/."
          }
        ],
        "tags": ["persons"],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Person"
                }
              },
              "text/csv": {
                "schema": {
                  "$ref": "#/components/schemas/Person"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/projects/{project_id}/persons/values/": {
      "get": {
        "operationId": "persons_values_retrieve",
        "description": "To create or update persons, use a PostHog library of your choice and [use an identify call](/docs/integrate/identifying-users). This API endpoint is only for reading and deleting.",
        "parameters": [
          {
            "in": "query",
            "name": "format",
            "schema": {
              "type": "string",
              "enum": ["csv", "json"]
            }
          },
          {
            "in": "path",
            "name": "project_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/."
          }
        ],
        "tags": ["persons"],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Person"
                }
              },
              "text/csv": {
                "schema": {
                  "$ref": "#/components/schemas/Person"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/projects/{project_id}/plugin_configs/": {
      "get": {
        "operationId": "plugin_configs_list",
        "parameters": [
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Number of results to return per page.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "offset",
            "required": false,
            "in": "query",
            "description": "The initial index from which to return the results.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "project_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/."
          }
        ],
        "tags": ["plugin_configs"],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedPluginConfigList"
                }
              }
            },
            "description": ""
          }
        }
      },
      "post": {
        "operationId": "plugin_configs_create",
        "parameters": [
          {
            "in": "path",
            "name": "project_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/."
          }
        ],
        "tags": ["plugin_configs"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PluginConfig"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/PluginConfig"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/PluginConfig"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PluginConfig"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/projects/{project_id}/plugin_configs/{parent_lookup_plugin_config_id}/logs/": {
      "get": {
        "operationId": "plugin_configs_logs_list",
        "parameters": [
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Number of results to return per page.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "offset",
            "required": false,
            "in": "query",
            "description": "The initial index from which to return the results.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "parent_lookup_plugin_config_id",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "project_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/."
          }
        ],
        "tags": ["plugin_configs"],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedPluginLogEntryList"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/projects/{project_id}/plugin_configs/{id}/": {
      "get": {
        "operationId": "plugin_configs_retrieve",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "description": "A unique integer value identifying this plugin config.",
            "required": true
          },
          {
            "in": "path",
            "name": "project_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/."
          }
        ],
        "tags": ["plugin_configs"],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PluginConfig"
                }
              }
            },
            "description": ""
          }
        }
      },
      "put": {
        "operationId": "plugin_configs_update",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "description": "A unique integer value identifying this plugin config.",
            "required": true
          },
          {
            "in": "path",
            "name": "project_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/."
          }
        ],
        "tags": ["plugin_configs"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PluginConfig"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/PluginConfig"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/PluginConfig"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PluginConfig"
                }
              }
            },
            "description": ""
          }
        }
      },
      "patch": {
        "operationId": "plugin_configs_partial_update",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "description": "A unique integer value identifying this plugin config.",
            "required": true
          },
          {
            "in": "path",
            "name": "project_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/."
          }
        ],
        "tags": ["plugin_configs"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PatchedPluginConfig"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/PatchedPluginConfig"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/PatchedPluginConfig"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PluginConfig"
                }
              }
            },
            "description": ""
          }
        }
      },
      "delete": {
        "operationId": "plugin_configs_destroy",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "description": "A unique integer value identifying this plugin config.",
            "required": true
          },
          {
            "in": "path",
            "name": "project_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/."
          }
        ],
        "tags": ["plugin_configs"],
        "responses": {
          "204": {
            "description": "No response body"
          }
        }
      }
    },
    "/api/projects/{project_id}/plugin_configs/{id}/frontend/": {
      "get": {
        "operationId": "plugin_configs_frontend_retrieve",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "description": "A unique integer value identifying this plugin config.",
            "required": true
          },
          {
            "in": "path",
            "name": "project_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/."
          }
        ],
        "tags": ["plugin_configs"],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PluginConfig"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/projects/{project_id}/plugin_configs/{id}/job/": {
      "post": {
        "operationId": "plugin_configs_job_create",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "description": "A unique integer value identifying this plugin config.",
            "required": true
          },
          {
            "in": "path",
            "name": "project_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/."
          }
        ],
        "tags": ["plugin_configs"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PluginConfig"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/PluginConfig"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/PluginConfig"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PluginConfig"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/projects/{project_id}/plugin_configs/rearrange/": {
      "patch": {
        "operationId": "plugin_configs_rearrange_partial_update",
        "parameters": [
          {
            "in": "path",
            "name": "project_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/."
          }
        ],
        "tags": ["plugin_configs"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PatchedPluginConfig"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/PatchedPluginConfig"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/PatchedPluginConfig"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PluginConfig"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/projects/{project_id}/property_definitions/": {
      "get": {
        "operationId": "property_definitions_list",
        "parameters": [
          {
            "in": "query",
            "name": "event_names",
            "schema": {
              "type": "string",
              "minLength": 1
            },
            "description": "If sent, response value will have `is_seen_on_filtered_events` populated. JSON-encoded"
          },
          {
            "in": "query",
            "name": "excluded_properties",
            "schema": {
              "type": "string",
              "minLength": 1
            },
            "description": "JSON-encoded list of excluded properties"
          },
          {
            "in": "query",
            "name": "filter_by_event_names",
            "schema": {
              "type": "boolean",
              "nullable": true
            },
            "description": "Whether to return only properties for events in `event_names`"
          },
          {
            "in": "query",
            "name": "group_type_index",
            "schema": {
              "type": "integer"
            },
            "description": "What group type is the property for. Only should be set if `type=group`"
          },
          {
            "in": "query",
            "name": "is_feature_flag",
            "schema": {
              "type": "boolean",
              "nullable": true
            },
            "description": "Whether to return only (or excluding) feature flag properties"
          },
          {
            "in": "query",
            "name": "is_numerical",
            "schema": {
              "type": "boolean",
              "nullable": true
            },
            "description": "Whether to return only (or excluding) numerical property definitions"
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Number of results to return per page.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "offset",
            "required": false,
            "in": "query",
            "description": "The initial index from which to return the results.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "project_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/."
          },
          {
            "in": "query",
            "name": "properties",
            "schema": {
              "type": "string",
              "minLength": 1
            },
            "description": "Comma-separated list of properties to filter"
          },
          {
            "in": "query",
            "name": "search",
            "schema": {
              "type": "string"
            },
            "description": "Searches properties by name"
          },
          {
            "in": "query",
            "name": "type",
            "schema": {
              "enum": ["event", "person", "group"],
              "type": "string",
              "default": "event",
              "minLength": 1
            },
            "description": "What property definitions to return"
          }
        ],
        "tags": ["property_definitions"],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedEnterprisePropertyDefinitionList"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/projects/{project_id}/property_definitions/{id}/": {
      "get": {
        "operationId": "property_definitions_retrieve",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "project_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/."
          }
        ],
        "tags": ["property_definitions"],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EnterprisePropertyDefinition"
                }
              }
            },
            "description": ""
          }
        }
      },
      "put": {
        "operationId": "property_definitions_update",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "project_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/."
          }
        ],
        "tags": ["property_definitions"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EnterprisePropertyDefinition"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/EnterprisePropertyDefinition"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/EnterprisePropertyDefinition"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EnterprisePropertyDefinition"
                }
              }
            },
            "description": ""
          }
        }
      },
      "patch": {
        "operationId": "property_definitions_partial_update",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "project_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/."
          }
        ],
        "tags": ["property_definitions"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PatchedEnterprisePropertyDefinition"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/PatchedEnterprisePropertyDefinition"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/PatchedEnterprisePropertyDefinition"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EnterprisePropertyDefinition"
                }
              }
            },
            "description": ""
          }
        }
      },
      "delete": {
        "operationId": "property_definitions_destroy",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "project_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/."
          }
        ],
        "tags": ["property_definitions"],
        "responses": {
          "204": {
            "description": "No response body"
          }
        }
      }
    },
    "/api/projects/{project_id}/query/": {
      "get": {
        "operationId": "query_retrieve",
        "parameters": [
          {
            "in": "query",
            "name": "client_query_id",
            "schema": {
              "type": "string"
            },
            "description": "Client provided query ID. Can be used to cancel queries."
          },
          {
            "in": "path",
            "name": "project_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/."
          },
          {
            "in": "query",
            "name": "query",
            "schema": {
              "type": "string"
            },
            "description": "Query node JSON string"
          }
        ],
        "tags": ["query"],
        "responses": {
          "200": {
            "description": "No response body"
          }
        }
      }
    },
    "/api/projects/{project_id}/session_recording_playlists/": {
      "get": {
        "operationId": "session_recording_playlists_list",
        "parameters": [
          {
            "in": "query",
            "name": "created_by",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Number of results to return per page.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "offset",
            "required": false,
            "in": "query",
            "description": "The initial index from which to return the results.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "project_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/."
          },
          {
            "in": "query",
            "name": "short_id",
            "schema": {
              "type": "string"
            }
          }
        ],
        "tags": ["session_recording_playlists"],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedSessionRecordingPlaylistList"
                }
              }
            },
            "description": ""
          }
        }
      },
      "post": {
        "operationId": "session_recording_playlists_create",
        "parameters": [
          {
            "in": "path",
            "name": "project_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/."
          }
        ],
        "tags": ["session_recording_playlists"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SessionRecordingPlaylist"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/SessionRecordingPlaylist"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/SessionRecordingPlaylist"
              }
            }
          }
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SessionRecordingPlaylist"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/projects/{project_id}/session_recording_playlists/{short_id}/": {
      "get": {
        "operationId": "session_recording_playlists_retrieve",
        "parameters": [
          {
            "in": "path",
            "name": "project_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/."
          },
          {
            "in": "path",
            "name": "short_id",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "tags": ["session_recording_playlists"],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SessionRecordingPlaylist"
                }
              }
            },
            "description": ""
          }
        }
      },
      "put": {
        "operationId": "session_recording_playlists_update",
        "parameters": [
          {
            "in": "path",
            "name": "project_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/."
          },
          {
            "in": "path",
            "name": "short_id",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "tags": ["session_recording_playlists"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SessionRecordingPlaylist"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/SessionRecordingPlaylist"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/SessionRecordingPlaylist"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SessionRecordingPlaylist"
                }
              }
            },
            "description": ""
          }
        }
      },
      "patch": {
        "operationId": "session_recording_playlists_partial_update",
        "parameters": [
          {
            "in": "path",
            "name": "project_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/."
          },
          {
            "in": "path",
            "name": "short_id",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "tags": ["session_recording_playlists"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PatchedSessionRecordingPlaylist"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/PatchedSessionRecordingPlaylist"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/PatchedSessionRecordingPlaylist"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SessionRecordingPlaylist"
                }
              }
            },
            "description": ""
          }
        }
      },
      "delete": {
        "operationId": "session_recording_playlists_destroy",
        "description": "Hard delete of this model is not allowed. Use a patch API call to set \"deleted\" to true",
        "parameters": [
          {
            "in": "path",
            "name": "project_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/."
          },
          {
            "in": "path",
            "name": "short_id",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "tags": ["session_recording_playlists"],
        "responses": {
          "405": {
            "description": "No response body"
          }
        }
      }
    },
    "/api/projects/{project_id}/session_recording_playlists/{short_id}/recordings/": {
      "get": {
        "operationId": "session_recording_playlists_recordings_retrieve",
        "parameters": [
          {
            "in": "path",
            "name": "project_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/."
          },
          {
            "in": "path",
            "name": "short_id",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "tags": ["session_recording_playlists"],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SessionRecordingPlaylist"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/projects/{project_id}/session_recording_playlists/{short_id}/recordings/{session_recording_id}/": {
      "post": {
        "operationId": "session_recording_playlists_recordings_create",
        "parameters": [
          {
            "in": "path",
            "name": "project_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/."
          },
          {
            "in": "path",
            "name": "session_recording_id",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "short_id",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "tags": ["session_recording_playlists"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SessionRecordingPlaylist"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/SessionRecordingPlaylist"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/SessionRecordingPlaylist"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SessionRecordingPlaylist"
                }
              }
            },
            "description": ""
          }
        }
      },
      "delete": {
        "operationId": "session_recording_playlists_recordings_destroy",
        "parameters": [
          {
            "in": "path",
            "name": "project_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/."
          },
          {
            "in": "path",
            "name": "session_recording_id",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "short_id",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "tags": ["session_recording_playlists"],
        "responses": {
          "204": {
            "description": "No response body"
          }
        }
      }
    },
    "/api/projects/{project_id}/session_recordings/": {
      "get": {
        "operationId": "session_recordings_list",
        "parameters": [
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Number of results to return per page.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "offset",
            "required": false,
            "in": "query",
            "description": "The initial index from which to return the results.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "project_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/."
          }
        ],
        "tags": ["session_recordings"],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedSessionRecordingList"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/projects/{project_id}/session_recordings/{id}/": {
      "get": {
        "operationId": "session_recordings_retrieve",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "project_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/."
          }
        ],
        "tags": ["session_recordings"],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SessionRecording"
                }
              }
            },
            "description": ""
          }
        }
      },
      "delete": {
        "operationId": "session_recordings_destroy",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "project_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/."
          }
        ],
        "tags": ["session_recordings"],
        "responses": {
          "204": {
            "description": "No response body"
          }
        }
      }
    },
    "/api/projects/{project_id}/session_recordings/{id}/snapshots/": {
      "get": {
        "operationId": "session_recordings_snapshots_retrieve",
        "description": "Snapshots can be loaded from multiple places:\n1. From S3 if the session is older than our ingestion limit. This will be multiple files that can be streamed to the client\n2. From Redis if the session is newer than our ingestion limit.\n3. From Clickhouse whilst we are migrating to the new ingestion method",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "project_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/."
          }
        ],
        "tags": ["session_recordings"],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SessionRecording"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/projects/{project_id}/session_recordings/properties/": {
      "get": {
        "operationId": "session_recordings_properties_retrieve",
        "parameters": [
          {
            "in": "path",
            "name": "project_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/."
          }
        ],
        "tags": ["session_recordings"],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SessionRecording"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/projects/{project_id}/subscriptions/": {
      "get": {
        "operationId": "subscriptions_list",
        "parameters": [
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Number of results to return per page.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "offset",
            "required": false,
            "in": "query",
            "description": "The initial index from which to return the results.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "project_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/."
          }
        ],
        "tags": ["subscriptions"],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedSubscriptionList"
                }
              }
            },
            "description": ""
          }
        }
      },
      "post": {
        "operationId": "subscriptions_create",
        "parameters": [
          {
            "in": "path",
            "name": "project_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/."
          }
        ],
        "tags": ["subscriptions"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Subscription"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/Subscription"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/Subscription"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Subscription"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/projects/{project_id}/subscriptions/{id}/": {
      "get": {
        "operationId": "subscriptions_retrieve",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "description": "A unique integer value identifying this subscription.",
            "required": true
          },
          {
            "in": "path",
            "name": "project_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/."
          }
        ],
        "tags": ["subscriptions"],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Subscription"
                }
              }
            },
            "description": ""
          }
        }
      },
      "put": {
        "operationId": "subscriptions_update",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "description": "A unique integer value identifying this subscription.",
            "required": true
          },
          {
            "in": "path",
            "name": "project_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/."
          }
        ],
        "tags": ["subscriptions"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Subscription"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/Subscription"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/Subscription"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Subscription"
                }
              }
            },
            "description": ""
          }
        }
      },
      "patch": {
        "operationId": "subscriptions_partial_update",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "description": "A unique integer value identifying this subscription.",
            "required": true
          },
          {
            "in": "path",
            "name": "project_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/."
          }
        ],
        "tags": ["subscriptions"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PatchedSubscription"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/PatchedSubscription"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/PatchedSubscription"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Subscription"
                }
              }
            },
            "description": ""
          }
        }
      },
      "delete": {
        "operationId": "subscriptions_destroy",
        "description": "Hard delete of this model is not allowed. Use a patch API call to set \"deleted\" to true",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "description": "A unique integer value identifying this subscription.",
            "required": true
          },
          {
            "in": "path",
            "name": "project_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/."
          }
        ],
        "tags": ["subscriptions"],
        "responses": {
          "405": {
            "description": "No response body"
          }
        }
      }
    },
    "/api/projects/{project_id}/surveys/": {
      "get": {
        "operationId": "surveys_list",
        "parameters": [
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Number of results to return per page.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "offset",
            "required": false,
            "in": "query",
            "description": "The initial index from which to return the results.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "project_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/."
          }
        ],
        "tags": ["surveys"],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedSurveyList"
                }
              }
            },
            "description": ""
          }
        }
      },
      "post": {
        "operationId": "surveys_create",
        "parameters": [
          {
            "in": "path",
            "name": "project_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/."
          }
        ],
        "tags": ["surveys"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SurveySerializerCreateUpdateOnly"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/SurveySerializerCreateUpdateOnly"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/SurveySerializerCreateUpdateOnly"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SurveySerializerCreateUpdateOnly"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/projects/{project_id}/surveys/{id}/": {
      "get": {
        "operationId": "surveys_retrieve",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "A UUID string identifying this survey.",
            "required": true
          },
          {
            "in": "path",
            "name": "project_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/."
          }
        ],
        "tags": ["surveys"],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Survey"
                }
              }
            },
            "description": ""
          }
        }
      },
      "put": {
        "operationId": "surveys_update",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "A UUID string identifying this survey.",
            "required": true
          },
          {
            "in": "path",
            "name": "project_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/."
          }
        ],
        "tags": ["surveys"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Survey"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/Survey"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/Survey"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Survey"
                }
              }
            },
            "description": ""
          }
        }
      },
      "patch": {
        "operationId": "surveys_partial_update",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "A UUID string identifying this survey.",
            "required": true
          },
          {
            "in": "path",
            "name": "project_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/."
          }
        ],
        "tags": ["surveys"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PatchedSurveySerializerCreateUpdateOnly"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/PatchedSurveySerializerCreateUpdateOnly"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/PatchedSurveySerializerCreateUpdateOnly"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SurveySerializerCreateUpdateOnly"
                }
              }
            },
            "description": ""
          }
        }
      },
      "delete": {
        "operationId": "surveys_destroy",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "A UUID string identifying this survey.",
            "required": true
          },
          {
            "in": "path",
            "name": "project_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/."
          }
        ],
        "tags": ["surveys"],
        "responses": {
          "204": {
            "description": "No response body"
          }
        }
      }
    },
    "/api/projects/{project_id}/tags/": {
      "get": {
        "operationId": "tags_list",
        "parameters": [
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Number of results to return per page.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "offset",
            "required": false,
            "in": "query",
            "description": "The initial index from which to return the results.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "project_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/."
          }
        ],
        "tags": ["tags"],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedTaggedItemList"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/projects/{project_id}/uploaded_media/": {
      "post": {
        "operationId": "uploaded_media_create",
        "description": "\n    When object storage is available this API allows upload of media which can be used, for example, in text cards on dashboards.\n\n    Uploaded media must have a content type beginning with 'image/' and be less than 4MB.\n    ",
        "parameters": [
          {
            "in": "path",
            "name": "project_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/."
          }
        ],
        "tags": ["uploaded_media"],
        "responses": {
          "201": {
            "description": "No response body"
          }
        }
      }
    },
    "/api/projects/{project_id}/warehouse_table/": {
      "get": {
        "operationId": "warehouse_table_list",
        "description": "Create, Read, Update and Delete Warehouse Tables.",
        "parameters": [
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Number of results to return per page.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "offset",
            "required": false,
            "in": "query",
            "description": "The initial index from which to return the results.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "project_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/."
          },
          {
            "name": "search",
            "required": false,
            "in": "query",
            "description": "A search term.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "tags": ["warehouse_table"],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedTableList"
                }
              }
            },
            "description": ""
          }
        }
      },
      "post": {
        "operationId": "warehouse_table_create",
        "description": "Create, Read, Update and Delete Warehouse Tables.",
        "parameters": [
          {
            "in": "path",
            "name": "project_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/."
          }
        ],
        "tags": ["warehouse_table"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Table"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/Table"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/Table"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Table"
                }
              }
            },
            "description": ""
          }
        }
      }
    },
    "/api/projects/{project_id}/warehouse_table/{id}/": {
      "get": {
        "operationId": "warehouse_table_retrieve",
        "description": "Create, Read, Update and Delete Warehouse Tables.",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "A UUID string identifying this data warehouse table.",
            "required": true
          },
          {
            "in": "path",
            "name": "project_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/."
          }
        ],
        "tags": ["warehouse_table"],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Table"
                }
              }
            },
            "description": ""
          }
        }
      },
      "put": {
        "operationId": "warehouse_table_update",
        "description": "Create, Read, Update and Delete Warehouse Tables.",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "A UUID string identifying this data warehouse table.",
            "required": true
          },
          {
            "in": "path",
            "name": "project_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/."
          }
        ],
        "tags": ["warehouse_table"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Table"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/Table"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/Table"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Table"
                }
              }
            },
            "description": ""
          }
        }
      },
      "patch": {
        "operationId": "warehouse_table_partial_update",
        "description": "Create, Read, Update and Delete Warehouse Tables.",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "A UUID string identifying this data warehouse table.",
            "required": true
          },
          {
            "in": "path",
            "name": "project_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/."
          }
        ],
        "tags": ["warehouse_table"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PatchedTable"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/PatchedTable"
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/PatchedTable"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Table"
                }
              }
            },
            "description": ""
          }
        }
      },
      "delete": {
        "operationId": "warehouse_table_destroy",
        "description": "Create, Read, Update and Delete Warehouse Tables.",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "description": "A UUID string identifying this data warehouse table.",
            "required": true
          },
          {
            "in": "path",
            "name": "project_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Project ID of the project you're trying to access. To find the ID of the project, make a call to /api/projects/."
          }
        ],
        "tags": ["warehouse_table"],
        "responses": {
          "204": {
            "description": "No response body"
          }
        }
      }
    },
    "/api/prompts/my_prompts/": {
      "patch": {
        "operationId": "prompts_my_prompts_partial_update",
        "description": "Create, read, update and delete prompt sequences state for a person.",
        "tags": ["prompts", "prompts"],
        "responses": {
          "200": {
            "description": "No response body"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Action": {
        "type": "object",
        "description": "Serializer mixin that resolves appropriate response for tags depending on license.",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "name": {
            "type": "string",
            "nullable": true,
            "maxLength": 400
          },
          "description": {
            "type": "string"
          },
          "tags": {
            "type": "array",
            "items": {}
          },
          "post_to_slack": {
            "type": "boolean"
          },
          "slack_message_format": {
            "type": "string",
            "maxLength": 600
          },
          "steps": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ActionStep"
            }
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "created_by": {
            "allOf": [
              {
                "$ref": "#/components/schemas/UserBasic"
              }
            ],
            "readOnly": true
          },
          "deleted": {
            "type": "boolean"
          },
          "is_calculating": {
            "type": "boolean",
            "readOnly": true
          },
          "last_calculated_at": {
            "type": "string",
            "format": "date-time"
          },
          "team_id": {
            "type": "integer",
            "readOnly": true
          },
          "is_action": {
            "type": "boolean",
            "readOnly": true,
            "default": true
          }
        },
        "required": [
          "created_at",
          "created_by",
          "id",
          "is_action",
          "is_calculating",
          "team_id"
        ]
      },
      "ActionStep": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "event": {
            "type": "string",
            "nullable": true,
            "maxLength": 400
          },
          "tag_name": {
            "type": "string",
            "nullable": true,
            "maxLength": 400
          },
          "text": {
            "type": "string",
            "nullable": true,
            "maxLength": 400
          },
          "text_matching": {
            "enum": ["contains", "regex", "exact", "", null],
            "type": "string",
            "nullable": true
          },
          "href": {
            "type": "string",
            "nullable": true,
            "maxLength": 65535
          },
          "href_matching": {
            "enum": ["contains", "regex", "exact", "", null],
            "type": "string",
            "nullable": true
          },
          "selector": {
            "type": "string",
            "nullable": true,
            "maxLength": 65535
          },
          "url": {
            "type": "string",
            "nullable": true,
            "maxLength": 65535
          },
          "name": {
            "type": "string",
            "nullable": true,
            "maxLength": 400
          },
          "url_matching": {
            "enum": ["contains", "regex", "exact", "", null],
            "type": "string",
            "nullable": true
          },
          "properties": {
            "type": "object",
            "additionalProperties": {},
            "nullable": true
          }
        }
      },
      "ActivityLog": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "readOnly": true
          },
          "user": {
            "$ref": "#/components/schemas/UserBasic"
          },
          "unread": {
            "type": "boolean",
            "readOnly": true
          },
          "organization_id": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "is_system": {
            "type": "boolean",
            "nullable": true
          },
          "activity": {
            "type": "string",
            "maxLength": 79
          },
          "item_id": {
            "type": "string",
            "nullable": true,
            "maxLength": 72
          },
          "scope": {
            "type": "string",
            "maxLength": 79
          },
          "detail": {
            "type": "object",
            "additionalProperties": {},
            "nullable": true
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": ["activity", "id", "scope", "unread", "user"]
      },
      "Annotation": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "content": {
            "type": "string",
            "nullable": true,
            "maxLength": 400
          },
          "date_marker": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "creation_type": {
            "enum": ["USR", "GIT"],
            "type": "string"
          },
          "dashboard_item": {
            "type": "integer",
            "nullable": true
          },
          "insight_short_id": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "insight_name": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "created_by": {
            "allOf": [
              {
                "$ref": "#/components/schemas/UserBasic"
              }
            ],
            "readOnly": true
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "nullable": true
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "deleted": {
            "type": "boolean"
          },
          "scope": {
            "enum": ["dashboard_item", "project", "organization"],
            "type": "string"
          }
        },
        "required": [
          "created_at",
          "created_by",
          "id",
          "insight_name",
          "insight_short_id",
          "updated_at"
        ]
      },
      "BatchExport": {
        "type": "object",
        "description": "Serializer for a BatchExport model.",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "readOnly": true
          },
          "name": {
            "type": "string",
            "description": "A human-readable name for this BatchExport."
          },
          "destination": {
            "$ref": "#/components/schemas/BatchExportDestination"
          },
          "interval": {
            "enum": ["hour", "day", "week"],
            "type": "string",
            "description": "The interval at which to export data."
          },
          "paused": {
            "type": "boolean",
            "readOnly": true,
            "description": "Whether this BatchExport is paused or not."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "description": "The timestamp at which this BatchExport was created."
          },
          "last_updated_at": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "description": "The timestamp at which this BatchExport was last updated."
          }
        },
        "required": [
          "created_at",
          "destination",
          "id",
          "last_updated_at",
          "name",
          "paused"
        ]
      },
      "BatchExportDestination": {
        "type": "object",
        "description": "Serializer for an BatchExportDestination model.",
        "properties": {
          "type": {
            "enum": ["S3", "Snowflake"],
            "type": "string",
            "description": "A choice of supported BatchExportDestination types."
          },
          "config": {
            "type": "object",
            "additionalProperties": {},
            "description": "A JSON field to store all configuration parameters required to access a BatchExportDestination."
          }
        },
        "required": ["type"]
      },
      "BatchExportRun": {
        "type": "object",
        "description": "Serializer for a BatchExportRun model.",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "readOnly": true
          },
          "status": {
            "enum": [
              "Cancelled",
              "Completed",
              "ContinuedAsNew",
              "Failed",
              "Terminated",
              "TimedOut",
              "Running",
              "Starting"
            ],
            "type": "string",
            "description": "The status of this run."
          },
          "records_completed": {
            "type": "integer",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "nullable": true,
            "description": "The number of records that have been exported."
          },
          "latest_error": {
            "type": "string",
            "nullable": true,
            "description": "The latest error that occurred during this run."
          },
          "data_interval_start": {
            "type": "string",
            "format": "date-time",
            "description": "The start of the data interval."
          },
          "data_interval_end": {
            "type": "string",
            "format": "date-time",
            "description": "The end of the data interval."
          },
          "cursor": {
            "type": "string",
            "nullable": true,
            "description": "An opaque cursor that may be used to resume."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "description": "The timestamp at which this BatchExportRun was created."
          },
          "finished_at": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "description": "The timestamp at which this BatchExportRun finished, successfully or not."
          },
          "last_updated_at": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "description": "The timestamp at which this BatchExportRun was last updated."
          },
          "batch_export": {
            "type": "string",
            "format": "uuid",
            "readOnly": true,
            "description": "The BatchExport this run belongs to."
          }
        },
        "required": [
          "batch_export",
          "created_at",
          "data_interval_end",
          "data_interval_start",
          "id",
          "last_updated_at",
          "status"
        ]
      },
      "ClickhouseEvent": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true
          },
          "distinct_id": {
            "type": "string",
            "readOnly": true
          },
          "properties": {
            "type": "string",
            "readOnly": true
          },
          "event": {
            "type": "string",
            "readOnly": true
          },
          "timestamp": {
            "type": "string",
            "readOnly": true
          },
          "person": {
            "type": "string",
            "readOnly": true
          },
          "elements": {
            "type": "string",
            "readOnly": true
          },
          "elements_chain": {
            "type": "string",
            "readOnly": true
          }
        },
        "required": [
          "distinct_id",
          "elements",
          "elements_chain",
          "event",
          "id",
          "person",
          "properties",
          "timestamp"
        ]
      },
      "Cohort": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "name": {
            "type": "string",
            "nullable": true,
            "maxLength": 400
          },
          "description": {
            "type": "string",
            "maxLength": 1000
          },
          "groups": {
            "type": "object",
            "additionalProperties": {}
          },
          "deleted": {
            "type": "boolean"
          },
          "filters": {
            "type": "object",
            "additionalProperties": {},
            "nullable": true
          },
          "is_calculating": {
            "type": "boolean",
            "readOnly": true
          },
          "created_by": {
            "allOf": [
              {
                "$ref": "#/components/schemas/UserBasic"
              }
            ],
            "readOnly": true
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "nullable": true
          },
          "last_calculation": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "nullable": true
          },
          "errors_calculating": {
            "type": "integer",
            "readOnly": true
          },
          "count": {
            "type": "integer",
            "readOnly": true,
            "nullable": true
          },
          "is_static": {
            "type": "boolean"
          }
        },
        "required": [
          "count",
          "created_at",
          "created_by",
          "errors_calculating",
          "id",
          "is_calculating",
          "last_calculation"
        ]
      },
      "Credential": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "readOnly": true
          },
          "created_by": {
            "allOf": [
              {
                "$ref": "#/components/schemas/UserBasic"
              }
            ],
            "readOnly": true
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "access_key": {
            "type": "string",
            "maxLength": 500
          },
          "access_secret": {
            "type": "string",
            "writeOnly": true,
            "maxLength": 500
          }
        },
        "required": [
          "access_key",
          "access_secret",
          "created_at",
          "created_by",
          "id"
        ]
      },
      "Dashboard": {
        "type": "object",
        "description": "Serializer mixin that resolves appropriate response for tags depending on license.",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "name": {
            "type": "string",
            "nullable": true,
            "maxLength": 400
          },
          "description": {
            "type": "string"
          },
          "pinned": {
            "type": "boolean"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "created_by": {
            "allOf": [
              {
                "$ref": "#/components/schemas/UserBasic"
              }
            ],
            "readOnly": true
          },
          "is_shared": {
            "type": "boolean",
            "readOnly": true
          },
          "deleted": {
            "type": "boolean"
          },
          "creation_mode": {
            "enum": ["default", "template", "duplicate"],
            "type": "string",
            "readOnly": true
          },
          "use_template": {
            "type": "string",
            "writeOnly": true
          },
          "use_dashboard": {
            "type": "integer",
            "writeOnly": true,
            "nullable": true
          },
          "delete_insights": {
            "type": "boolean",
            "writeOnly": true,
            "default": false
          },
          "filters": {
            "type": "object",
            "additionalProperties": {}
          },
          "tags": {
            "type": "array",
            "items": {}
          },
          "tiles": {
            "type": "string",
            "readOnly": true
          },
          "restriction_level": {
            "enum": [21, 37],
            "type": "integer",
            "minimum": 0,
            "maximum": 32767
          },
          "effective_restriction_level": {
            "enum": [21, 37],
            "type": "integer",
            "readOnly": true
          },
          "effective_privilege_level": {
            "enum": [21, 37],
            "type": "integer",
            "readOnly": true
          }
        },
        "required": [
          "created_at",
          "created_by",
          "creation_mode",
          "effective_privilege_level",
          "effective_restriction_level",
          "id",
          "is_shared",
          "tiles"
        ]
      },
      "DashboardBasic": {
        "type": "object",
        "description": "Serializer mixin that resolves appropriate response for tags depending on license.",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "name": {
            "type": "string",
            "readOnly": true,
            "nullable": true
          },
          "description": {
            "type": "string",
            "readOnly": true
          },
          "pinned": {
            "type": "boolean",
            "readOnly": true
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "created_by": {
            "allOf": [
              {
                "$ref": "#/components/schemas/UserBasic"
              }
            ],
            "readOnly": true
          },
          "is_shared": {
            "type": "boolean",
            "readOnly": true
          },
          "deleted": {
            "type": "boolean",
            "readOnly": true
          },
          "creation_mode": {
            "enum": ["default", "template", "duplicate"],
            "type": "string",
            "readOnly": true
          },
          "tags": {
            "type": "array",
            "items": {}
          },
          "restriction_level": {
            "enum": [21, 37],
            "type": "integer",
            "readOnly": true
          },
          "effective_restriction_level": {
            "enum": [21, 37],
            "type": "integer",
            "readOnly": true
          },
          "effective_privilege_level": {
            "enum": [21, 37],
            "type": "integer",
            "readOnly": true
          }
        },
        "required": [
          "created_at",
          "created_by",
          "creation_mode",
          "deleted",
          "description",
          "effective_privilege_level",
          "effective_restriction_level",
          "id",
          "is_shared",
          "name",
          "pinned",
          "restriction_level"
        ]
      },
      "DashboardTemplate": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "readOnly": true
          },
          "template_name": {
            "type": "string",
            "nullable": true,
            "maxLength": 400
          },
          "dashboard_description": {
            "type": "string",
            "nullable": true,
            "maxLength": 400
          },
          "dashboard_filters": {
            "type": "object",
            "additionalProperties": {},
            "nullable": true
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string",
              "maxLength": 255
            },
            "nullable": true
          },
          "tiles": {
            "type": "object",
            "additionalProperties": {},
            "nullable": true
          },
          "variables": {
            "type": "object",
            "additionalProperties": {},
            "nullable": true
          },
          "deleted": {
            "type": "boolean",
            "nullable": true
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "nullable": true
          },
          "created_by": {
            "type": "integer",
            "nullable": true
          },
          "image_url": {
            "type": "string",
            "nullable": true,
            "maxLength": 8201
          },
          "team_id": {
            "type": "integer",
            "nullable": true,
            "readOnly": true
          },
          "scope": {
            "enum": ["team", "global", "feature_flag", "", null],
            "type": "string",
            "nullable": true
          }
        },
        "required": ["created_at", "id", "team_id"]
      },
      "DashboardTileBasic": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "dashboard_id": {
            "type": "integer",
            "readOnly": true
          },
          "deleted": {
            "type": "boolean",
            "nullable": true
          }
        },
        "required": ["dashboard_id", "id"]
      },
      "EarlyAccessFeature": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "readOnly": true
          },
          "feature_flag": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MinimalFeatureFlag"
              }
            ],
            "readOnly": true
          },
          "name": {
            "type": "string",
            "maxLength": 200
          },
          "description": {
            "type": "string"
          },
          "stage": {
            "enum": [
              "draft",
              "concept",
              "alpha",
              "beta",
              "general-availability",
              "archived"
            ],
            "type": "string"
          },
          "documentation_url": {
            "type": "string",
            "format": "uri",
            "maxLength": 800
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          }
        },
        "required": ["created_at", "feature_flag", "id", "name", "stage"]
      },
      "EarlyAccessFeatureSerializerCreateOnly": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "readOnly": true
          },
          "name": {
            "type": "string",
            "maxLength": 200
          },
          "description": {
            "type": "string"
          },
          "stage": {
            "enum": [
              "draft",
              "concept",
              "alpha",
              "beta",
              "general-availability",
              "archived"
            ],
            "type": "string"
          },
          "documentation_url": {
            "type": "string",
            "format": "uri",
            "maxLength": 800
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "feature_flag_id": {
            "type": "integer",
            "writeOnly": true
          },
          "feature_flag": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MinimalFeatureFlag"
              }
            ],
            "readOnly": true
          }
        },
        "required": ["created_at", "feature_flag", "id", "name", "stage"]
      },
      "EnterpriseEventDefinition": {
        "type": "object",
        "description": "Serializer mixin that resolves appropriate response for tags depending on license.",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "readOnly": true
          },
          "name": {
            "type": "string",
            "readOnly": true
          },
          "owner": {
            "type": "integer",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "tags": {
            "type": "array",
            "items": {}
          },
          "volume_30_day": {
            "type": "integer",
            "readOnly": true,
            "nullable": true
          },
          "query_usage_30_day": {
            "type": "integer",
            "readOnly": true,
            "nullable": true
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "nullable": true
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "updated_by": {
            "allOf": [
              {
                "$ref": "#/components/schemas/UserBasic"
              }
            ],
            "readOnly": true
          },
          "last_seen_at": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "nullable": true
          },
          "last_updated_at": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "verified": {
            "type": "boolean"
          },
          "verified_at": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "nullable": true
          },
          "verified_by": {
            "allOf": [
              {
                "$ref": "#/components/schemas/UserBasic"
              }
            ],
            "readOnly": true
          },
          "is_action": {
            "type": "string",
            "readOnly": true
          },
          "action_id": {
            "type": "integer",
            "readOnly": true
          },
          "is_calculating": {
            "type": "boolean",
            "readOnly": true
          },
          "last_calculated_at": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "created_by": {
            "allOf": [
              {
                "$ref": "#/components/schemas/UserBasic"
              }
            ],
            "readOnly": true
          },
          "post_to_slack": {
            "type": "boolean",
            "default": false
          }
        },
        "required": [
          "action_id",
          "created_at",
          "created_by",
          "id",
          "is_action",
          "is_calculating",
          "last_calculated_at",
          "last_seen_at",
          "last_updated_at",
          "name",
          "query_usage_30_day",
          "updated_at",
          "updated_by",
          "verified_at",
          "verified_by",
          "volume_30_day"
        ]
      },
      "EnterprisePropertyDefinition": {
        "type": "object",
        "description": "Serializer mixin that resolves appropriate response for tags depending on license.",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "readOnly": true
          },
          "name": {
            "type": "string",
            "readOnly": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "tags": {
            "type": "array",
            "items": {}
          },
          "is_numerical": {
            "type": "boolean",
            "readOnly": true
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "updated_by": {
            "allOf": [
              {
                "$ref": "#/components/schemas/UserBasic"
              }
            ],
            "readOnly": true
          },
          "query_usage_30_day": {
            "type": "integer",
            "readOnly": true,
            "nullable": true
          },
          "is_seen_on_filtered_events": {
            "type": "string",
            "readOnly": true
          },
          "property_type": {
            "enum": ["DateTime", "String", "Numeric", "Boolean", "", null],
            "type": "string",
            "nullable": true
          },
          "verified": {
            "type": "boolean"
          },
          "verified_at": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "nullable": true
          },
          "verified_by": {
            "allOf": [
              {
                "$ref": "#/components/schemas/UserBasic"
              }
            ],
            "readOnly": true
          }
        },
        "required": [
          "id",
          "is_numerical",
          "is_seen_on_filtered_events",
          "name",
          "query_usage_30_day",
          "updated_at",
          "updated_by",
          "verified_at",
          "verified_by"
        ]
      },
      "Experiment": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "name": {
            "type": "string",
            "maxLength": 400
          },
          "description": {
            "type": "string",
            "nullable": true,
            "maxLength": 400
          },
          "start_date": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "end_date": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "feature_flag_key": {
            "type": "string"
          },
          "feature_flag": {
            "type": "integer",
            "readOnly": true
          },
          "parameters": {
            "type": "object",
            "additionalProperties": {},
            "nullable": true
          },
          "secondary_metrics": {
            "type": "object",
            "additionalProperties": {},
            "nullable": true
          },
          "filters": {
            "type": "object",
            "additionalProperties": {}
          },
          "archived": {
            "type": "boolean"
          },
          "created_by": {
            "allOf": [
              {
                "$ref": "#/components/schemas/UserBasic"
              }
            ],
            "readOnly": true
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          }
        },
        "required": [
          "created_at",
          "created_by",
          "feature_flag",
          "feature_flag_key",
          "id",
          "name",
          "updated_at"
        ]
      },
      "ExportedAsset": {
        "type": "object",
        "description": "Standard ExportedAsset serializer that doesn't return content.",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "dashboard": {
            "type": "integer",
            "nullable": true
          },
          "insight": {
            "type": "integer",
            "nullable": true
          },
          "export_format": {
            "enum": ["image/png", "application/pdf", "text/csv"],
            "type": "string"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "has_content": {
            "type": "string",
            "readOnly": true
          },
          "export_context": {
            "type": "object",
            "additionalProperties": {},
            "nullable": true
          },
          "filename": {
            "type": "string",
            "readOnly": true
          }
        },
        "required": [
          "created_at",
          "export_format",
          "filename",
          "has_content",
          "id"
        ]
      },
      "FeatureFlag": {
        "type": "object",
        "description": "Serializer mixin that resolves appropriate response for tags depending on license.",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "name": {
            "type": "string",
            "description": "contains the description for the flag (field name `name` is kept for backwards-compatibility)"
          },
          "key": {
            "type": "string",
            "maxLength": 400
          },
          "filters": {
            "type": "object",
            "additionalProperties": {}
          },
          "deleted": {
            "type": "boolean"
          },
          "active": {
            "type": "boolean"
          },
          "created_by": {
            "allOf": [
              {
                "$ref": "#/components/schemas/UserBasic"
              }
            ],
            "readOnly": true
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "is_simple_flag": {
            "type": "boolean",
            "readOnly": true
          },
          "rollout_percentage": {
            "type": "integer",
            "nullable": true,
            "readOnly": true
          },
          "ensure_experience_continuity": {
            "type": "boolean",
            "nullable": true
          },
          "experiment_set": {
            "type": "array",
            "items": {
              "type": "integer"
            },
            "readOnly": true
          },
          "features": {
            "type": "object",
            "additionalProperties": {},
            "readOnly": true
          },
          "rollback_conditions": {
            "type": "object",
            "additionalProperties": {},
            "nullable": true
          },
          "performed_rollback": {
            "type": "boolean",
            "nullable": true
          },
          "can_edit": {
            "type": "boolean",
            "readOnly": true
          },
          "tags": {
            "type": "array",
            "items": {}
          },
          "usage_dashboard": {
            "type": "integer",
            "readOnly": true
          },
          "analytics_dashboards": {
            "type": "array",
            "items": {
              "type": "integer"
            }
          },
          "has_enriched_analytics": {
            "type": "boolean",
            "nullable": true
          }
        },
        "required": [
          "can_edit",
          "created_by",
          "experiment_set",
          "features",
          "id",
          "is_simple_flag",
          "key",
          "rollout_percentage",
          "usage_dashboard"
        ]
      },
      "FeatureFlagRoleAccess": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "feature_flag": {
            "allOf": [
              {
                "$ref": "#/components/schemas/FeatureFlag"
              }
            ],
            "readOnly": true
          },
          "role": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Role"
              }
            ],
            "readOnly": true
          },
          "role_id": {
            "type": "string",
            "format": "uuid",
            "writeOnly": true
          },
          "added_at": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          }
        },
        "required": [
          "added_at",
          "feature_flag",
          "id",
          "role",
          "role_id",
          "updated_at"
        ]
      },
      "FilterAction": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "ID of the action to filter on. For example `2841`."
          },
          "properties": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Property"
            }
          },
          "math": {
            "enum": [
              "total",
              "dau",
              "weekly_active",
              "monthly_active",
              "unique_group",
              "unique_session",
              "sum",
              "min",
              "max",
              "avg",
              "median",
              "p90",
              "p95",
              "p99",
              "min_count_per_actor",
              "max_count_per_actor",
              "avg_count_per_actor",
              "median_count_per_actor",
              "p90_count_per_actor",
              "p95_count_per_actor",
              "p99_count_per_actor",
              "hogql"
            ],
            "type": "string",
            "default": "total",
            "description": "How to aggregate results, shown as \"counted by\" in the interface.\n- `total` (default): no aggregation, count by events\n- `dau`: count by unique users. Despite the name, if you select the `interval` to be weekly or monthly, this will show weekly or monthly active users respectively\n- `weekly_active`: rolling average of users of the last 7 days.\n- `monthly_active`: rolling average of users of the last month.\n- `unique_group`: count by group. Requires `math_group_type_index` to be sent. You can get the index by hitting `/api/projects/@current/groups_types/`.\n\nAll of the below are property aggregations, and require `math_property` to be sent with an event property.\n- `sum`: sum of a numeric property.\n- `min`: min of a numeric property.\n- `max`: max of a numeric property.\n- `median`: median of a numeric property.\n- `p90`: 90th percentile of a numeric property.\n- `p95` 95th percentile of a numeric property.\n- `p99`: 99th percentile of a numeric property.\n"
          }
        },
        "required": ["id"]
      },
      "FilterEvent": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Name of the event to filter on. For example `$pageview` or `user sign up`."
          },
          "properties": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Property"
            }
          },
          "math": {
            "enum": [
              "total",
              "dau",
              "weekly_active",
              "monthly_active",
              "unique_group",
              "unique_session",
              "sum",
              "min",
              "max",
              "avg",
              "median",
              "p90",
              "p95",
              "p99",
              "min_count_per_actor",
              "max_count_per_actor",
              "avg_count_per_actor",
              "median_count_per_actor",
              "p90_count_per_actor",
              "p95_count_per_actor",
              "p99_count_per_actor",
              "hogql"
            ],
            "type": "string",
            "default": "total",
            "description": "How to aggregate results, shown as \"counted by\" in the interface.\n- `total` (default): no aggregation, count by events\n- `dau`: count by unique users. Despite the name, if you select the `interval` to be weekly or monthly, this will show weekly or monthly active users respectively\n- `weekly_active`: rolling average of users of the last 7 days.\n- `monthly_active`: rolling average of users of the last month.\n- `unique_group`: count by group. Requires `math_group_type_index` to be sent. You can get the index by hitting `/api/projects/@current/groups_types/`.\n\nAll of the below are property aggregations, and require `math_property` to be sent with an event property.\n- `sum`: sum of a numeric property.\n- `min`: min of a numeric property.\n- `max`: max of a numeric property.\n- `median`: median of a numeric property.\n- `p90`: 90th percentile of a numeric property.\n- `p95` 95th percentile of a numeric property.\n- `p99`: 99th percentile of a numeric property.\n"
          }
        },
        "required": ["id"]
      },
      "Funnel": {
        "type": "object",
        "properties": {
          "events": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FilterEvent"
            },
            "description": "Events to filter on. One of `events` or `actions` is required."
          },
          "actions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FilterAction"
            },
            "description": "Actions to filter on. One of `events` or `actions` is required."
          },
          "properties": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Property"
              }
            ],
            "description": "Filter events by event property, person property, cohort, groups and more."
          },
          "filter_test_accounts": {
            "type": "boolean",
            "default": false,
            "description": "Whether to filter out internal and test accounts. See \"project settings\" in your PostHog account for the filters."
          },
          "date_from": {
            "type": "string",
            "default": "-7d",
            "description": "What date to filter the results from. Can either be a date `2021-01-01`, or a relative date, like `-7d` for last seven days, `-1m` for last month, `mStart` for start of the month or `yStart` for the start of the year."
          },
          "date_to": {
            "type": "string",
            "default": "-7d",
            "description": "What date to filter the results to. Can either be a date `2021-01-01`, or a relative date, like `-7d` for last seven days, `-1m` for last month, `mStart` for start of the month or `yStart` for the start of the year."
          },
          "breakdown": {
            "type": "string",
            "description": "A property or cohort to break down on. You can select the type of the property with breakdown_type.\n- `event` (default): a property key\n- `person`: a person property key\n- `cohort`: an array of cohort IDs (ie `[9581,5812]`)"
          },
          "breakdown_type": {
            "enum": ["event", "person", "cohort", "group", "session", "hogql"],
            "type": "string",
            "default": "event",
            "description": "Type of property to break down on."
          },
          "funnel_window_interval": {
            "type": "integer",
            "default": 14,
            "description": "Funnel window size. Set in combination with funnel_window_interval, so defaults to 'days'."
          },
          "funnel_window_interval_type": {
            "enum": ["DAY", "SECOND", "MINUTE", "HOUR", "WEEK", "MONTH"],
            "type": "string",
            "default": "days",
            "description": "The type of interval. Used in combination with `funnel_window_intervals`."
          },
          "funnel_viz_type": {
            "enum": ["trends", "time_to_convert", "steps"],
            "type": "string",
            "default": "steps",
            "description": "The visualisation type.\n- `steps` Track instances progress between steps of the funnel\n- `trends` Track how this funnel's conversion rate is trending over time.\n- `time_to_convert` Track how long it takes for instances to convert"
          },
          "funnel_order_type": {
            "enum": ["strict", "unordered", "ordered"],
            "type": "string",
            "default": "ordered",
            "description": "- `ordered` - Step B must happen after Step A, but any number events can happen between A and B.\n- `strict` - Step B must happen directly after Step A without any events in between.\n- `unordered` - Steps can be completed in any sequence."
          },
          "exclusions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FunnelExclusion"
            },
            "description": "Exclude users/groups that completed the specified event between two specific steps. Note that these users/groups will be completely excluded from the entire funnel."
          },
          "aggregation_group_type_index": {
            "type": "integer",
            "default": 0,
            "description": "Aggregate by users or by groups. `0` means user, `>0` means a group. See interface for the corresponding ID of the group."
          },
          "breakdown_limit": {
            "type": "integer",
            "default": 10
          },
          "funnel_window_days": {
            "type": "integer",
            "default": 14,
            "description": "(DEPRECATED) Funnel window size in days. Use `funnel_window_interval` and `funnel_window_interval_type`"
          }
        }
      },
      "FunnelExclusion": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Name of the event to filter on. For example `$pageview` or `user sign up`."
          },
          "properties": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Property"
              }
            ],
            "description": "Filter events by event property, person property, cohort, groups and more."
          },
          "funnel_from_step": {
            "type": "integer",
            "default": 0
          },
          "funnel_to_step": {
            "type": "integer",
            "default": 1
          }
        },
        "required": ["id"]
      },
      "FunnelStepsResult": {
        "type": "object",
        "properties": {
          "count": {
            "type": "integer",
            "description": "Number of people in this step."
          },
          "action_id": {
            "type": "string",
            "description": "Corresponds to the `id` of the entities passed through to `events` or `actions`."
          },
          "average_conversion_time": {
            "type": "number",
            "format": "double",
            "description": "Average conversion time of person or groups between steps. `null` for the first step."
          },
          "median_conversion_time": {
            "type": "number",
            "format": "double",
            "description": "Median conversion time of person or groups between steps. `null` for the first step."
          },
          "converted_people_url": {
            "type": "string",
            "description": "Path of a URL to get a list of people that converted after this step. In this format: `/api/person/funnel?...`"
          },
          "dropped_people_url": {
            "type": "string",
            "description": "Path of a URL to get a list of people that dropped after this step. In this format: `/api/person/funnel?...`"
          },
          "order": {
            "type": "string",
            "description": "Order of this step in the funnel. The API should return the steps in order anyway."
          }
        },
        "required": [
          "action_id",
          "average_conversion_time",
          "converted_people_url",
          "count",
          "dropped_people_url",
          "median_conversion_time",
          "order"
        ]
      },
      "FunnelStepsResults": {
        "type": "object",
        "properties": {
          "is_cached": {
            "type": "boolean",
            "description": "Whether the result is cached. To force a refresh, pass ?refresh=true"
          },
          "last_refresh": {
            "type": "string",
            "format": "date-time",
            "description": "If the result is cached, when it was last refreshed."
          },
          "timezone": {
            "enum": [
              "Africa/Abidjan",
              "Africa/Accra",
              "Africa/Addis_Ababa",
              "Africa/Algiers",
              "Africa/Asmara",
              "Africa/Bamako",
              "Africa/Bangui",
              "Africa/Banjul",
              "Africa/Bissau",
              "Africa/Blantyre",
              "Africa/Brazzaville",
              "Africa/Bujumbura",
              "Africa/Cairo",
              "Africa/Casablanca",
              "Africa/Ceuta",
              "Africa/Conakry",
              "Africa/Dakar",
              "Africa/Dar_es_Salaam",
              "Africa/Djibouti",
              "Africa/Douala",
              "Africa/El_Aaiun",
              "Africa/Freetown",
              "Africa/Gaborone",
              "Africa/Harare",
              "Africa/Johannesburg",
              "Africa/Juba",
              "Africa/Kampala",
              "Africa/Khartoum",
              "Africa/Kigali",
              "Africa/Kinshasa",
              "Africa/Lagos",
              "Africa/Libreville",
              "Africa/Lome",
              "Africa/Luanda",
              "Africa/Lubumbashi",
              "Africa/Lusaka",
              "Africa/Malabo",
              "Africa/Maputo",
              "Africa/Maseru",
              "Africa/Mbabane",
              "Africa/Mogadishu",
              "Africa/Monrovia",
              "Africa/Nairobi",
              "Africa/Ndjamena",
              "Africa/Niamey",
              "Africa/Nouakchott",
              "Africa/Ouagadougou",
              "Africa/Porto-Novo",
              "Africa/Sao_Tome",
              "Africa/Tripoli",
              "Africa/Tunis",
              "Africa/Windhoek",
              "America/Adak",
              "America/Anchorage",
              "America/Anguilla",
              "America/Antigua",
              "America/Araguaina",
              "America/Argentina/Buenos_Aires",
              "America/Argentina/Catamarca",
              "America/Argentina/Cordoba",
              "America/Argentina/Jujuy",
              "America/Argentina/La_Rioja",
              "America/Argentina/Mendoza",
              "America/Argentina/Rio_Gallegos",
              "America/Argentina/Salta",
              "America/Argentina/San_Juan",
              "America/Argentina/San_Luis",
              "America/Argentina/Tucuman",
              "America/Argentina/Ushuaia",
              "America/Aruba",
              "America/Asuncion",
              "America/Atikokan",
              "America/Bahia",
              "America/Bahia_Banderas",
              "America/Barbados",
              "America/Belem",
              "America/Belize",
              "America/Blanc-Sablon",
              "America/Boa_Vista",
              "America/Bogota",
              "America/Boise",
              "America/Cambridge_Bay",
              "America/Campo_Grande",
              "America/Cancun",
              "America/Caracas",
              "America/Cayenne",
              "America/Cayman",
              "America/Chicago",
              "America/Chihuahua",
              "America/Costa_Rica",
              "America/Creston",
              "America/Cuiaba",
              "America/Curacao",
              "America/Danmarkshavn",
              "America/Dawson",
              "America/Dawson_Creek",
              "America/Denver",
              "America/Detroit",
              "America/Dominica",
              "America/Edmonton",
              "America/Eirunepe",
              "America/El_Salvador",
              "America/Fort_Nelson",
              "America/Fortaleza",
              "America/Glace_Bay",
              "America/Goose_Bay",
              "America/Grand_Turk",
              "America/Grenada",
              "America/Guadeloupe",
              "America/Guatemala",
              "America/Guayaquil",
              "America/Guyana",
              "America/Halifax",
              "America/Havana",
              "America/Hermosillo",
              "America/Indiana/Indianapolis",
              "America/Indiana/Knox",
              "America/Indiana/Marengo",
              "America/Indiana/Petersburg",
              "America/Indiana/Tell_City",
              "America/Indiana/Vevay",
              "America/Indiana/Vincennes",
              "America/Indiana/Winamac",
              "America/Inuvik",
              "America/Iqaluit",
              "America/Jamaica",
              "America/Juneau",
              "America/Kentucky/Louisville",
              "America/Kentucky/Monticello",
              "America/Kralendijk",
              "America/La_Paz",
              "America/Lima",
              "America/Los_Angeles",
              "America/Lower_Princes",
              "America/Maceio",
              "America/Managua",
              "America/Manaus",
              "America/Marigot",
              "America/Martinique",
              "America/Matamoros",
              "America/Mazatlan",
              "America/Menominee",
              "America/Merida",
              "America/Metlakatla",
              "America/Mexico_City",
              "America/Miquelon",
              "America/Moncton",
              "America/Monterrey",
              "America/Montevideo",
              "America/Montserrat",
              "America/Nassau",
              "America/New_York",
              "America/Nipigon",
              "America/Nome",
              "America/Noronha",
              "America/North_Dakota/Beulah",
              "America/North_Dakota/Center",
              "America/North_Dakota/New_Salem",
              "America/Nuuk",
              "America/Ojinaga",
              "America/Panama",
              "America/Pangnirtung",
              "America/Paramaribo",
              "America/Phoenix",
              "America/Port-au-Prince",
              "America/Port_of_Spain",
              "America/Porto_Velho",
              "America/Puerto_Rico",
              "America/Punta_Arenas",
              "America/Rainy_River",
              "America/Rankin_Inlet",
              "America/Recife",
              "America/Regina",
              "America/Resolute",
              "America/Rio_Branco",
              "America/Santarem",
              "America/Santiago",
              "America/Santo_Domingo",
              "America/Sao_Paulo",
              "America/Scoresbysund",
              "America/Sitka",
              "America/St_Barthelemy",
              "America/St_Johns",
              "America/St_Kitts",
              "America/St_Lucia",
              "America/St_Thomas",
              "America/St_Vincent",
              "America/Swift_Current",
              "America/Tegucigalpa",
              "America/Thule",
              "America/Thunder_Bay",
              "America/Tijuana",
              "America/Toronto",
              "America/Tortola",
              "America/Vancouver",
              "America/Whitehorse",
              "America/Winnipeg",
              "America/Yakutat",
              "America/Yellowknife",
              "Antarctica/Casey",
              "Antarctica/Davis",
              "Antarctica/DumontDUrville",
              "Antarctica/Macquarie",
              "Antarctica/Mawson",
              "Antarctica/McMurdo",
              "Antarctica/Palmer",
              "Antarctica/Rothera",
              "Antarctica/Syowa",
              "Antarctica/Troll",
              "Antarctica/Vostok",
              "Arctic/Longyearbyen",
              "Asia/Aden",
              "Asia/Almaty",
              "Asia/Amman",
              "Asia/Anadyr",
              "Asia/Aqtau",
              "Asia/Aqtobe",
              "Asia/Ashgabat",
              "Asia/Atyrau",
              "Asia/Baghdad",
              "Asia/Bahrain",
              "Asia/Baku",
              "Asia/Bangkok",
              "Asia/Barnaul",
              "Asia/Beirut",
              "Asia/Bishkek",
              "Asia/Brunei",
              "Asia/Chita",
              "Asia/Choibalsan",
              "Asia/Colombo",
              "Asia/Damascus",
              "Asia/Dhaka",
              "Asia/Dili",
              "Asia/Dubai",
              "Asia/Dushanbe",
              "Asia/Famagusta",
              "Asia/Gaza",
              "Asia/Hebron",
              "Asia/Ho_Chi_Minh",
              "Asia/Hong_Kong",
              "Asia/Hovd",
              "Asia/Irkutsk",
              "Asia/Jakarta",
              "Asia/Jayapura",
              "Asia/Jerusalem",
              "Asia/Kabul",
              "Asia/Kamchatka",
              "Asia/Karachi",
              "Asia/Kathmandu",
              "Asia/Khandyga",
              "Asia/Kolkata",
              "Asia/Krasnoyarsk",
              "Asia/Kuala_Lumpur",
              "Asia/Kuching",
              "Asia/Kuwait",
              "Asia/Macau",
              "Asia/Magadan",
              "Asia/Makassar",
              "Asia/Manila",
              "Asia/Muscat",
              "Asia/Nicosia",
              "Asia/Novokuznetsk",
              "Asia/Novosibirsk",
              "Asia/Omsk",
              "Asia/Oral",
              "Asia/Phnom_Penh",
              "Asia/Pontianak",
              "Asia/Pyongyang",
              "Asia/Qatar",
              "Asia/Qostanay",
              "Asia/Qyzylorda",
              "Asia/Riyadh",
              "Asia/Sakhalin",
              "Asia/Samarkand",
              "Asia/Seoul",
              "Asia/Shanghai",
              "Asia/Singapore",
              "Asia/Srednekolymsk",
              "Asia/Taipei",
              "Asia/Tashkent",
              "Asia/Tbilisi",
              "Asia/Tehran",
              "Asia/Thimphu",
              "Asia/Tokyo",
              "Asia/Tomsk",
              "Asia/Ulaanbaatar",
              "Asia/Urumqi",
              "Asia/Ust-Nera",
              "Asia/Vientiane",
              "Asia/Vladivostok",
              "Asia/Yakutsk",
              "Asia/Yangon",
              "Asia/Yekaterinburg",
              "Asia/Yerevan",
              "Atlantic/Azores",
              "Atlantic/Bermuda",
              "Atlantic/Canary",
              "Atlantic/Cape_Verde",
              "Atlantic/Faroe",
              "Atlantic/Madeira",
              "Atlantic/Reykjavik",
              "Atlantic/South_Georgia",
              "Atlantic/St_Helena",
              "Atlantic/Stanley",
              "Australia/Adelaide",
              "Australia/Brisbane",
              "Australia/Broken_Hill",
              "Australia/Darwin",
              "Australia/Eucla",
              "Australia/Hobart",
              "Australia/Lindeman",
              "Australia/Lord_Howe",
              "Australia/Melbourne",
              "Australia/Perth",
              "Australia/Sydney",
              "Canada/Atlantic",
              "Canada/Central",
              "Canada/Eastern",
              "Canada/Mountain",
              "Canada/Newfoundland",
              "Canada/Pacific",
              "Europe/Amsterdam",
              "Europe/Andorra",
              "Europe/Astrakhan",
              "Europe/Athens",
              "Europe/Belgrade",
              "Europe/Berlin",
              "Europe/Bratislava",
              "Europe/Brussels",
              "Europe/Bucharest",
              "Europe/Budapest",
              "Europe/Busingen",
              "Europe/Chisinau",
              "Europe/Copenhagen",
              "Europe/Dublin",
              "Europe/Gibraltar",
              "Europe/Guernsey",
              "Europe/Helsinki",
              "Europe/Isle_of_Man",
              "Europe/Istanbul",
              "Europe/Jersey",
              "Europe/Kaliningrad",
              "Europe/Kiev",
              "Europe/Kirov",
              "Europe/Lisbon",
              "Europe/Ljubljana",
              "Europe/London",
              "Europe/Luxembourg",
              "Europe/Madrid",
              "Europe/Malta",
              "Europe/Mariehamn",
              "Europe/Minsk",
              "Europe/Monaco",
              "Europe/Moscow",
              "Europe/Oslo",
              "Europe/Paris",
              "Europe/Podgorica",
              "Europe/Prague",
              "Europe/Riga",
              "Europe/Rome",
              "Europe/Samara",
              "Europe/San_Marino",
              "Europe/Sarajevo",
              "Europe/Saratov",
              "Europe/Simferopol",
              "Europe/Skopje",
              "Europe/Sofia",
              "Europe/Stockholm",
              "Europe/Tallinn",
              "Europe/Tirane",
              "Europe/Ulyanovsk",
              "Europe/Uzhgorod",
              "Europe/Vaduz",
              "Europe/Vatican",
              "Europe/Vienna",
              "Europe/Vilnius",
              "Europe/Volgograd",
              "Europe/Warsaw",
              "Europe/Zagreb",
              "Europe/Zaporozhye",
              "Europe/Zurich",
              "GMT",
              "Indian/Antananarivo",
              "Indian/Chagos",
              "Indian/Christmas",
              "Indian/Cocos",
              "Indian/Comoro",
              "Indian/Kerguelen",
              "Indian/Mahe",
              "Indian/Maldives",
              "Indian/Mauritius",
              "Indian/Mayotte",
              "Indian/Reunion",
              "Pacific/Apia",
              "Pacific/Auckland",
              "Pacific/Bougainville",
              "Pacific/Chatham",
              "Pacific/Chuuk",
              "Pacific/Easter",
              "Pacific/Efate",
              "Pacific/Enderbury",
              "Pacific/Fakaofo",
              "Pacific/Fiji",
              "Pacific/Funafuti",
              "Pacific/Galapagos",
              "Pacific/Gambier",
              "Pacific/Guadalcanal",
              "Pacific/Guam",
              "Pacific/Honolulu",
              "Pacific/Kiritimati",
              "Pacific/Kosrae",
              "Pacific/Kwajalein",
              "Pacific/Majuro",
              "Pacific/Marquesas",
              "Pacific/Midway",
              "Pacific/Nauru",
              "Pacific/Niue",
              "Pacific/Norfolk",
              "Pacific/Noumea",
              "Pacific/Pago_Pago",
              "Pacific/Palau",
              "Pacific/Pitcairn",
              "Pacific/Pohnpei",
              "Pacific/Port_Moresby",
              "Pacific/Rarotonga",
              "Pacific/Saipan",
              "Pacific/Tahiti",
              "Pacific/Tarawa",
              "Pacific/Tongatapu",
              "Pacific/Wake",
              "Pacific/Wallis",
              "US/Alaska",
              "US/Arizona",
              "US/Central",
              "US/Eastern",
              "US/Hawaii",
              "US/Mountain",
              "US/Pacific",
              "UTC"
            ],
            "type": "string",
            "default": "UTC",
            "description": "Timezone the chart is displayed in"
          },
          "result": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FunnelStepsResult"
            }
          }
        },
        "required": ["is_cached", "last_refresh", "result"]
      },
      "GenericInsights": {
        "type": "object",
        "properties": {
          "events": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FilterEvent"
            },
            "description": "Events to filter on. One of `events` or `actions` is required."
          },
          "actions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FilterAction"
            },
            "description": "Actions to filter on. One of `events` or `actions` is required."
          },
          "properties": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Property"
              }
            ],
            "description": "Filter events by event property, person property, cohort, groups and more."
          },
          "filter_test_accounts": {
            "type": "boolean",
            "default": false,
            "description": "Whether to filter out internal and test accounts. See \"project settings\" in your PostHog account for the filters."
          },
          "date_from": {
            "type": "string",
            "default": "-7d",
            "description": "What date to filter the results from. Can either be a date `2021-01-01`, or a relative date, like `-7d` for last seven days, `-1m` for last month, `mStart` for start of the month or `yStart` for the start of the year."
          },
          "date_to": {
            "type": "string",
            "default": "-7d",
            "description": "What date to filter the results to. Can either be a date `2021-01-01`, or a relative date, like `-7d` for last seven days, `-1m` for last month, `mStart` for start of the month or `yStart` for the start of the year."
          }
        }
      },
      "Group": {
        "type": "object",
        "properties": {
          "group_type_index": {
            "type": "integer",
            "maximum": 2147483647,
            "minimum": -2147483648
          },
          "group_key": {
            "type": "string",
            "maxLength": 400
          },
          "group_properties": {
            "type": "object",
            "additionalProperties": {}
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          }
        },
        "required": ["created_at", "group_key", "group_type_index"]
      },
      "GroupType": {
        "type": "object",
        "properties": {
          "group_type": {
            "type": "string",
            "readOnly": true
          },
          "group_type_index": {
            "type": "integer",
            "readOnly": true
          },
          "name_singular": {
            "type": "string",
            "nullable": true,
            "maxLength": 400
          },
          "name_plural": {
            "type": "string",
            "nullable": true,
            "maxLength": 400
          }
        },
        "required": ["group_type", "group_type_index"]
      },
      "Hook": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "maxLength": 50
          },
          "created": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "updated": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "event": {
            "type": "string",
            "maxLength": 64
          },
          "target": {
            "type": "string",
            "format": "uri",
            "title": "Target URL",
            "maxLength": 255
          },
          "resource_id": {
            "type": "integer",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "nullable": true
          },
          "team": {
            "type": "integer",
            "readOnly": true
          }
        },
        "required": ["created", "event", "target", "team", "updated"]
      },
      "Insight": {
        "type": "object",
        "description": "Simplified serializer to speed response times when loading large amounts of objects.",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "short_id": {
            "type": "string",
            "readOnly": true
          },
          "name": {
            "type": "string",
            "nullable": true,
            "maxLength": 400
          },
          "derived_name": {
            "type": "string",
            "nullable": true,
            "maxLength": 400
          },
          "filters": {
            "type": "object",
            "additionalProperties": {}
          },
          "query": {
            "type": "object",
            "additionalProperties": {},
            "nullable": true,
            "description": "Query node JSON string"
          },
          "order": {
            "type": "integer",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "nullable": true
          },
          "deleted": {
            "type": "boolean"
          },
          "dashboards": {
            "type": "array",
            "items": {
              "type": "integer"
            },
            "description": "\n        DEPRECATED. Will be removed in a future release. Use dashboard_tiles instead.\n        A dashboard ID for each of the dashboards that this insight is displayed on.\n        "
          },
          "dashboard_tiles": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DashboardTileBasic"
            },
            "readOnly": true,
            "description": "\n    A dashboard tile ID and dashboard_id for each of the dashboards that this insight is displayed on.\n    "
          },
          "last_refresh": {
            "type": "string",
            "readOnly": true,
            "description": "\n    The datetime this insight's results were generated.\n    If added to one or more dashboards the insight can be refreshed separately on each.\n    Returns the appropriate last_refresh datetime for the context the insight is viewed in\n    (see from_dashboard query parameter).\n    "
          },
          "next_allowed_client_refresh": {
            "type": "string",
            "readOnly": true,
            "description": "\n    The earliest possible datetime at which we'll allow the cached results for this insight to be refreshed\n    by querying the database.\n    "
          },
          "result": {
            "type": "string",
            "readOnly": true
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "nullable": true
          },
          "created_by": {
            "allOf": [
              {
                "$ref": "#/components/schemas/UserBasic"
              }
            ],
            "readOnly": true
          },
          "description": {
            "type": "string",
            "nullable": true,
            "maxLength": 400
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "tags": {
            "type": "array",
            "items": {}
          },
          "favorited": {
            "type": "boolean"
          },
          "saved": {
            "type": "boolean"
          },
          "last_modified_at": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "last_modified_by": {
            "allOf": [
              {
                "$ref": "#/components/schemas/UserBasic"
              }
            ],
            "readOnly": true
          },
          "is_sample": {
            "type": "boolean",
            "readOnly": true
          },
          "effective_restriction_level": {
            "enum": [21, 37],
            "type": "integer",
            "readOnly": true
          },
          "effective_privilege_level": {
            "enum": [21, 37],
            "type": "integer",
            "readOnly": true
          },
          "timezone": {
            "type": "string",
            "readOnly": true,
            "description": "The timezone this chart is displayed in."
          },
          "is_cached": {
            "type": "string",
            "readOnly": true
          }
        },
        "required": [
          "created_at",
          "created_by",
          "dashboard_tiles",
          "effective_privilege_level",
          "effective_restriction_level",
          "id",
          "is_cached",
          "is_sample",
          "last_modified_at",
          "last_modified_by",
          "last_refresh",
          "next_allowed_client_refresh",
          "result",
          "short_id",
          "timezone",
          "updated_at"
        ]
      },
      "Integration": {
        "type": "object",
        "description": "Standard Integration serializer.",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "kind": {
            "enum": ["slack"],
            "type": "string"
          },
          "config": {
            "type": "object",
            "additionalProperties": {}
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "created_by": {
            "allOf": [
              {
                "$ref": "#/components/schemas/UserBasic"
              }
            ],
            "readOnly": true
          },
          "errors": {
            "type": "string",
            "readOnly": true
          }
        },
        "required": ["created_at", "created_by", "errors", "id", "kind"]
      },
      "MinimalFeatureFlag": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "team_id": {
            "type": "integer",
            "readOnly": true
          },
          "name": {
            "type": "string"
          },
          "key": {
            "type": "string",
            "maxLength": 400
          },
          "filters": {
            "type": "object",
            "additionalProperties": {}
          },
          "deleted": {
            "type": "boolean"
          },
          "active": {
            "type": "boolean"
          },
          "ensure_experience_continuity": {
            "type": "boolean",
            "nullable": true
          }
        },
        "required": ["id", "key", "team_id"]
      },
      "OrganizationDomain": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "readOnly": true
          },
          "domain": {
            "type": "string",
            "maxLength": 128
          },
          "is_verified": {
            "type": "boolean",
            "readOnly": true
          },
          "verified_at": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "nullable": true
          },
          "verification_challenge": {
            "type": "string",
            "readOnly": true
          },
          "jit_provisioning_enabled": {
            "type": "boolean"
          },
          "sso_enforcement": {
            "type": "string",
            "maxLength": 28
          },
          "has_saml": {
            "type": "boolean",
            "readOnly": true
          },
          "saml_entity_id": {
            "type": "string",
            "nullable": true,
            "maxLength": 512
          },
          "saml_acs_url": {
            "type": "string",
            "nullable": true,
            "maxLength": 512
          },
          "saml_x509_cert": {
            "type": "string",
            "nullable": true
          }
        },
        "required": [
          "domain",
          "has_saml",
          "id",
          "is_verified",
          "verification_challenge",
          "verified_at"
        ]
      },
      "OrganizationInvite": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "readOnly": true
          },
          "target_email": {
            "type": "string",
            "format": "email",
            "maxLength": 254
          },
          "first_name": {
            "type": "string",
            "maxLength": 30
          },
          "emailing_attempt_made": {
            "type": "boolean",
            "readOnly": true
          },
          "is_expired": {
            "type": "boolean",
            "readOnly": true
          },
          "created_by": {
            "allOf": [
              {
                "$ref": "#/components/schemas/UserBasic"
              }
            ],
            "readOnly": true
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "message": {
            "type": "string",
            "nullable": true
          }
        },
        "required": [
          "created_at",
          "created_by",
          "emailing_attempt_made",
          "id",
          "is_expired",
          "target_email",
          "updated_at"
        ]
      },
      "OrganizationMember": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "readOnly": true
          },
          "user": {
            "allOf": [
              {
                "$ref": "#/components/schemas/UserBasic"
              }
            ],
            "readOnly": true
          },
          "level": {
            "enum": [1, 8, 15],
            "type": "integer",
            "minimum": 0,
            "maximum": 32767
          },
          "joined_at": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "is_2fa_enabled": {
            "type": "boolean",
            "readOnly": true
          },
          "has_social_auth": {
            "type": "boolean",
            "readOnly": true
          }
        },
        "required": [
          "has_social_auth",
          "id",
          "is_2fa_enabled",
          "joined_at",
          "updated_at",
          "user"
        ]
      },
      "OrganizationResourceAccess": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "resource": {
            "enum": [
              "feature flags",
              "experiments",
              "cohorts",
              "data management",
              "session recordings",
              "insights",
              "dashboards"
            ],
            "type": "string"
          },
          "access_level": {
            "enum": [21, 37],
            "type": "integer",
            "minimum": 0,
            "maximum": 32767
          },
          "organization": {
            "type": "string",
            "format": "uuid",
            "readOnly": true
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "created_by": {
            "type": "integer",
            "readOnly": true,
            "nullable": true
          }
        },
        "required": [
          "created_at",
          "created_by",
          "id",
          "organization",
          "resource",
          "updated_at"
        ]
      },
      "PaginatedActionList": {
        "type": "object",
        "properties": {
          "count": {
            "type": "integer",
            "example": 123
          },
          "next": {
            "type": "string",
            "nullable": true,
            "format": "uri",
            "example": "http://api.example.org/accounts/?offset=400&limit=100"
          },
          "previous": {
            "type": "string",
            "nullable": true,
            "format": "uri",
            "example": "http://api.example.org/accounts/?offset=200&limit=100"
          },
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Action"
            }
          }
        }
      },
      "PaginatedAnnotationList": {
        "type": "object",
        "properties": {
          "count": {
            "type": "integer",
            "example": 123
          },
          "next": {
            "type": "string",
            "nullable": true,
            "format": "uri",
            "example": "http://api.example.org/accounts/?offset=400&limit=100"
          },
          "previous": {
            "type": "string",
            "nullable": true,
            "format": "uri",
            "example": "http://api.example.org/accounts/?offset=200&limit=100"
          },
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Annotation"
            }
          }
        }
      },
      "PaginatedBatchExportList": {
        "type": "object",
        "properties": {
          "count": {
            "type": "integer",
            "example": 123
          },
          "next": {
            "type": "string",
            "nullable": true,
            "format": "uri",
            "example": "http://api.example.org/accounts/?offset=400&limit=100"
          },
          "previous": {
            "type": "string",
            "nullable": true,
            "format": "uri",
            "example": "http://api.example.org/accounts/?offset=200&limit=100"
          },
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BatchExport"
            }
          }
        }
      },
      "PaginatedBatchExportRunList": {
        "type": "object",
        "properties": {
          "count": {
            "type": "integer",
            "example": 123
          },
          "next": {
            "type": "string",
            "nullable": true,
            "format": "uri",
            "example": "http://api.example.org/accounts/?offset=400&limit=100"
          },
          "previous": {
            "type": "string",
            "nullable": true,
            "format": "uri",
            "example": "http://api.example.org/accounts/?offset=200&limit=100"
          },
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BatchExportRun"
            }
          }
        }
      },
      "PaginatedClickhouseEventList": {
        "type": "object",
        "properties": {
          "count": {
            "type": "integer",
            "example": 123
          },
          "next": {
            "type": "string",
            "nullable": true,
            "format": "uri",
            "example": "http://api.example.org/accounts/?offset=400&limit=100"
          },
          "previous": {
            "type": "string",
            "nullable": true,
            "format": "uri",
            "example": "http://api.example.org/accounts/?offset=200&limit=100"
          },
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ClickhouseEvent"
            }
          }
        }
      },
      "PaginatedCohortList": {
        "type": "object",
        "properties": {
          "count": {
            "type": "integer",
            "example": 123
          },
          "next": {
            "type": "string",
            "nullable": true,
            "format": "uri",
            "example": "http://api.example.org/accounts/?offset=400&limit=100"
          },
          "previous": {
            "type": "string",
            "nullable": true,
            "format": "uri",
            "example": "http://api.example.org/accounts/?offset=200&limit=100"
          },
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Cohort"
            }
          }
        }
      },
      "PaginatedDashboardBasicList": {
        "type": "object",
        "properties": {
          "count": {
            "type": "integer",
            "example": 123
          },
          "next": {
            "type": "string",
            "nullable": true,
            "format": "uri",
            "example": "http://api.example.org/accounts/?offset=400&limit=100"
          },
          "previous": {
            "type": "string",
            "nullable": true,
            "format": "uri",
            "example": "http://api.example.org/accounts/?offset=200&limit=100"
          },
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DashboardBasic"
            }
          }
        }
      },
      "PaginatedDashboardTemplateList": {
        "type": "object",
        "properties": {
          "count": {
            "type": "integer",
            "example": 123
          },
          "next": {
            "type": "string",
            "nullable": true,
            "format": "uri",
            "example": "http://api.example.org/accounts/?offset=400&limit=100"
          },
          "previous": {
            "type": "string",
            "nullable": true,
            "format": "uri",
            "example": "http://api.example.org/accounts/?offset=200&limit=100"
          },
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DashboardTemplate"
            }
          }
        }
      },
      "PaginatedEarlyAccessFeatureList": {
        "type": "object",
        "properties": {
          "count": {
            "type": "integer",
            "example": 123
          },
          "next": {
            "type": "string",
            "nullable": true,
            "format": "uri",
            "example": "http://api.example.org/accounts/?offset=400&limit=100"
          },
          "previous": {
            "type": "string",
            "nullable": true,
            "format": "uri",
            "example": "http://api.example.org/accounts/?offset=200&limit=100"
          },
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EarlyAccessFeature"
            }
          }
        }
      },
      "PaginatedEnterpriseEventDefinitionList": {
        "type": "object",
        "properties": {
          "count": {
            "type": "integer",
            "example": 123
          },
          "next": {
            "type": "string",
            "nullable": true,
            "format": "uri",
            "example": "http://api.example.org/accounts/?offset=400&limit=100"
          },
          "previous": {
            "type": "string",
            "nullable": true,
            "format": "uri",
            "example": "http://api.example.org/accounts/?offset=200&limit=100"
          },
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EnterpriseEventDefinition"
            }
          }
        }
      },
      "PaginatedEnterprisePropertyDefinitionList": {
        "type": "object",
        "properties": {
          "count": {
            "type": "integer",
            "example": 123
          },
          "next": {
            "type": "string",
            "nullable": true,
            "format": "uri",
            "example": "http://api.example.org/accounts/?offset=400&limit=100"
          },
          "previous": {
            "type": "string",
            "nullable": true,
            "format": "uri",
            "example": "http://api.example.org/accounts/?offset=200&limit=100"
          },
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EnterprisePropertyDefinition"
            }
          }
        }
      },
      "PaginatedExperimentList": {
        "type": "object",
        "properties": {
          "count": {
            "type": "integer",
            "example": 123
          },
          "next": {
            "type": "string",
            "nullable": true,
            "format": "uri",
            "example": "http://api.example.org/accounts/?offset=400&limit=100"
          },
          "previous": {
            "type": "string",
            "nullable": true,
            "format": "uri",
            "example": "http://api.example.org/accounts/?offset=200&limit=100"
          },
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Experiment"
            }
          }
        }
      },
      "PaginatedFeatureFlagList": {
        "type": "object",
        "properties": {
          "count": {
            "type": "integer",
            "example": 123
          },
          "next": {
            "type": "string",
            "nullable": true,
            "format": "uri",
            "example": "http://api.example.org/accounts/?offset=400&limit=100"
          },
          "previous": {
            "type": "string",
            "nullable": true,
            "format": "uri",
            "example": "http://api.example.org/accounts/?offset=200&limit=100"
          },
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FeatureFlag"
            }
          }
        }
      },
      "PaginatedFeatureFlagRoleAccessList": {
        "type": "object",
        "properties": {
          "count": {
            "type": "integer",
            "example": 123
          },
          "next": {
            "type": "string",
            "nullable": true,
            "format": "uri",
            "example": "http://api.example.org/accounts/?offset=400&limit=100"
          },
          "previous": {
            "type": "string",
            "nullable": true,
            "format": "uri",
            "example": "http://api.example.org/accounts/?offset=200&limit=100"
          },
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FeatureFlagRoleAccess"
            }
          }
        }
      },
      "PaginatedGroupList": {
        "type": "object",
        "properties": {
          "next": {
            "type": "string",
            "nullable": true
          },
          "previous": {
            "type": "string",
            "nullable": true
          },
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Group"
            }
          }
        }
      },
      "PaginatedHookList": {
        "type": "object",
        "properties": {
          "count": {
            "type": "integer",
            "example": 123
          },
          "next": {
            "type": "string",
            "nullable": true,
            "format": "uri",
            "example": "http://api.example.org/accounts/?offset=400&limit=100"
          },
          "previous": {
            "type": "string",
            "nullable": true,
            "format": "uri",
            "example": "http://api.example.org/accounts/?offset=200&limit=100"
          },
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Hook"
            }
          }
        }
      },
      "PaginatedInsightList": {
        "type": "object",
        "properties": {
          "count": {
            "type": "integer",
            "example": 123
          },
          "next": {
            "type": "string",
            "nullable": true,
            "format": "uri",
            "example": "http://api.example.org/accounts/?offset=400&limit=100"
          },
          "previous": {
            "type": "string",
            "nullable": true,
            "format": "uri",
            "example": "http://api.example.org/accounts/?offset=200&limit=100"
          },
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Insight"
            }
          }
        }
      },
      "PaginatedIntegrationList": {
        "type": "object",
        "properties": {
          "count": {
            "type": "integer",
            "example": 123
          },
          "next": {
            "type": "string",
            "nullable": true,
            "format": "uri",
            "example": "http://api.example.org/accounts/?offset=400&limit=100"
          },
          "previous": {
            "type": "string",
            "nullable": true,
            "format": "uri",
            "example": "http://api.example.org/accounts/?offset=200&limit=100"
          },
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Integration"
            }
          }
        }
      },
      "PaginatedOrganizationDomainList": {
        "type": "object",
        "properties": {
          "count": {
            "type": "integer",
            "example": 123
          },
          "next": {
            "type": "string",
            "nullable": true,
            "format": "uri",
            "example": "http://api.example.org/accounts/?offset=400&limit=100"
          },
          "previous": {
            "type": "string",
            "nullable": true,
            "format": "uri",
            "example": "http://api.example.org/accounts/?offset=200&limit=100"
          },
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OrganizationDomain"
            }
          }
        }
      },
      "PaginatedOrganizationInviteList": {
        "type": "object",
        "properties": {
          "count": {
            "type": "integer",
            "example": 123
          },
          "next": {
            "type": "string",
            "nullable": true,
            "format": "uri",
            "example": "http://api.example.org/accounts/?offset=400&limit=100"
          },
          "previous": {
            "type": "string",
            "nullable": true,
            "format": "uri",
            "example": "http://api.example.org/accounts/?offset=200&limit=100"
          },
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OrganizationInvite"
            }
          }
        }
      },
      "PaginatedOrganizationMemberList": {
        "type": "object",
        "properties": {
          "count": {
            "type": "integer",
            "example": 123
          },
          "next": {
            "type": "string",
            "nullable": true,
            "format": "uri",
            "example": "http://api.example.org/accounts/?offset=400&limit=100"
          },
          "previous": {
            "type": "string",
            "nullable": true,
            "format": "uri",
            "example": "http://api.example.org/accounts/?offset=200&limit=100"
          },
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OrganizationMember"
            }
          }
        }
      },
      "PaginatedOrganizationResourceAccessList": {
        "type": "object",
        "properties": {
          "count": {
            "type": "integer",
            "example": 123
          },
          "next": {
            "type": "string",
            "nullable": true,
            "format": "uri",
            "example": "http://api.example.org/accounts/?offset=400&limit=100"
          },
          "previous": {
            "type": "string",
            "nullable": true,
            "format": "uri",
            "example": "http://api.example.org/accounts/?offset=200&limit=100"
          },
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OrganizationResourceAccess"
            }
          }
        }
      },
      "PaginatedPerformanceEventList": {
        "type": "object",
        "properties": {
          "count": {
            "type": "integer",
            "example": 123
          },
          "next": {
            "type": "string",
            "nullable": true,
            "format": "uri",
            "example": "http://api.example.org/accounts/?offset=400&limit=100"
          },
          "previous": {
            "type": "string",
            "nullable": true,
            "format": "uri",
            "example": "http://api.example.org/accounts/?offset=200&limit=100"
          },
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PerformanceEvent"
            }
          }
        }
      },
      "PaginatedPersonList": {
        "type": "object",
        "properties": {
          "next": {
            "type": "string",
            "nullable": true,
            "format": "uri",
            "example": "https://app.posthog.com/api/projects/{project_id}/accounts/?offset=400&limit=100"
          },
          "previous": {
            "type": "string",
            "nullable": true,
            "format": "uri",
            "example": "https://app.posthog.com/api/projects/{project_id}/accounts/?offset=400&limit=100"
          },
          "count": {
            "type": "integer",
            "example": 400
          },
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Person"
            }
          }
        }
      },
      "PaginatedPluginConfigList": {
        "type": "object",
        "properties": {
          "count": {
            "type": "integer",
            "example": 123
          },
          "next": {
            "type": "string",
            "nullable": true,
            "format": "uri",
            "example": "http://api.example.org/accounts/?offset=400&limit=100"
          },
          "previous": {
            "type": "string",
            "nullable": true,
            "format": "uri",
            "example": "http://api.example.org/accounts/?offset=200&limit=100"
          },
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PluginConfig"
            }
          }
        }
      },
      "PaginatedPluginList": {
        "type": "object",
        "properties": {
          "count": {
            "type": "integer",
            "example": 123
          },
          "next": {
            "type": "string",
            "nullable": true,
            "format": "uri",
            "example": "http://api.example.org/accounts/?offset=400&limit=100"
          },
          "previous": {
            "type": "string",
            "nullable": true,
            "format": "uri",
            "example": "http://api.example.org/accounts/?offset=200&limit=100"
          },
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Plugin"
            }
          }
        }
      },
      "PaginatedPluginLogEntryList": {
        "type": "object",
        "properties": {
          "count": {
            "type": "integer",
            "example": 123
          },
          "next": {
            "type": "string",
            "nullable": true,
            "format": "uri",
            "example": "http://api.example.org/accounts/?offset=400&limit=100"
          },
          "previous": {
            "type": "string",
            "nullable": true,
            "format": "uri",
            "example": "http://api.example.org/accounts/?offset=200&limit=100"
          },
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PluginLogEntry"
            }
          }
        }
      },
      "PaginatedRoleList": {
        "type": "object",
        "properties": {
          "count": {
            "type": "integer",
            "example": 123
          },
          "next": {
            "type": "string",
            "nullable": true,
            "format": "uri",
            "example": "http://api.example.org/accounts/?offset=400&limit=100"
          },
          "previous": {
            "type": "string",
            "nullable": true,
            "format": "uri",
            "example": "http://api.example.org/accounts/?offset=200&limit=100"
          },
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Role"
            }
          }
        }
      },
      "PaginatedRoleMembershipList": {
        "type": "object",
        "properties": {
          "count": {
            "type": "integer",
            "example": 123
          },
          "next": {
            "type": "string",
            "nullable": true,
            "format": "uri",
            "example": "http://api.example.org/accounts/?offset=400&limit=100"
          },
          "previous": {
            "type": "string",
            "nullable": true,
            "format": "uri",
            "example": "http://api.example.org/accounts/?offset=200&limit=100"
          },
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RoleMembership"
            }
          }
        }
      },
      "PaginatedSessionRecordingList": {
        "type": "object",
        "properties": {
          "count": {
            "type": "integer",
            "example": 123
          },
          "next": {
            "type": "string",
            "nullable": true,
            "format": "uri",
            "example": "http://api.example.org/accounts/?offset=400&limit=100"
          },
          "previous": {
            "type": "string",
            "nullable": true,
            "format": "uri",
            "example": "http://api.example.org/accounts/?offset=200&limit=100"
          },
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SessionRecording"
            }
          }
        }
      },
      "PaginatedSessionRecordingPlaylistList": {
        "type": "object",
        "properties": {
          "count": {
            "type": "integer",
            "example": 123
          },
          "next": {
            "type": "string",
            "nullable": true,
            "format": "uri",
            "example": "http://api.example.org/accounts/?offset=400&limit=100"
          },
          "previous": {
            "type": "string",
            "nullable": true,
            "format": "uri",
            "example": "http://api.example.org/accounts/?offset=200&limit=100"
          },
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SessionRecordingPlaylist"
            }
          }
        }
      },
      "PaginatedSubscriptionList": {
        "type": "object",
        "properties": {
          "count": {
            "type": "integer",
            "example": 123
          },
          "next": {
            "type": "string",
            "nullable": true,
            "format": "uri",
            "example": "http://api.example.org/accounts/?offset=400&limit=100"
          },
          "previous": {
            "type": "string",
            "nullable": true,
            "format": "uri",
            "example": "http://api.example.org/accounts/?offset=200&limit=100"
          },
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Subscription"
            }
          }
        }
      },
      "PaginatedSurveyList": {
        "type": "object",
        "properties": {
          "count": {
            "type": "integer",
            "example": 123
          },
          "next": {
            "type": "string",
            "nullable": true,
            "format": "uri",
            "example": "http://api.example.org/accounts/?offset=400&limit=100"
          },
          "previous": {
            "type": "string",
            "nullable": true,
            "format": "uri",
            "example": "http://api.example.org/accounts/?offset=200&limit=100"
          },
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Survey"
            }
          }
        }
      },
      "PaginatedTableList": {
        "type": "object",
        "properties": {
          "count": {
            "type": "integer",
            "example": 123
          },
          "next": {
            "type": "string",
            "nullable": true,
            "format": "uri",
            "example": "http://api.example.org/accounts/?offset=400&limit=100"
          },
          "previous": {
            "type": "string",
            "nullable": true,
            "format": "uri",
            "example": "http://api.example.org/accounts/?offset=200&limit=100"
          },
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Table"
            }
          }
        }
      },
      "PaginatedTaggedItemList": {
        "type": "object",
        "properties": {
          "count": {
            "type": "integer",
            "example": 123
          },
          "next": {
            "type": "string",
            "nullable": true,
            "format": "uri",
            "example": "http://api.example.org/accounts/?offset=400&limit=100"
          },
          "previous": {
            "type": "string",
            "nullable": true,
            "format": "uri",
            "example": "http://api.example.org/accounts/?offset=200&limit=100"
          },
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TaggedItem"
            }
          }
        }
      },
      "PaginatedTeamBasicList": {
        "type": "object",
        "properties": {
          "count": {
            "type": "integer",
            "example": 123
          },
          "next": {
            "type": "string",
            "nullable": true,
            "format": "uri",
            "example": "http://api.example.org/accounts/?offset=400&limit=100"
          },
          "previous": {
            "type": "string",
            "nullable": true,
            "format": "uri",
            "example": "http://api.example.org/accounts/?offset=200&limit=100"
          },
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TeamBasic"
            }
          }
        }
      },
      "PatchedAction": {
        "type": "object",
        "description": "Serializer mixin that resolves appropriate response for tags depending on license.",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "name": {
            "type": "string",
            "nullable": true,
            "maxLength": 400
          },
          "description": {
            "type": "string"
          },
          "tags": {
            "type": "array",
            "items": {}
          },
          "post_to_slack": {
            "type": "boolean"
          },
          "slack_message_format": {
            "type": "string",
            "maxLength": 600
          },
          "steps": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ActionStep"
            }
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "created_by": {
            "allOf": [
              {
                "$ref": "#/components/schemas/UserBasic"
              }
            ],
            "readOnly": true
          },
          "deleted": {
            "type": "boolean"
          },
          "is_calculating": {
            "type": "boolean",
            "readOnly": true
          },
          "last_calculated_at": {
            "type": "string",
            "format": "date-time"
          },
          "team_id": {
            "type": "integer",
            "readOnly": true
          },
          "is_action": {
            "type": "boolean",
            "readOnly": true,
            "default": true
          }
        }
      },
      "PatchedAnnotation": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "content": {
            "type": "string",
            "nullable": true,
            "maxLength": 400
          },
          "date_marker": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "creation_type": {
            "enum": ["USR", "GIT"],
            "type": "string"
          },
          "dashboard_item": {
            "type": "integer",
            "nullable": true
          },
          "insight_short_id": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "insight_name": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "created_by": {
            "allOf": [
              {
                "$ref": "#/components/schemas/UserBasic"
              }
            ],
            "readOnly": true
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "nullable": true
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "deleted": {
            "type": "boolean"
          },
          "scope": {
            "enum": ["dashboard_item", "project", "organization"],
            "type": "string"
          }
        }
      },
      "PatchedBatchExport": {
        "type": "object",
        "description": "Serializer for a BatchExport model.",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "readOnly": true
          },
          "name": {
            "type": "string",
            "description": "A human-readable name for this BatchExport."
          },
          "destination": {
            "$ref": "#/components/schemas/BatchExportDestination"
          },
          "interval": {
            "enum": ["hour", "day", "week"],
            "type": "string",
            "description": "The interval at which to export data."
          },
          "paused": {
            "type": "boolean",
            "readOnly": true,
            "description": "Whether this BatchExport is paused or not."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "description": "The timestamp at which this BatchExport was created."
          },
          "last_updated_at": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "description": "The timestamp at which this BatchExport was last updated."
          }
        }
      },
      "PatchedBatchExportRun": {
        "type": "object",
        "description": "Serializer for a BatchExportRun model.",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "readOnly": true
          },
          "status": {
            "enum": [
              "Cancelled",
              "Completed",
              "ContinuedAsNew",
              "Failed",
              "Terminated",
              "TimedOut",
              "Running",
              "Starting"
            ],
            "type": "string",
            "description": "The status of this run."
          },
          "records_completed": {
            "type": "integer",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "nullable": true,
            "description": "The number of records that have been exported."
          },
          "latest_error": {
            "type": "string",
            "nullable": true,
            "description": "The latest error that occurred during this run."
          },
          "data_interval_start": {
            "type": "string",
            "format": "date-time",
            "description": "The start of the data interval."
          },
          "data_interval_end": {
            "type": "string",
            "format": "date-time",
            "description": "The end of the data interval."
          },
          "cursor": {
            "type": "string",
            "nullable": true,
            "description": "An opaque cursor that may be used to resume."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "description": "The timestamp at which this BatchExportRun was created."
          },
          "finished_at": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "description": "The timestamp at which this BatchExportRun finished, successfully or not."
          },
          "last_updated_at": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "description": "The timestamp at which this BatchExportRun was last updated."
          },
          "batch_export": {
            "type": "string",
            "format": "uuid",
            "readOnly": true,
            "description": "The BatchExport this run belongs to."
          }
        }
      },
      "PatchedCohort": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "name": {
            "type": "string",
            "nullable": true,
            "maxLength": 400
          },
          "description": {
            "type": "string",
            "maxLength": 1000
          },
          "groups": {
            "type": "object",
            "additionalProperties": {}
          },
          "deleted": {
            "type": "boolean"
          },
          "filters": {
            "type": "object",
            "additionalProperties": {},
            "nullable": true
          },
          "is_calculating": {
            "type": "boolean",
            "readOnly": true
          },
          "created_by": {
            "allOf": [
              {
                "$ref": "#/components/schemas/UserBasic"
              }
            ],
            "readOnly": true
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "nullable": true
          },
          "last_calculation": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "nullable": true
          },
          "errors_calculating": {
            "type": "integer",
            "readOnly": true
          },
          "count": {
            "type": "integer",
            "readOnly": true,
            "nullable": true
          },
          "is_static": {
            "type": "boolean"
          }
        }
      },
      "PatchedDashboard": {
        "type": "object",
        "description": "Serializer mixin that resolves appropriate response for tags depending on license.",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "name": {
            "type": "string",
            "nullable": true,
            "maxLength": 400
          },
          "description": {
            "type": "string"
          },
          "pinned": {
            "type": "boolean"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "created_by": {
            "allOf": [
              {
                "$ref": "#/components/schemas/UserBasic"
              }
            ],
            "readOnly": true
          },
          "is_shared": {
            "type": "boolean",
            "readOnly": true
          },
          "deleted": {
            "type": "boolean"
          },
          "creation_mode": {
            "enum": ["default", "template", "duplicate"],
            "type": "string",
            "readOnly": true
          },
          "use_template": {
            "type": "string",
            "writeOnly": true
          },
          "use_dashboard": {
            "type": "integer",
            "writeOnly": true,
            "nullable": true
          },
          "delete_insights": {
            "type": "boolean",
            "writeOnly": true,
            "default": false
          },
          "filters": {
            "type": "object",
            "additionalProperties": {}
          },
          "tags": {
            "type": "array",
            "items": {}
          },
          "tiles": {
            "type": "string",
            "readOnly": true
          },
          "restriction_level": {
            "enum": [21, 37],
            "type": "integer",
            "minimum": 0,
            "maximum": 32767
          },
          "effective_restriction_level": {
            "enum": [21, 37],
            "type": "integer",
            "readOnly": true
          },
          "effective_privilege_level": {
            "enum": [21, 37],
            "type": "integer",
            "readOnly": true
          }
        }
      },
      "PatchedDashboardTemplate": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "readOnly": true
          },
          "template_name": {
            "type": "string",
            "nullable": true,
            "maxLength": 400
          },
          "dashboard_description": {
            "type": "string",
            "nullable": true,
            "maxLength": 400
          },
          "dashboard_filters": {
            "type": "object",
            "additionalProperties": {},
            "nullable": true
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string",
              "maxLength": 255
            },
            "nullable": true
          },
          "tiles": {
            "type": "object",
            "additionalProperties": {},
            "nullable": true
          },
          "variables": {
            "type": "object",
            "additionalProperties": {},
            "nullable": true
          },
          "deleted": {
            "type": "boolean",
            "nullable": true
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "nullable": true
          },
          "created_by": {
            "type": "integer",
            "nullable": true
          },
          "image_url": {
            "type": "string",
            "nullable": true,
            "maxLength": 8201
          },
          "team_id": {
            "type": "integer",
            "nullable": true,
            "readOnly": true
          },
          "scope": {
            "enum": ["team", "global", "feature_flag", "", null],
            "type": "string",
            "nullable": true
          }
        }
      },
      "PatchedEarlyAccessFeature": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "readOnly": true
          },
          "feature_flag": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MinimalFeatureFlag"
              }
            ],
            "readOnly": true
          },
          "name": {
            "type": "string",
            "maxLength": 200
          },
          "description": {
            "type": "string"
          },
          "stage": {
            "enum": [
              "draft",
              "concept",
              "alpha",
              "beta",
              "general-availability",
              "archived"
            ],
            "type": "string"
          },
          "documentation_url": {
            "type": "string",
            "format": "uri",
            "maxLength": 800
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          }
        }
      },
      "PatchedEnterpriseEventDefinition": {
        "type": "object",
        "description": "Serializer mixin that resolves appropriate response for tags depending on license.",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "readOnly": true
          },
          "name": {
            "type": "string",
            "readOnly": true
          },
          "owner": {
            "type": "integer",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "tags": {
            "type": "array",
            "items": {}
          },
          "volume_30_day": {
            "type": "integer",
            "readOnly": true,
            "nullable": true
          },
          "query_usage_30_day": {
            "type": "integer",
            "readOnly": true,
            "nullable": true
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "nullable": true
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "updated_by": {
            "allOf": [
              {
                "$ref": "#/components/schemas/UserBasic"
              }
            ],
            "readOnly": true
          },
          "last_seen_at": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "nullable": true
          },
          "last_updated_at": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "verified": {
            "type": "boolean"
          },
          "verified_at": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "nullable": true
          },
          "verified_by": {
            "allOf": [
              {
                "$ref": "#/components/schemas/UserBasic"
              }
            ],
            "readOnly": true
          },
          "is_action": {
            "type": "string",
            "readOnly": true
          },
          "action_id": {
            "type": "integer",
            "readOnly": true
          },
          "is_calculating": {
            "type": "boolean",
            "readOnly": true
          },
          "last_calculated_at": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "created_by": {
            "allOf": [
              {
                "$ref": "#/components/schemas/UserBasic"
              }
            ],
            "readOnly": true
          },
          "post_to_slack": {
            "type": "boolean",
            "default": false
          }
        }
      },
      "PatchedEnterprisePropertyDefinition": {
        "type": "object",
        "description": "Serializer mixin that resolves appropriate response for tags depending on license.",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "readOnly": true
          },
          "name": {
            "type": "string",
            "readOnly": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "tags": {
            "type": "array",
            "items": {}
          },
          "is_numerical": {
            "type": "boolean",
            "readOnly": true
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "updated_by": {
            "allOf": [
              {
                "$ref": "#/components/schemas/UserBasic"
              }
            ],
            "readOnly": true
          },
          "query_usage_30_day": {
            "type": "integer",
            "readOnly": true,
            "nullable": true
          },
          "is_seen_on_filtered_events": {
            "type": "string",
            "readOnly": true
          },
          "property_type": {
            "enum": ["DateTime", "String", "Numeric", "Boolean", "", null],
            "type": "string",
            "nullable": true
          },
          "verified": {
            "type": "boolean"
          },
          "verified_at": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "nullable": true
          },
          "verified_by": {
            "allOf": [
              {
                "$ref": "#/components/schemas/UserBasic"
              }
            ],
            "readOnly": true
          }
        }
      },
      "PatchedExperiment": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "name": {
            "type": "string",
            "maxLength": 400
          },
          "description": {
            "type": "string",
            "nullable": true,
            "maxLength": 400
          },
          "start_date": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "end_date": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "feature_flag_key": {
            "type": "string"
          },
          "feature_flag": {
            "type": "integer",
            "readOnly": true
          },
          "parameters": {
            "type": "object",
            "additionalProperties": {},
            "nullable": true
          },
          "secondary_metrics": {
            "type": "object",
            "additionalProperties": {},
            "nullable": true
          },
          "filters": {
            "type": "object",
            "additionalProperties": {}
          },
          "archived": {
            "type": "boolean"
          },
          "created_by": {
            "allOf": [
              {
                "$ref": "#/components/schemas/UserBasic"
              }
            ],
            "readOnly": true
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          }
        }
      },
      "PatchedFeatureFlag": {
        "type": "object",
        "description": "Serializer mixin that resolves appropriate response for tags depending on license.",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "name": {
            "type": "string",
            "description": "contains the description for the flag (field name `name` is kept for backwards-compatibility)"
          },
          "key": {
            "type": "string",
            "maxLength": 400
          },
          "filters": {
            "type": "object",
            "additionalProperties": {}
          },
          "deleted": {
            "type": "boolean"
          },
          "active": {
            "type": "boolean"
          },
          "created_by": {
            "allOf": [
              {
                "$ref": "#/components/schemas/UserBasic"
              }
            ],
            "readOnly": true
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "is_simple_flag": {
            "type": "boolean",
            "readOnly": true
          },
          "rollout_percentage": {
            "type": "integer",
            "nullable": true,
            "readOnly": true
          },
          "ensure_experience_continuity": {
            "type": "boolean",
            "nullable": true
          },
          "experiment_set": {
            "type": "array",
            "items": {
              "type": "integer"
            },
            "readOnly": true
          },
          "features": {
            "type": "object",
            "additionalProperties": {},
            "readOnly": true
          },
          "rollback_conditions": {
            "type": "object",
            "additionalProperties": {},
            "nullable": true
          },
          "performed_rollback": {
            "type": "boolean",
            "nullable": true
          },
          "can_edit": {
            "type": "boolean",
            "readOnly": true
          },
          "tags": {
            "type": "array",
            "items": {}
          },
          "usage_dashboard": {
            "type": "integer",
            "readOnly": true
          },
          "analytics_dashboards": {
            "type": "array",
            "items": {
              "type": "integer"
            }
          },
          "has_enriched_analytics": {
            "type": "boolean",
            "nullable": true
          }
        }
      },
      "PatchedGroupType": {
        "type": "object",
        "properties": {
          "group_type": {
            "type": "string",
            "readOnly": true
          },
          "group_type_index": {
            "type": "integer",
            "readOnly": true
          },
          "name_singular": {
            "type": "string",
            "nullable": true,
            "maxLength": 400
          },
          "name_plural": {
            "type": "string",
            "nullable": true,
            "maxLength": 400
          }
        }
      },
      "PatchedHook": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "maxLength": 50
          },
          "created": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "updated": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "event": {
            "type": "string",
            "maxLength": 64
          },
          "target": {
            "type": "string",
            "format": "uri",
            "title": "Target URL",
            "maxLength": 255
          },
          "resource_id": {
            "type": "integer",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "nullable": true
          },
          "team": {
            "type": "integer",
            "readOnly": true
          }
        }
      },
      "PatchedInsight": {
        "type": "object",
        "description": "Simplified serializer to speed response times when loading large amounts of objects.",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "short_id": {
            "type": "string",
            "readOnly": true
          },
          "name": {
            "type": "string",
            "nullable": true,
            "maxLength": 400
          },
          "derived_name": {
            "type": "string",
            "nullable": true,
            "maxLength": 400
          },
          "filters": {
            "type": "object",
            "additionalProperties": {}
          },
          "query": {
            "type": "object",
            "additionalProperties": {},
            "nullable": true,
            "description": "Query node JSON string"
          },
          "order": {
            "type": "integer",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "nullable": true
          },
          "deleted": {
            "type": "boolean"
          },
          "dashboards": {
            "type": "array",
            "items": {
              "type": "integer"
            },
            "description": "\n        DEPRECATED. Will be removed in a future release. Use dashboard_tiles instead.\n        A dashboard ID for each of the dashboards that this insight is displayed on.\n        "
          },
          "dashboard_tiles": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DashboardTileBasic"
            },
            "readOnly": true,
            "description": "\n    A dashboard tile ID and dashboard_id for each of the dashboards that this insight is displayed on.\n    "
          },
          "last_refresh": {
            "type": "string",
            "readOnly": true,
            "description": "\n    The datetime this insight's results were generated.\n    If added to one or more dashboards the insight can be refreshed separately on each.\n    Returns the appropriate last_refresh datetime for the context the insight is viewed in\n    (see from_dashboard query parameter).\n    "
          },
          "next_allowed_client_refresh": {
            "type": "string",
            "readOnly": true,
            "description": "\n    The earliest possible datetime at which we'll allow the cached results for this insight to be refreshed\n    by querying the database.\n    "
          },
          "result": {
            "type": "string",
            "readOnly": true
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "nullable": true
          },
          "created_by": {
            "allOf": [
              {
                "$ref": "#/components/schemas/UserBasic"
              }
            ],
            "readOnly": true
          },
          "description": {
            "type": "string",
            "nullable": true,
            "maxLength": 400
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "tags": {
            "type": "array",
            "items": {}
          },
          "favorited": {
            "type": "boolean"
          },
          "saved": {
            "type": "boolean"
          },
          "last_modified_at": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "last_modified_by": {
            "allOf": [
              {
                "$ref": "#/components/schemas/UserBasic"
              }
            ],
            "readOnly": true
          },
          "is_sample": {
            "type": "boolean",
            "readOnly": true
          },
          "effective_restriction_level": {
            "enum": [21, 37],
            "type": "integer",
            "readOnly": true
          },
          "effective_privilege_level": {
            "enum": [21, 37],
            "type": "integer",
            "readOnly": true
          },
          "timezone": {
            "type": "string",
            "readOnly": true,
            "description": "The timezone this chart is displayed in."
          },
          "is_cached": {
            "type": "string",
            "readOnly": true
          }
        }
      },
      "PatchedOrganizationDomain": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "readOnly": true
          },
          "domain": {
            "type": "string",
            "maxLength": 128
          },
          "is_verified": {
            "type": "boolean",
            "readOnly": true
          },
          "verified_at": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "nullable": true
          },
          "verification_challenge": {
            "type": "string",
            "readOnly": true
          },
          "jit_provisioning_enabled": {
            "type": "boolean"
          },
          "sso_enforcement": {
            "type": "string",
            "maxLength": 28
          },
          "has_saml": {
            "type": "boolean",
            "readOnly": true
          },
          "saml_entity_id": {
            "type": "string",
            "nullable": true,
            "maxLength": 512
          },
          "saml_acs_url": {
            "type": "string",
            "nullable": true,
            "maxLength": 512
          },
          "saml_x509_cert": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "PatchedOrganizationMember": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "readOnly": true
          },
          "user": {
            "allOf": [
              {
                "$ref": "#/components/schemas/UserBasic"
              }
            ],
            "readOnly": true
          },
          "level": {
            "enum": [1, 8, 15],
            "type": "integer",
            "minimum": 0,
            "maximum": 32767
          },
          "joined_at": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "is_2fa_enabled": {
            "type": "boolean",
            "readOnly": true
          },
          "has_social_auth": {
            "type": "boolean",
            "readOnly": true
          }
        }
      },
      "PatchedOrganizationResourceAccess": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "resource": {
            "enum": [
              "feature flags",
              "experiments",
              "cohorts",
              "data management",
              "session recordings",
              "insights",
              "dashboards"
            ],
            "type": "string"
          },
          "access_level": {
            "enum": [21, 37],
            "type": "integer",
            "minimum": 0,
            "maximum": 32767
          },
          "organization": {
            "type": "string",
            "format": "uuid",
            "readOnly": true
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "created_by": {
            "type": "integer",
            "readOnly": true,
            "nullable": true
          }
        }
      },
      "PatchedPerson": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "name": {
            "type": "string",
            "readOnly": true
          },
          "distinct_ids": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "readOnly": true
          },
          "properties": {
            "type": "object",
            "additionalProperties": {}
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "uuid": {
            "type": "string",
            "format": "uuid",
            "readOnly": true
          }
        }
      },
      "PatchedPlugin": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "plugin_type": {
            "enum": ["local", "custom", "repository", "source", "", null],
            "type": "string",
            "nullable": true
          },
          "name": {
            "type": "string",
            "nullable": true,
            "maxLength": 200
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "url": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "icon": {
            "type": "string",
            "nullable": true,
            "maxLength": 800
          },
          "config_schema": {
            "type": "object",
            "additionalProperties": {}
          },
          "tag": {
            "type": "string",
            "nullable": true,
            "maxLength": 200
          },
          "latest_tag": {
            "type": "string",
            "readOnly": true,
            "nullable": true
          },
          "is_global": {
            "type": "boolean"
          },
          "organization_id": {
            "type": "string",
            "format": "uuid",
            "readOnly": true
          },
          "organization_name": {
            "type": "string",
            "readOnly": true
          },
          "capabilities": {
            "type": "object",
            "additionalProperties": {}
          },
          "metrics": {
            "type": "object",
            "additionalProperties": {},
            "nullable": true
          },
          "public_jobs": {
            "type": "object",
            "additionalProperties": {},
            "nullable": true
          }
        }
      },
      "PatchedPluginConfig": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "plugin": {
            "type": "integer"
          },
          "enabled": {
            "type": "boolean"
          },
          "order": {
            "type": "integer",
            "maximum": 2147483647,
            "minimum": -2147483648
          },
          "config": {
            "type": "string",
            "readOnly": true
          },
          "error": {
            "type": "object",
            "additionalProperties": {},
            "nullable": true
          },
          "team_id": {
            "type": "integer",
            "nullable": true,
            "readOnly": true
          },
          "plugin_info": {
            "type": "string",
            "readOnly": true
          },
          "delivery_rate_24h": {
            "type": "string",
            "readOnly": true
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          }
        }
      },
      "PatchedRole": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "readOnly": true
          },
          "name": {
            "type": "string",
            "maxLength": 200
          },
          "feature_flags_access_level": {
            "enum": [21, 37],
            "type": "integer",
            "minimum": 0,
            "maximum": 32767
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "created_by": {
            "allOf": [
              {
                "$ref": "#/components/schemas/UserBasic"
              }
            ],
            "readOnly": true
          },
          "members": {
            "type": "string",
            "readOnly": true
          },
          "associated_flags": {
            "type": "string",
            "readOnly": true
          }
        }
      },
      "PatchedSessionRecordingPlaylist": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "short_id": {
            "type": "string",
            "readOnly": true
          },
          "name": {
            "type": "string",
            "nullable": true,
            "maxLength": 400
          },
          "derived_name": {
            "type": "string",
            "nullable": true,
            "maxLength": 400
          },
          "description": {
            "type": "string"
          },
          "pinned": {
            "type": "boolean"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "created_by": {
            "allOf": [
              {
                "$ref": "#/components/schemas/UserBasic"
              }
            ],
            "readOnly": true
          },
          "deleted": {
            "type": "boolean"
          },
          "filters": {
            "type": "object",
            "additionalProperties": {}
          },
          "last_modified_at": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "last_modified_by": {
            "allOf": [
              {
                "$ref": "#/components/schemas/UserBasic"
              }
            ],
            "readOnly": true
          }
        }
      },
      "PatchedSubscription": {
        "type": "object",
        "description": "Standard Subscription serializer.",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "dashboard": {
            "type": "integer",
            "nullable": true
          },
          "insight": {
            "type": "integer",
            "nullable": true
          },
          "target_type": {
            "enum": ["email", "slack", "webhook"],
            "type": "string"
          },
          "target_value": {
            "type": "string"
          },
          "frequency": {
            "enum": ["daily", "weekly", "monthly", "yearly"],
            "type": "string"
          },
          "interval": {
            "type": "integer",
            "maximum": 2147483647,
            "minimum": -2147483648
          },
          "byweekday": {
            "type": "array",
            "items": {
              "enum": [
                "monday",
                "tuesday",
                "wednesday",
                "thursday",
                "friday",
                "saturday",
                "sunday"
              ],
              "type": "string"
            },
            "nullable": true
          },
          "bysetpos": {
            "type": "integer",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "nullable": true
          },
          "count": {
            "type": "integer",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "nullable": true
          },
          "start_date": {
            "type": "string",
            "format": "date-time"
          },
          "until_date": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "created_by": {
            "allOf": [
              {
                "$ref": "#/components/schemas/UserBasic"
              }
            ],
            "readOnly": true
          },
          "deleted": {
            "type": "boolean"
          },
          "title": {
            "type": "string",
            "nullable": true,
            "maxLength": 100
          },
          "summary": {
            "type": "string",
            "readOnly": true
          },
          "next_delivery_date": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "nullable": true
          },
          "invite_message": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "PatchedSurveySerializerCreateUpdateOnly": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "readOnly": true
          },
          "name": {
            "type": "string",
            "maxLength": 400
          },
          "description": {
            "type": "string"
          },
          "type": {
            "enum": ["popover", "button", "email", "full_screen"],
            "type": "string"
          },
          "linked_flag": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MinimalFeatureFlag"
              }
            ],
            "readOnly": true
          },
          "linked_flag_id": {
            "type": "integer",
            "writeOnly": true,
            "nullable": true
          },
          "targeting_flag_id": {
            "type": "integer",
            "writeOnly": true
          },
          "targeting_flag": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MinimalFeatureFlag"
              }
            ],
            "readOnly": true
          },
          "targeting_flag_filters": {
            "type": "object",
            "additionalProperties": {},
            "writeOnly": true
          },
          "questions": {
            "type": "object",
            "additionalProperties": {},
            "nullable": true
          },
          "conditions": {
            "type": "object",
            "additionalProperties": {},
            "nullable": true
          },
          "appearance": {
            "type": "object",
            "additionalProperties": {},
            "nullable": true
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "created_by": {
            "allOf": [
              {
                "$ref": "#/components/schemas/UserBasic"
              }
            ],
            "readOnly": true
          },
          "start_date": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "end_date": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "archived": {
            "type": "boolean"
          }
        }
      },
      "PatchedTable": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "readOnly": true
          },
          "name": {
            "type": "string",
            "maxLength": 128
          },
          "format": {
            "enum": ["CSV", "Parquet"],
            "type": "string"
          },
          "created_by": {
            "allOf": [
              {
                "$ref": "#/components/schemas/UserBasic"
              }
            ],
            "readOnly": true
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "url_pattern": {
            "type": "string",
            "maxLength": 500
          },
          "credential": {
            "$ref": "#/components/schemas/Credential"
          },
          "columns": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "readOnly": true
          }
        }
      },
      "PatchedTeam": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "uuid": {
            "type": "string",
            "format": "uuid",
            "readOnly": true
          },
          "organization": {
            "type": "string",
            "format": "uuid",
            "readOnly": true
          },
          "api_token": {
            "type": "string",
            "readOnly": true
          },
          "app_urls": {
            "type": "array",
            "items": {
              "type": "string",
              "nullable": true,
              "maxLength": 200
            }
          },
          "name": {
            "type": "string",
            "maxLength": 200,
            "minLength": 1
          },
          "slack_incoming_webhook": {
            "type": "string",
            "nullable": true,
            "maxLength": 500
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "anonymize_ips": {
            "type": "boolean"
          },
          "completed_snippet_onboarding": {
            "type": "boolean"
          },
          "ingested_event": {
            "type": "boolean",
            "readOnly": true
          },
          "test_account_filters": {
            "type": "object",
            "additionalProperties": {}
          },
          "test_account_filters_default_checked": {
            "type": "boolean",
            "nullable": true
          },
          "path_cleaning_filters": {
            "type": "object",
            "additionalProperties": {},
            "nullable": true
          },
          "is_demo": {
            "type": "boolean"
          },
          "timezone": {
            "enum": [
              "Africa/Abidjan",
              "Africa/Accra",
              "Africa/Addis_Ababa",
              "Africa/Algiers",
              "Africa/Asmara",
              "Africa/Bamako",
              "Africa/Bangui",
              "Africa/Banjul",
              "Africa/Bissau",
              "Africa/Blantyre",
              "Africa/Brazzaville",
              "Africa/Bujumbura",
              "Africa/Cairo",
              "Africa/Casablanca",
              "Africa/Ceuta",
              "Africa/Conakry",
              "Africa/Dakar",
              "Africa/Dar_es_Salaam",
              "Africa/Djibouti",
              "Africa/Douala",
              "Africa/El_Aaiun",
              "Africa/Freetown",
              "Africa/Gaborone",
              "Africa/Harare",
              "Africa/Johannesburg",
              "Africa/Juba",
              "Africa/Kampala",
              "Africa/Khartoum",
              "Africa/Kigali",
              "Africa/Kinshasa",
              "Africa/Lagos",
              "Africa/Libreville",
              "Africa/Lome",
              "Africa/Luanda",
              "Africa/Lubumbashi",
              "Africa/Lusaka",
              "Africa/Malabo",
              "Africa/Maputo",
              "Africa/Maseru",
              "Africa/Mbabane",
              "Africa/Mogadishu",
              "Africa/Monrovia",
              "Africa/Nairobi",
              "Africa/Ndjamena",
              "Africa/Niamey",
              "Africa/Nouakchott",
              "Africa/Ouagadougou",
              "Africa/Porto-Novo",
              "Africa/Sao_Tome",
              "Africa/Tripoli",
              "Africa/Tunis",
              "Africa/Windhoek",
              "America/Adak",
              "America/Anchorage",
              "America/Anguilla",
              "America/Antigua",
              "America/Araguaina",
              "America/Argentina/Buenos_Aires",
              "America/Argentina/Catamarca",
              "America/Argentina/Cordoba",
              "America/Argentina/Jujuy",
              "America/Argentina/La_Rioja",
              "America/Argentina/Mendoza",
              "America/Argentina/Rio_Gallegos",
              "America/Argentina/Salta",
              "America/Argentina/San_Juan",
              "America/Argentina/San_Luis",
              "America/Argentina/Tucuman",
              "America/Argentina/Ushuaia",
              "America/Aruba",
              "America/Asuncion",
              "America/Atikokan",
              "America/Bahia",
              "America/Bahia_Banderas",
              "America/Barbados",
              "America/Belem",
              "America/Belize",
              "America/Blanc-Sablon",
              "America/Boa_Vista",
              "America/Bogota",
              "America/Boise",
              "America/Cambridge_Bay",
              "America/Campo_Grande",
              "America/Cancun",
              "America/Caracas",
              "America/Cayenne",
              "America/Cayman",
              "America/Chicago",
              "America/Chihuahua",
              "America/Costa_Rica",
              "America/Creston",
              "America/Cuiaba",
              "America/Curacao",
              "America/Danmarkshavn",
              "America/Dawson",
              "America/Dawson_Creek",
              "America/Denver",
              "America/Detroit",
              "America/Dominica",
              "America/Edmonton",
              "America/Eirunepe",
              "America/El_Salvador",
              "America/Fort_Nelson",
              "America/Fortaleza",
              "America/Glace_Bay",
              "America/Goose_Bay",
              "America/Grand_Turk",
              "America/Grenada",
              "America/Guadeloupe",
              "America/Guatemala",
              "America/Guayaquil",
              "America/Guyana",
              "America/Halifax",
              "America/Havana",
              "America/Hermosillo",
              "America/Indiana/Indianapolis",
              "America/Indiana/Knox",
              "America/Indiana/Marengo",
              "America/Indiana/Petersburg",
              "America/Indiana/Tell_City",
              "America/Indiana/Vevay",
              "America/Indiana/Vincennes",
              "America/Indiana/Winamac",
              "America/Inuvik",
              "America/Iqaluit",
              "America/Jamaica",
              "America/Juneau",
              "America/Kentucky/Louisville",
              "America/Kentucky/Monticello",
              "America/Kralendijk",
              "America/La_Paz",
              "America/Lima",
              "America/Los_Angeles",
              "America/Lower_Princes",
              "America/Maceio",
              "America/Managua",
              "America/Manaus",
              "America/Marigot",
              "America/Martinique",
              "America/Matamoros",
              "America/Mazatlan",
              "America/Menominee",
              "America/Merida",
              "America/Metlakatla",
              "America/Mexico_City",
              "America/Miquelon",
              "America/Moncton",
              "America/Monterrey",
              "America/Montevideo",
              "America/Montserrat",
              "America/Nassau",
              "America/New_York",
              "America/Nipigon",
              "America/Nome",
              "America/Noronha",
              "America/North_Dakota/Beulah",
              "America/North_Dakota/Center",
              "America/North_Dakota/New_Salem",
              "America/Nuuk",
              "America/Ojinaga",
              "America/Panama",
              "America/Pangnirtung",
              "America/Paramaribo",
              "America/Phoenix",
              "America/Port-au-Prince",
              "America/Port_of_Spain",
              "America/Porto_Velho",
              "America/Puerto_Rico",
              "America/Punta_Arenas",
              "America/Rainy_River",
              "America/Rankin_Inlet",
              "America/Recife",
              "America/Regina",
              "America/Resolute",
              "America/Rio_Branco",
              "America/Santarem",
              "America/Santiago",
              "America/Santo_Domingo",
              "America/Sao_Paulo",
              "America/Scoresbysund",
              "America/Sitka",
              "America/St_Barthelemy",
              "America/St_Johns",
              "America/St_Kitts",
              "America/St_Lucia",
              "America/St_Thomas",
              "America/St_Vincent",
              "America/Swift_Current",
              "America/Tegucigalpa",
              "America/Thule",
              "America/Thunder_Bay",
              "America/Tijuana",
              "America/Toronto",
              "America/Tortola",
              "America/Vancouver",
              "America/Whitehorse",
              "America/Winnipeg",
              "America/Yakutat",
              "America/Yellowknife",
              "Antarctica/Casey",
              "Antarctica/Davis",
              "Antarctica/DumontDUrville",
              "Antarctica/Macquarie",
              "Antarctica/Mawson",
              "Antarctica/McMurdo",
              "Antarctica/Palmer",
              "Antarctica/Rothera",
              "Antarctica/Syowa",
              "Antarctica/Troll",
              "Antarctica/Vostok",
              "Arctic/Longyearbyen",
              "Asia/Aden",
              "Asia/Almaty",
              "Asia/Amman",
              "Asia/Anadyr",
              "Asia/Aqtau",
              "Asia/Aqtobe",
              "Asia/Ashgabat",
              "Asia/Atyrau",
              "Asia/Baghdad",
              "Asia/Bahrain",
              "Asia/Baku",
              "Asia/Bangkok",
              "Asia/Barnaul",
              "Asia/Beirut",
              "Asia/Bishkek",
              "Asia/Brunei",
              "Asia/Chita",
              "Asia/Choibalsan",
              "Asia/Colombo",
              "Asia/Damascus",
              "Asia/Dhaka",
              "Asia/Dili",
              "Asia/Dubai",
              "Asia/Dushanbe",
              "Asia/Famagusta",
              "Asia/Gaza",
              "Asia/Hebron",
              "Asia/Ho_Chi_Minh",
              "Asia/Hong_Kong",
              "Asia/Hovd",
              "Asia/Irkutsk",
              "Asia/Jakarta",
              "Asia/Jayapura",
              "Asia/Jerusalem",
              "Asia/Kabul",
              "Asia/Kamchatka",
              "Asia/Karachi",
              "Asia/Kathmandu",
              "Asia/Khandyga",
              "Asia/Kolkata",
              "Asia/Krasnoyarsk",
              "Asia/Kuala_Lumpur",
              "Asia/Kuching",
              "Asia/Kuwait",
              "Asia/Macau",
              "Asia/Magadan",
              "Asia/Makassar",
              "Asia/Manila",
              "Asia/Muscat",
              "Asia/Nicosia",
              "Asia/Novokuznetsk",
              "Asia/Novosibirsk",
              "Asia/Omsk",
              "Asia/Oral",
              "Asia/Phnom_Penh",
              "Asia/Pontianak",
              "Asia/Pyongyang",
              "Asia/Qatar",
              "Asia/Qostanay",
              "Asia/Qyzylorda",
              "Asia/Riyadh",
              "Asia/Sakhalin",
              "Asia/Samarkand",
              "Asia/Seoul",
              "Asia/Shanghai",
              "Asia/Singapore",
              "Asia/Srednekolymsk",
              "Asia/Taipei",
              "Asia/Tashkent",
              "Asia/Tbilisi",
              "Asia/Tehran",
              "Asia/Thimphu",
              "Asia/Tokyo",
              "Asia/Tomsk",
              "Asia/Ulaanbaatar",
              "Asia/Urumqi",
              "Asia/Ust-Nera",
              "Asia/Vientiane",
              "Asia/Vladivostok",
              "Asia/Yakutsk",
              "Asia/Yangon",
              "Asia/Yekaterinburg",
              "Asia/Yerevan",
              "Atlantic/Azores",
              "Atlantic/Bermuda",
              "Atlantic/Canary",
              "Atlantic/Cape_Verde",
              "Atlantic/Faroe",
              "Atlantic/Madeira",
              "Atlantic/Reykjavik",
              "Atlantic/South_Georgia",
              "Atlantic/St_Helena",
              "Atlantic/Stanley",
              "Australia/Adelaide",
              "Australia/Brisbane",
              "Australia/Broken_Hill",
              "Australia/Darwin",
              "Australia/Eucla",
              "Australia/Hobart",
              "Australia/Lindeman",
              "Australia/Lord_Howe",
              "Australia/Melbourne",
              "Australia/Perth",
              "Australia/Sydney",
              "Canada/Atlantic",
              "Canada/Central",
              "Canada/Eastern",
              "Canada/Mountain",
              "Canada/Newfoundland",
              "Canada/Pacific",
              "Europe/Amsterdam",
              "Europe/Andorra",
              "Europe/Astrakhan",
              "Europe/Athens",
              "Europe/Belgrade",
              "Europe/Berlin",
              "Europe/Bratislava",
              "Europe/Brussels",
              "Europe/Bucharest",
              "Europe/Budapest",
              "Europe/Busingen",
              "Europe/Chisinau",
              "Europe/Copenhagen",
              "Europe/Dublin",
              "Europe/Gibraltar",
              "Europe/Guernsey",
              "Europe/Helsinki",
              "Europe/Isle_of_Man",
              "Europe/Istanbul",
              "Europe/Jersey",
              "Europe/Kaliningrad",
              "Europe/Kiev",
              "Europe/Kirov",
              "Europe/Lisbon",
              "Europe/Ljubljana",
              "Europe/London",
              "Europe/Luxembourg",
              "Europe/Madrid",
              "Europe/Malta",
              "Europe/Mariehamn",
              "Europe/Minsk",
              "Europe/Monaco",
              "Europe/Moscow",
              "Europe/Oslo",
              "Europe/Paris",
              "Europe/Podgorica",
              "Europe/Prague",
              "Europe/Riga",
              "Europe/Rome",
              "Europe/Samara",
              "Europe/San_Marino",
              "Europe/Sarajevo",
              "Europe/Saratov",
              "Europe/Simferopol",
              "Europe/Skopje",
              "Europe/Sofia",
              "Europe/Stockholm",
              "Europe/Tallinn",
              "Europe/Tirane",
              "Europe/Ulyanovsk",
              "Europe/Uzhgorod",
              "Europe/Vaduz",
              "Europe/Vatican",
              "Europe/Vienna",
              "Europe/Vilnius",
              "Europe/Volgograd",
              "Europe/Warsaw",
              "Europe/Zagreb",
              "Europe/Zaporozhye",
              "Europe/Zurich",
              "GMT",
              "Indian/Antananarivo",
              "Indian/Chagos",
              "Indian/Christmas",
              "Indian/Cocos",
              "Indian/Comoro",
              "Indian/Kerguelen",
              "Indian/Mahe",
              "Indian/Maldives",
              "Indian/Mauritius",
              "Indian/Mayotte",
              "Indian/Reunion",
              "Pacific/Apia",
              "Pacific/Auckland",
              "Pacific/Bougainville",
              "Pacific/Chatham",
              "Pacific/Chuuk",
              "Pacific/Easter",
              "Pacific/Efate",
              "Pacific/Enderbury",
              "Pacific/Fakaofo",
              "Pacific/Fiji",
              "Pacific/Funafuti",
              "Pacific/Galapagos",
              "Pacific/Gambier",
              "Pacific/Guadalcanal",
              "Pacific/Guam",
              "Pacific/Honolulu",
              "Pacific/Kiritimati",
              "Pacific/Kosrae",
              "Pacific/Kwajalein",
              "Pacific/Majuro",
              "Pacific/Marquesas",
              "Pacific/Midway",
              "Pacific/Nauru",
              "Pacific/Niue",
              "Pacific/Norfolk",
              "Pacific/Noumea",
              "Pacific/Pago_Pago",
              "Pacific/Palau",
              "Pacific/Pitcairn",
              "Pacific/Pohnpei",
              "Pacific/Port_Moresby",
              "Pacific/Rarotonga",
              "Pacific/Saipan",
              "Pacific/Tahiti",
              "Pacific/Tarawa",
              "Pacific/Tongatapu",
              "Pacific/Wake",
              "Pacific/Wallis",
              "US/Alaska",
              "US/Arizona",
              "US/Central",
              "US/Eastern",
              "US/Hawaii",
              "US/Mountain",
              "US/Pacific",
              "UTC"
            ],
            "type": "string"
          },
          "data_attributes": {
            "type": "object",
            "additionalProperties": {}
          },
          "person_display_name_properties": {
            "type": "array",
            "items": {
              "type": "string",
              "maxLength": 400
            },
            "nullable": true
          },
          "correlation_config": {
            "type": "object",
            "additionalProperties": {},
            "nullable": true
          },
          "autocapture_opt_out": {
            "type": "boolean",
            "nullable": true
          },
          "autocapture_exceptions_opt_in": {
            "type": "boolean",
            "nullable": true
          },
          "autocapture_exceptions_errors_to_ignore": {
            "type": "object",
            "additionalProperties": {},
            "nullable": true
          },
          "capture_console_log_opt_in": {
            "type": "boolean",
            "nullable": true
          },
          "capture_performance_opt_in": {
            "type": "boolean",
            "nullable": true
          },
          "session_recording_opt_in": {
            "type": "boolean"
          },
          "session_recording_version": {
            "type": "string",
            "nullable": true,
            "maxLength": 24
          },
          "effective_membership_level": {
            "enum": [1, 8, 15],
            "type": "integer",
            "nullable": true,
            "readOnly": true
          },
          "access_control": {
            "type": "boolean"
          },
          "has_group_types": {
            "type": "boolean",
            "readOnly": true
          },
          "primary_dashboard": {
            "type": "integer",
            "nullable": true
          },
          "live_events_columns": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "recording_domains": {
            "type": "array",
            "items": {
              "type": "string",
              "nullable": true,
              "maxLength": 200
            },
            "nullable": true
          },
          "person_on_events_querying_enabled": {
            "type": "boolean",
            "readOnly": true
          },
          "groups_on_events_querying_enabled": {
            "type": "boolean",
            "readOnly": true
          },
          "inject_web_apps": {
            "type": "boolean",
            "nullable": true
          },
          "extra_settings": {
            "type": "object",
            "additionalProperties": {},
            "nullable": true
          }
        }
      },
      "PerformanceEvent": {
        "type": "object",
        "properties": {
          "uuid": {
            "type": "string",
            "format": "uuid"
          },
          "session_id": {
            "type": "string"
          },
          "window_id": {
            "type": "string"
          },
          "pageview_id": {
            "type": "string"
          },
          "distinct_id": {
            "type": "string"
          },
          "current_url": {
            "type": "string"
          },
          "entry_type": {
            "type": "string"
          },
          "time_origin": {
            "type": "string",
            "format": "date-time"
          },
          "timestamp": {
            "type": "string",
            "format": "date-time"
          },
          "name": {
            "type": "string"
          },
          "start_time": {
            "type": "number",
            "format": "double"
          },
          "duration": {
            "type": "number",
            "format": "double"
          },
          "redirect_start": {
            "type": "number",
            "format": "double"
          },
          "redirect_end": {
            "type": "number",
            "format": "double"
          },
          "worker_start": {
            "type": "number",
            "format": "double"
          },
          "fetch_start": {
            "type": "number",
            "format": "double"
          },
          "domain_lookup_start": {
            "type": "number",
            "format": "double"
          },
          "domain_lookup_end": {
            "type": "number",
            "format": "double"
          },
          "connect_start": {
            "type": "number",
            "format": "double"
          },
          "secure_connection_start": {
            "type": "number",
            "format": "double"
          },
          "connect_end": {
            "type": "number",
            "format": "double"
          },
          "request_start": {
            "type": "number",
            "format": "double"
          },
          "response_start": {
            "type": "number",
            "format": "double"
          },
          "response_end": {
            "type": "number",
            "format": "double"
          },
          "decoded_body_size": {
            "type": "integer"
          },
          "encoded_body_size": {
            "type": "integer"
          },
          "initiator_type": {
            "type": "string"
          },
          "next_hop_protocol": {
            "type": "string"
          },
          "render_blocking_status": {
            "type": "string"
          },
          "response_status": {
            "type": "integer"
          },
          "transfer_size": {
            "type": "integer"
          },
          "largest_contentful_paint_element": {
            "type": "string"
          },
          "largest_contentful_paint_render_time": {
            "type": "number",
            "format": "double"
          },
          "largest_contentful_paint_load_time": {
            "type": "number",
            "format": "double"
          },
          "largest_contentful_paint_size": {
            "type": "number",
            "format": "double"
          },
          "largest_contentful_paint_id": {
            "type": "string"
          },
          "largest_contentful_paint_url": {
            "type": "string"
          },
          "dom_complete": {
            "type": "number",
            "format": "double"
          },
          "dom_content_loaded_event": {
            "type": "number",
            "format": "double"
          },
          "dom_interactive": {
            "type": "number",
            "format": "double"
          },
          "load_event_end": {
            "type": "number",
            "format": "double"
          },
          "load_event_start": {
            "type": "number",
            "format": "double"
          },
          "redirect_count": {
            "type": "integer"
          },
          "navigation_type": {
            "type": "string"
          },
          "unload_event_end": {
            "type": "number",
            "format": "double"
          },
          "unload_event_start": {
            "type": "number",
            "format": "double"
          }
        },
        "required": [
          "current_url",
          "distinct_id",
          "entry_type",
          "name",
          "session_id",
          "time_origin",
          "timestamp",
          "uuid",
          "window_id"
        ]
      },
      "Person": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "name": {
            "type": "string",
            "readOnly": true
          },
          "distinct_ids": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "readOnly": true
          },
          "properties": {
            "type": "object",
            "additionalProperties": {}
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "uuid": {
            "type": "string",
            "format": "uuid",
            "readOnly": true
          }
        },
        "required": ["created_at", "distinct_ids", "id", "name", "uuid"]
      },
      "Plugin": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "plugin_type": {
            "enum": ["local", "custom", "repository", "source", "", null],
            "type": "string",
            "nullable": true
          },
          "name": {
            "type": "string",
            "nullable": true,
            "maxLength": 200
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "url": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "icon": {
            "type": "string",
            "nullable": true,
            "maxLength": 800
          },
          "config_schema": {
            "type": "object",
            "additionalProperties": {}
          },
          "tag": {
            "type": "string",
            "nullable": true,
            "maxLength": 200
          },
          "latest_tag": {
            "type": "string",
            "readOnly": true,
            "nullable": true
          },
          "is_global": {
            "type": "boolean"
          },
          "organization_id": {
            "type": "string",
            "format": "uuid",
            "readOnly": true
          },
          "organization_name": {
            "type": "string",
            "readOnly": true
          },
          "capabilities": {
            "type": "object",
            "additionalProperties": {}
          },
          "metrics": {
            "type": "object",
            "additionalProperties": {},
            "nullable": true
          },
          "public_jobs": {
            "type": "object",
            "additionalProperties": {},
            "nullable": true
          }
        },
        "required": [
          "id",
          "latest_tag",
          "organization_id",
          "organization_name",
          "url"
        ]
      },
      "PluginConfig": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "plugin": {
            "type": "integer"
          },
          "enabled": {
            "type": "boolean"
          },
          "order": {
            "type": "integer",
            "maximum": 2147483647,
            "minimum": -2147483648
          },
          "config": {
            "type": "string",
            "readOnly": true
          },
          "error": {
            "type": "object",
            "additionalProperties": {},
            "nullable": true
          },
          "team_id": {
            "type": "integer",
            "nullable": true,
            "readOnly": true
          },
          "plugin_info": {
            "type": "string",
            "readOnly": true
          },
          "delivery_rate_24h": {
            "type": "string",
            "readOnly": true
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          }
        },
        "required": [
          "config",
          "created_at",
          "delivery_rate_24h",
          "id",
          "order",
          "plugin",
          "plugin_info",
          "team_id"
        ]
      },
      "PluginLogEntry": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "team_id": {
            "type": "integer"
          },
          "plugin_id": {
            "type": "integer"
          },
          "plugin_config_id": {
            "type": "integer"
          },
          "timestamp": {
            "type": "string",
            "format": "date-time"
          },
          "source": {
            "enum": ["SYSTEM", "PLUGIN", "CONSOLE"],
            "type": "string"
          },
          "type": {
            "enum": ["DEBUG", "LOG", "INFO", "WARN", "ERROR"],
            "type": "string"
          },
          "message": {
            "type": "string"
          },
          "instance_id": {
            "type": "string",
            "format": "uuid"
          }
        },
        "required": [
          "id",
          "instance_id",
          "message",
          "plugin_config_id",
          "plugin_id",
          "source",
          "team_id",
          "timestamp",
          "type"
        ]
      },
      "Property": {
        "type": "object",
        "properties": {
          "type": {
            "enum": ["AND", "OR"],
            "type": "string",
            "default": "AND",
            "description": "\n You can use a simplified version:\n```json\n{\n    \"properties\": [\n        {\n            \"key\": \"email\",\n            \"value\": \"x@y.com\",\n            \"operator\": \"exact\",\n            \"type\": \"event\"\n        }\n    ]\n}\n```\n\nOr you can create more complicated queries with AND and OR:\n```json\n{\n    \"properties\": {\n        \"type\": \"AND\",\n        \"values\": [\n            {\n                \"type\": \"OR\",\n                \"values\": [\n                    {\"key\": \"email\", ...},\n                    {\"key\": \"email\", ...}\n                ]\n            },\n            {\n                \"type\": \"AND\",\n                \"values\": [\n                    {\"key\": \"email\", ...},\n                    {\"key\": \"email\", ...}\n                ]\n            }\n        ]\n    ]\n}\n```\n"
          },
          "values": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PropertyItem"
            }
          }
        },
        "required": ["values"]
      },
      "PropertyItem": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string",
            "description": "Key of the property you're filtering on. For example `email` or `$current_url`"
          },
          "value": {
            "type": "string",
            "description": "Value of your filter. For example `test@example.com` or `https://example.com/test/`. Can be an array for an OR query, like `[\"test@example.com\",\"ok@example.com\"]`"
          },
          "operator": {
            "enum": [
              "exact",
              "is_not",
              "icontains",
              "not_icontains",
              "regex",
              "not_regex",
              "gt",
              "lt",
              "gte",
              "lte",
              "is_set",
              "is_not_set",
              "is_date_exact",
              "is_date_after",
              "is_date_before",
              "",
              null
            ],
            "type": "string",
            "nullable": true,
            "default": "exact"
          },
          "type": {
            "enum": [
              "event",
              "person",
              "cohort",
              "element",
              "static-cohort",
              "precalculated-cohort",
              "group",
              "recording",
              "behavioral",
              "session",
              "hogql",
              ""
            ],
            "type": "string",
            "default": "event"
          }
        },
        "required": ["key", "value"]
      },
      "Role": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "readOnly": true
          },
          "name": {
            "type": "string",
            "maxLength": 200
          },
          "feature_flags_access_level": {
            "enum": [21, 37],
            "type": "integer",
            "minimum": 0,
            "maximum": 32767
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "created_by": {
            "allOf": [
              {
                "$ref": "#/components/schemas/UserBasic"
              }
            ],
            "readOnly": true
          },
          "members": {
            "type": "string",
            "readOnly": true
          },
          "associated_flags": {
            "type": "string",
            "readOnly": true
          }
        },
        "required": [
          "associated_flags",
          "created_at",
          "created_by",
          "id",
          "members",
          "name"
        ]
      },
      "RoleMembership": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "readOnly": true
          },
          "role_id": {
            "type": "string",
            "format": "uuid",
            "readOnly": true
          },
          "user": {
            "allOf": [
              {
                "$ref": "#/components/schemas/UserBasic"
              }
            ],
            "readOnly": true
          },
          "joined_at": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "user_uuid": {
            "type": "string",
            "format": "uuid",
            "writeOnly": true
          }
        },
        "required": [
          "id",
          "joined_at",
          "role_id",
          "updated_at",
          "user",
          "user_uuid"
        ]
      },
      "SessionRecording": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true
          },
          "distinct_id": {
            "type": "string",
            "readOnly": true,
            "nullable": true
          },
          "viewed": {
            "type": "string",
            "readOnly": true
          },
          "recording_duration": {
            "type": "integer",
            "readOnly": true
          },
          "start_time": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "nullable": true
          },
          "end_time": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "nullable": true
          },
          "click_count": {
            "type": "integer",
            "readOnly": true,
            "nullable": true
          },
          "keypress_count": {
            "type": "integer",
            "readOnly": true,
            "nullable": true
          },
          "start_url": {
            "type": "string",
            "readOnly": true,
            "nullable": true
          },
          "matching_events": {
            "type": "string",
            "readOnly": true
          },
          "person": {
            "$ref": "#/components/schemas/Person"
          },
          "storage": {
            "type": "string",
            "readOnly": true
          },
          "pinned_count": {
            "type": "string",
            "readOnly": true
          }
        },
        "required": [
          "click_count",
          "distinct_id",
          "end_time",
          "id",
          "keypress_count",
          "matching_events",
          "pinned_count",
          "recording_duration",
          "start_time",
          "start_url",
          "storage",
          "viewed"
        ]
      },
      "SessionRecordingPlaylist": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "short_id": {
            "type": "string",
            "readOnly": true
          },
          "name": {
            "type": "string",
            "nullable": true,
            "maxLength": 400
          },
          "derived_name": {
            "type": "string",
            "nullable": true,
            "maxLength": 400
          },
          "description": {
            "type": "string"
          },
          "pinned": {
            "type": "boolean"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "created_by": {
            "allOf": [
              {
                "$ref": "#/components/schemas/UserBasic"
              }
            ],
            "readOnly": true
          },
          "deleted": {
            "type": "boolean"
          },
          "filters": {
            "type": "object",
            "additionalProperties": {}
          },
          "last_modified_at": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "last_modified_by": {
            "allOf": [
              {
                "$ref": "#/components/schemas/UserBasic"
              }
            ],
            "readOnly": true
          }
        },
        "required": [
          "created_at",
          "created_by",
          "id",
          "last_modified_at",
          "last_modified_by",
          "short_id"
        ]
      },
      "Subscription": {
        "type": "object",
        "description": "Standard Subscription serializer.",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "dashboard": {
            "type": "integer",
            "nullable": true
          },
          "insight": {
            "type": "integer",
            "nullable": true
          },
          "target_type": {
            "enum": ["email", "slack", "webhook"],
            "type": "string"
          },
          "target_value": {
            "type": "string"
          },
          "frequency": {
            "enum": ["daily", "weekly", "monthly", "yearly"],
            "type": "string"
          },
          "interval": {
            "type": "integer",
            "maximum": 2147483647,
            "minimum": -2147483648
          },
          "byweekday": {
            "type": "array",
            "items": {
              "enum": [
                "monday",
                "tuesday",
                "wednesday",
                "thursday",
                "friday",
                "saturday",
                "sunday"
              ],
              "type": "string"
            },
            "nullable": true
          },
          "bysetpos": {
            "type": "integer",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "nullable": true
          },
          "count": {
            "type": "integer",
            "maximum": 2147483647,
            "minimum": -2147483648,
            "nullable": true
          },
          "start_date": {
            "type": "string",
            "format": "date-time"
          },
          "until_date": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "created_by": {
            "allOf": [
              {
                "$ref": "#/components/schemas/UserBasic"
              }
            ],
            "readOnly": true
          },
          "deleted": {
            "type": "boolean"
          },
          "title": {
            "type": "string",
            "nullable": true,
            "maxLength": 100
          },
          "summary": {
            "type": "string",
            "readOnly": true
          },
          "next_delivery_date": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "nullable": true
          },
          "invite_message": {
            "type": "string",
            "nullable": true
          }
        },
        "required": [
          "created_at",
          "created_by",
          "frequency",
          "id",
          "next_delivery_date",
          "start_date",
          "summary",
          "target_type",
          "target_value"
        ]
      },
      "Survey": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "readOnly": true
          },
          "name": {
            "type": "string",
            "maxLength": 400
          },
          "description": {
            "type": "string"
          },
          "type": {
            "enum": ["popover", "button", "email", "full_screen"],
            "type": "string"
          },
          "linked_flag": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MinimalFeatureFlag"
              }
            ],
            "readOnly": true
          },
          "linked_flag_id": {
            "type": "integer",
            "nullable": true
          },
          "targeting_flag": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MinimalFeatureFlag"
              }
            ],
            "readOnly": true
          },
          "questions": {
            "type": "object",
            "additionalProperties": {},
            "nullable": true
          },
          "conditions": {
            "type": "object",
            "additionalProperties": {},
            "nullable": true
          },
          "appearance": {
            "type": "object",
            "additionalProperties": {},
            "nullable": true
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "created_by": {
            "allOf": [
              {
                "$ref": "#/components/schemas/UserBasic"
              }
            ],
            "readOnly": true
          },
          "start_date": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "end_date": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "archived": {
            "type": "boolean"
          }
        },
        "required": [
          "created_at",
          "created_by",
          "id",
          "linked_flag",
          "name",
          "targeting_flag",
          "type"
        ]
      },
      "SurveySerializerCreateUpdateOnly": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "readOnly": true
          },
          "name": {
            "type": "string",
            "maxLength": 400
          },
          "description": {
            "type": "string"
          },
          "type": {
            "enum": ["popover", "button", "email", "full_screen"],
            "type": "string"
          },
          "linked_flag": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MinimalFeatureFlag"
              }
            ],
            "readOnly": true
          },
          "linked_flag_id": {
            "type": "integer",
            "writeOnly": true,
            "nullable": true
          },
          "targeting_flag_id": {
            "type": "integer",
            "writeOnly": true
          },
          "targeting_flag": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MinimalFeatureFlag"
              }
            ],
            "readOnly": true
          },
          "targeting_flag_filters": {
            "type": "object",
            "additionalProperties": {},
            "writeOnly": true
          },
          "questions": {
            "type": "object",
            "additionalProperties": {},
            "nullable": true
          },
          "conditions": {
            "type": "object",
            "additionalProperties": {},
            "nullable": true
          },
          "appearance": {
            "type": "object",
            "additionalProperties": {},
            "nullable": true
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "created_by": {
            "allOf": [
              {
                "$ref": "#/components/schemas/UserBasic"
              }
            ],
            "readOnly": true
          },
          "start_date": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "end_date": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "archived": {
            "type": "boolean"
          }
        },
        "required": [
          "created_at",
          "created_by",
          "id",
          "linked_flag",
          "name",
          "targeting_flag",
          "type"
        ]
      },
      "Table": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "readOnly": true
          },
          "name": {
            "type": "string",
            "maxLength": 128
          },
          "format": {
            "enum": ["CSV", "Parquet"],
            "type": "string"
          },
          "created_by": {
            "allOf": [
              {
                "$ref": "#/components/schemas/UserBasic"
              }
            ],
            "readOnly": true
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "url_pattern": {
            "type": "string",
            "maxLength": 500
          },
          "credential": {
            "$ref": "#/components/schemas/Credential"
          },
          "columns": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "readOnly": true
          }
        },
        "required": [
          "columns",
          "created_at",
          "created_by",
          "credential",
          "format",
          "id",
          "name",
          "url_pattern"
        ]
      },
      "TaggedItem": {
        "type": "object",
        "properties": {
          "tag": {
            "type": "string",
            "readOnly": true
          }
        },
        "required": ["tag"]
      },
      "Team": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "uuid": {
            "type": "string",
            "format": "uuid",
            "readOnly": true
          },
          "organization": {
            "type": "string",
            "format": "uuid",
            "readOnly": true
          },
          "api_token": {
            "type": "string",
            "readOnly": true
          },
          "app_urls": {
            "type": "array",
            "items": {
              "type": "string",
              "nullable": true,
              "maxLength": 200
            }
          },
          "name": {
            "type": "string",
            "maxLength": 200,
            "minLength": 1
          },
          "slack_incoming_webhook": {
            "type": "string",
            "nullable": true,
            "maxLength": 500
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "anonymize_ips": {
            "type": "boolean"
          },
          "completed_snippet_onboarding": {
            "type": "boolean"
          },
          "ingested_event": {
            "type": "boolean",
            "readOnly": true
          },
          "test_account_filters": {
            "type": "object",
            "additionalProperties": {}
          },
          "test_account_filters_default_checked": {
            "type": "boolean",
            "nullable": true
          },
          "path_cleaning_filters": {
            "type": "object",
            "additionalProperties": {},
            "nullable": true
          },
          "is_demo": {
            "type": "boolean"
          },
          "timezone": {
            "enum": [
              "Africa/Abidjan",
              "Africa/Accra",
              "Africa/Addis_Ababa",
              "Africa/Algiers",
              "Africa/Asmara",
              "Africa/Bamako",
              "Africa/Bangui",
              "Africa/Banjul",
              "Africa/Bissau",
              "Africa/Blantyre",
              "Africa/Brazzaville",
              "Africa/Bujumbura",
              "Africa/Cairo",
              "Africa/Casablanca",
              "Africa/Ceuta",
              "Africa/Conakry",
              "Africa/Dakar",
              "Africa/Dar_es_Salaam",
              "Africa/Djibouti",
              "Africa/Douala",
              "Africa/El_Aaiun",
              "Africa/Freetown",
              "Africa/Gaborone",
              "Africa/Harare",
              "Africa/Johannesburg",
              "Africa/Juba",
              "Africa/Kampala",
              "Africa/Khartoum",
              "Africa/Kigali",
              "Africa/Kinshasa",
              "Africa/Lagos",
              "Africa/Libreville",
              "Africa/Lome",
              "Africa/Luanda",
              "Africa/Lubumbashi",
              "Africa/Lusaka",
              "Africa/Malabo",
              "Africa/Maputo",
              "Africa/Maseru",
              "Africa/Mbabane",
              "Africa/Mogadishu",
              "Africa/Monrovia",
              "Africa/Nairobi",
              "Africa/Ndjamena",
              "Africa/Niamey",
              "Africa/Nouakchott",
              "Africa/Ouagadougou",
              "Africa/Porto-Novo",
              "Africa/Sao_Tome",
              "Africa/Tripoli",
              "Africa/Tunis",
              "Africa/Windhoek",
              "America/Adak",
              "America/Anchorage",
              "America/Anguilla",
              "America/Antigua",
              "America/Araguaina",
              "America/Argentina/Buenos_Aires",
              "America/Argentina/Catamarca",
              "America/Argentina/Cordoba",
              "America/Argentina/Jujuy",
              "America/Argentina/La_Rioja",
              "America/Argentina/Mendoza",
              "America/Argentina/Rio_Gallegos",
              "America/Argentina/Salta",
              "America/Argentina/San_Juan",
              "America/Argentina/San_Luis",
              "America/Argentina/Tucuman",
              "America/Argentina/Ushuaia",
              "America/Aruba",
              "America/Asuncion",
              "America/Atikokan",
              "America/Bahia",
              "America/Bahia_Banderas",
              "America/Barbados",
              "America/Belem",
              "America/Belize",
              "America/Blanc-Sablon",
              "America/Boa_Vista",
              "America/Bogota",
              "America/Boise",
              "America/Cambridge_Bay",
              "America/Campo_Grande",
              "America/Cancun",
              "America/Caracas",
              "America/Cayenne",
              "America/Cayman",
              "America/Chicago",
              "America/Chihuahua",
              "America/Costa_Rica",
              "America/Creston",
              "America/Cuiaba",
              "America/Curacao",
              "America/Danmarkshavn",
              "America/Dawson",
              "America/Dawson_Creek",
              "America/Denver",
              "America/Detroit",
              "America/Dominica",
              "America/Edmonton",
              "America/Eirunepe",
              "America/El_Salvador",
              "America/Fort_Nelson",
              "America/Fortaleza",
              "America/Glace_Bay",
              "America/Goose_Bay",
              "America/Grand_Turk",
              "America/Grenada",
              "America/Guadeloupe",
              "America/Guatemala",
              "America/Guayaquil",
              "America/Guyana",
              "America/Halifax",
              "America/Havana",
              "America/Hermosillo",
              "America/Indiana/Indianapolis",
              "America/Indiana/Knox",
              "America/Indiana/Marengo",
              "America/Indiana/Petersburg",
              "America/Indiana/Tell_City",
              "America/Indiana/Vevay",
              "America/Indiana/Vincennes",
              "America/Indiana/Winamac",
              "America/Inuvik",
              "America/Iqaluit",
              "America/Jamaica",
              "America/Juneau",
              "America/Kentucky/Louisville",
              "America/Kentucky/Monticello",
              "America/Kralendijk",
              "America/La_Paz",
              "America/Lima",
              "America/Los_Angeles",
              "America/Lower_Princes",
              "America/Maceio",
              "America/Managua",
              "America/Manaus",
              "America/Marigot",
              "America/Martinique",
              "America/Matamoros",
              "America/Mazatlan",
              "America/Menominee",
              "America/Merida",
              "America/Metlakatla",
              "America/Mexico_City",
              "America/Miquelon",
              "America/Moncton",
              "America/Monterrey",
              "America/Montevideo",
              "America/Montserrat",
              "America/Nassau",
              "America/New_York",
              "America/Nipigon",
              "America/Nome",
              "America/Noronha",
              "America/North_Dakota/Beulah",
              "America/North_Dakota/Center",
              "America/North_Dakota/New_Salem",
              "America/Nuuk",
              "America/Ojinaga",
              "America/Panama",
              "America/Pangnirtung",
              "America/Paramaribo",
              "America/Phoenix",
              "America/Port-au-Prince",
              "America/Port_of_Spain",
              "America/Porto_Velho",
              "America/Puerto_Rico",
              "America/Punta_Arenas",
              "America/Rainy_River",
              "America/Rankin_Inlet",
              "America/Recife",
              "America/Regina",
              "America/Resolute",
              "America/Rio_Branco",
              "America/Santarem",
              "America/Santiago",
              "America/Santo_Domingo",
              "America/Sao_Paulo",
              "America/Scoresbysund",
              "America/Sitka",
              "America/St_Barthelemy",
              "America/St_Johns",
              "America/St_Kitts",
              "America/St_Lucia",
              "America/St_Thomas",
              "America/St_Vincent",
              "America/Swift_Current",
              "America/Tegucigalpa",
              "America/Thule",
              "America/Thunder_Bay",
              "America/Tijuana",
              "America/Toronto",
              "America/Tortola",
              "America/Vancouver",
              "America/Whitehorse",
              "America/Winnipeg",
              "America/Yakutat",
              "America/Yellowknife",
              "Antarctica/Casey",
              "Antarctica/Davis",
              "Antarctica/DumontDUrville",
              "Antarctica/Macquarie",
              "Antarctica/Mawson",
              "Antarctica/McMurdo",
              "Antarctica/Palmer",
              "Antarctica/Rothera",
              "Antarctica/Syowa",
              "Antarctica/Troll",
              "Antarctica/Vostok",
              "Arctic/Longyearbyen",
              "Asia/Aden",
              "Asia/Almaty",
              "Asia/Amman",
              "Asia/Anadyr",
              "Asia/Aqtau",
              "Asia/Aqtobe",
              "Asia/Ashgabat",
              "Asia/Atyrau",
              "Asia/Baghdad",
              "Asia/Bahrain",
              "Asia/Baku",
              "Asia/Bangkok",
              "Asia/Barnaul",
              "Asia/Beirut",
              "Asia/Bishkek",
              "Asia/Brunei",
              "Asia/Chita",
              "Asia/Choibalsan",
              "Asia/Colombo",
              "Asia/Damascus",
              "Asia/Dhaka",
              "Asia/Dili",
              "Asia/Dubai",
              "Asia/Dushanbe",
              "Asia/Famagusta",
              "Asia/Gaza",
              "Asia/Hebron",
              "Asia/Ho_Chi_Minh",
              "Asia/Hong_Kong",
              "Asia/Hovd",
              "Asia/Irkutsk",
              "Asia/Jakarta",
              "Asia/Jayapura",
              "Asia/Jerusalem",
              "Asia/Kabul",
              "Asia/Kamchatka",
              "Asia/Karachi",
              "Asia/Kathmandu",
              "Asia/Khandyga",
              "Asia/Kolkata",
              "Asia/Krasnoyarsk",
              "Asia/Kuala_Lumpur",
              "Asia/Kuching",
              "Asia/Kuwait",
              "Asia/Macau",
              "Asia/Magadan",
              "Asia/Makassar",
              "Asia/Manila",
              "Asia/Muscat",
              "Asia/Nicosia",
              "Asia/Novokuznetsk",
              "Asia/Novosibirsk",
              "Asia/Omsk",
              "Asia/Oral",
              "Asia/Phnom_Penh",
              "Asia/Pontianak",
              "Asia/Pyongyang",
              "Asia/Qatar",
              "Asia/Qostanay",
              "Asia/Qyzylorda",
              "Asia/Riyadh",
              "Asia/Sakhalin",
              "Asia/Samarkand",
              "Asia/Seoul",
              "Asia/Shanghai",
              "Asia/Singapore",
              "Asia/Srednekolymsk",
              "Asia/Taipei",
              "Asia/Tashkent",
              "Asia/Tbilisi",
              "Asia/Tehran",
              "Asia/Thimphu",
              "Asia/Tokyo",
              "Asia/Tomsk",
              "Asia/Ulaanbaatar",
              "Asia/Urumqi",
              "Asia/Ust-Nera",
              "Asia/Vientiane",
              "Asia/Vladivostok",
              "Asia/Yakutsk",
              "Asia/Yangon",
              "Asia/Yekaterinburg",
              "Asia/Yerevan",
              "Atlantic/Azores",
              "Atlantic/Bermuda",
              "Atlantic/Canary",
              "Atlantic/Cape_Verde",
              "Atlantic/Faroe",
              "Atlantic/Madeira",
              "Atlantic/Reykjavik",
              "Atlantic/South_Georgia",
              "Atlantic/St_Helena",
              "Atlantic/Stanley",
              "Australia/Adelaide",
              "Australia/Brisbane",
              "Australia/Broken_Hill",
              "Australia/Darwin",
              "Australia/Eucla",
              "Australia/Hobart",
              "Australia/Lindeman",
              "Australia/Lord_Howe",
              "Australia/Melbourne",
              "Australia/Perth",
              "Australia/Sydney",
              "Canada/Atlantic",
              "Canada/Central",
              "Canada/Eastern",
              "Canada/Mountain",
              "Canada/Newfoundland",
              "Canada/Pacific",
              "Europe/Amsterdam",
              "Europe/Andorra",
              "Europe/Astrakhan",
              "Europe/Athens",
              "Europe/Belgrade",
              "Europe/Berlin",
              "Europe/Bratislava",
              "Europe/Brussels",
              "Europe/Bucharest",
              "Europe/Budapest",
              "Europe/Busingen",
              "Europe/Chisinau",
              "Europe/Copenhagen",
              "Europe/Dublin",
              "Europe/Gibraltar",
              "Europe/Guernsey",
              "Europe/Helsinki",
              "Europe/Isle_of_Man",
              "Europe/Istanbul",
              "Europe/Jersey",
              "Europe/Kaliningrad",
              "Europe/Kiev",
              "Europe/Kirov",
              "Europe/Lisbon",
              "Europe/Ljubljana",
              "Europe/London",
              "Europe/Luxembourg",
              "Europe/Madrid",
              "Europe/Malta",
              "Europe/Mariehamn",
              "Europe/Minsk",
              "Europe/Monaco",
              "Europe/Moscow",
              "Europe/Oslo",
              "Europe/Paris",
              "Europe/Podgorica",
              "Europe/Prague",
              "Europe/Riga",
              "Europe/Rome",
              "Europe/Samara",
              "Europe/San_Marino",
              "Europe/Sarajevo",
              "Europe/Saratov",
              "Europe/Simferopol",
              "Europe/Skopje",
              "Europe/Sofia",
              "Europe/Stockholm",
              "Europe/Tallinn",
              "Europe/Tirane",
              "Europe/Ulyanovsk",
              "Europe/Uzhgorod",
              "Europe/Vaduz",
              "Europe/Vatican",
              "Europe/Vienna",
              "Europe/Vilnius",
              "Europe/Volgograd",
              "Europe/Warsaw",
              "Europe/Zagreb",
              "Europe/Zaporozhye",
              "Europe/Zurich",
              "GMT",
              "Indian/Antananarivo",
              "Indian/Chagos",
              "Indian/Christmas",
              "Indian/Cocos",
              "Indian/Comoro",
              "Indian/Kerguelen",
              "Indian/Mahe",
              "Indian/Maldives",
              "Indian/Mauritius",
              "Indian/Mayotte",
              "Indian/Reunion",
              "Pacific/Apia",
              "Pacific/Auckland",
              "Pacific/Bougainville",
              "Pacific/Chatham",
              "Pacific/Chuuk",
              "Pacific/Easter",
              "Pacific/Efate",
              "Pacific/Enderbury",
              "Pacific/Fakaofo",
              "Pacific/Fiji",
              "Pacific/Funafuti",
              "Pacific/Galapagos",
              "Pacific/Gambier",
              "Pacific/Guadalcanal",
              "Pacific/Guam",
              "Pacific/Honolulu",
              "Pacific/Kiritimati",
              "Pacific/Kosrae",
              "Pacific/Kwajalein",
              "Pacific/Majuro",
              "Pacific/Marquesas",
              "Pacific/Midway",
              "Pacific/Nauru",
              "Pacific/Niue",
              "Pacific/Norfolk",
              "Pacific/Noumea",
              "Pacific/Pago_Pago",
              "Pacific/Palau",
              "Pacific/Pitcairn",
              "Pacific/Pohnpei",
              "Pacific/Port_Moresby",
              "Pacific/Rarotonga",
              "Pacific/Saipan",
              "Pacific/Tahiti",
              "Pacific/Tarawa",
              "Pacific/Tongatapu",
              "Pacific/Wake",
              "Pacific/Wallis",
              "US/Alaska",
              "US/Arizona",
              "US/Central",
              "US/Eastern",
              "US/Hawaii",
              "US/Mountain",
              "US/Pacific",
              "UTC"
            ],
            "type": "string"
          },
          "data_attributes": {
            "type": "object",
            "additionalProperties": {}
          },
          "person_display_name_properties": {
            "type": "array",
            "items": {
              "type": "string",
              "maxLength": 400
            },
            "nullable": true
          },
          "correlation_config": {
            "type": "object",
            "additionalProperties": {},
            "nullable": true
          },
          "autocapture_opt_out": {
            "type": "boolean",
            "nullable": true
          },
          "autocapture_exceptions_opt_in": {
            "type": "boolean",
            "nullable": true
          },
          "autocapture_exceptions_errors_to_ignore": {
            "type": "object",
            "additionalProperties": {},
            "nullable": true
          },
          "capture_console_log_opt_in": {
            "type": "boolean",
            "nullable": true
          },
          "capture_performance_opt_in": {
            "type": "boolean",
            "nullable": true
          },
          "session_recording_opt_in": {
            "type": "boolean"
          },
          "session_recording_version": {
            "type": "string",
            "nullable": true,
            "maxLength": 24
          },
          "effective_membership_level": {
            "enum": [1, 8, 15],
            "type": "integer",
            "nullable": true,
            "readOnly": true
          },
          "access_control": {
            "type": "boolean"
          },
          "has_group_types": {
            "type": "boolean",
            "readOnly": true
          },
          "primary_dashboard": {
            "type": "integer",
            "nullable": true
          },
          "live_events_columns": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "recording_domains": {
            "type": "array",
            "items": {
              "type": "string",
              "nullable": true,
              "maxLength": 200
            },
            "nullable": true
          },
          "person_on_events_querying_enabled": {
            "type": "boolean",
            "readOnly": true
          },
          "groups_on_events_querying_enabled": {
            "type": "boolean",
            "readOnly": true
          },
          "inject_web_apps": {
            "type": "boolean",
            "nullable": true
          },
          "extra_settings": {
            "type": "object",
            "additionalProperties": {},
            "nullable": true
          }
        },
        "required": [
          "api_token",
          "created_at",
          "effective_membership_level",
          "groups_on_events_querying_enabled",
          "has_group_types",
          "id",
          "ingested_event",
          "organization",
          "person_on_events_querying_enabled",
          "updated_at",
          "uuid"
        ]
      },
      "TeamBasic": {
        "type": "object",
        "description": "Serializer for `Team` model with minimal attributes to speeed up loading and transfer times.\nAlso used for nested serializers.",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "uuid": {
            "type": "string",
            "format": "uuid",
            "readOnly": true
          },
          "organization": {
            "type": "string",
            "format": "uuid",
            "readOnly": true
          },
          "api_token": {
            "type": "string",
            "readOnly": true
          },
          "name": {
            "type": "string",
            "readOnly": true
          },
          "completed_snippet_onboarding": {
            "type": "boolean",
            "readOnly": true
          },
          "ingested_event": {
            "type": "boolean",
            "readOnly": true
          },
          "is_demo": {
            "type": "boolean",
            "readOnly": true
          },
          "timezone": {
            "enum": [
              "Africa/Abidjan",
              "Africa/Accra",
              "Africa/Addis_Ababa",
              "Africa/Algiers",
              "Africa/Asmara",
              "Africa/Bamako",
              "Africa/Bangui",
              "Africa/Banjul",
              "Africa/Bissau",
              "Africa/Blantyre",
              "Africa/Brazzaville",
              "Africa/Bujumbura",
              "Africa/Cairo",
              "Africa/Casablanca",
              "Africa/Ceuta",
              "Africa/Conakry",
              "Africa/Dakar",
              "Africa/Dar_es_Salaam",
              "Africa/Djibouti",
              "Africa/Douala",
              "Africa/El_Aaiun",
              "Africa/Freetown",
              "Africa/Gaborone",
              "Africa/Harare",
              "Africa/Johannesburg",
              "Africa/Juba",
              "Africa/Kampala",
              "Africa/Khartoum",
              "Africa/Kigali",
              "Africa/Kinshasa",
              "Africa/Lagos",
              "Africa/Libreville",
              "Africa/Lome",
              "Africa/Luanda",
              "Africa/Lubumbashi",
              "Africa/Lusaka",
              "Africa/Malabo",
              "Africa/Maputo",
              "Africa/Maseru",
              "Africa/Mbabane",
              "Africa/Mogadishu",
              "Africa/Monrovia",
              "Africa/Nairobi",
              "Africa/Ndjamena",
              "Africa/Niamey",
              "Africa/Nouakchott",
              "Africa/Ouagadougou",
              "Africa/Porto-Novo",
              "Africa/Sao_Tome",
              "Africa/Tripoli",
              "Africa/Tunis",
              "Africa/Windhoek",
              "America/Adak",
              "America/Anchorage",
              "America/Anguilla",
              "America/Antigua",
              "America/Araguaina",
              "America/Argentina/Buenos_Aires",
              "America/Argentina/Catamarca",
              "America/Argentina/Cordoba",
              "America/Argentina/Jujuy",
              "America/Argentina/La_Rioja",
              "America/Argentina/Mendoza",
              "America/Argentina/Rio_Gallegos",
              "America/Argentina/Salta",
              "America/Argentina/San_Juan",
              "America/Argentina/San_Luis",
              "America/Argentina/Tucuman",
              "America/Argentina/Ushuaia",
              "America/Aruba",
              "America/Asuncion",
              "America/Atikokan",
              "America/Bahia",
              "America/Bahia_Banderas",
              "America/Barbados",
              "America/Belem",
              "America/Belize",
              "America/Blanc-Sablon",
              "America/Boa_Vista",
              "America/Bogota",
              "America/Boise",
              "America/Cambridge_Bay",
              "America/Campo_Grande",
              "America/Cancun",
              "America/Caracas",
              "America/Cayenne",
              "America/Cayman",
              "America/Chicago",
              "America/Chihuahua",
              "America/Costa_Rica",
              "America/Creston",
              "America/Cuiaba",
              "America/Curacao",
              "America/Danmarkshavn",
              "America/Dawson",
              "America/Dawson_Creek",
              "America/Denver",
              "America/Detroit",
              "America/Dominica",
              "America/Edmonton",
              "America/Eirunepe",
              "America/El_Salvador",
              "America/Fort_Nelson",
              "America/Fortaleza",
              "America/Glace_Bay",
              "America/Goose_Bay",
              "America/Grand_Turk",
              "America/Grenada",
              "America/Guadeloupe",
              "America/Guatemala",
              "America/Guayaquil",
              "America/Guyana",
              "America/Halifax",
              "America/Havana",
              "America/Hermosillo",
              "America/Indiana/Indianapolis",
              "America/Indiana/Knox",
              "America/Indiana/Marengo",
              "America/Indiana/Petersburg",
              "America/Indiana/Tell_City",
              "America/Indiana/Vevay",
              "America/Indiana/Vincennes",
              "America/Indiana/Winamac",
              "America/Inuvik",
              "America/Iqaluit",
              "America/Jamaica",
              "America/Juneau",
              "America/Kentucky/Louisville",
              "America/Kentucky/Monticello",
              "America/Kralendijk",
              "America/La_Paz",
              "America/Lima",
              "America/Los_Angeles",
              "America/Lower_Princes",
              "America/Maceio",
              "America/Managua",
              "America/Manaus",
              "America/Marigot",
              "America/Martinique",
              "America/Matamoros",
              "America/Mazatlan",
              "America/Menominee",
              "America/Merida",
              "America/Metlakatla",
              "America/Mexico_City",
              "America/Miquelon",
              "America/Moncton",
              "America/Monterrey",
              "America/Montevideo",
              "America/Montserrat",
              "America/Nassau",
              "America/New_York",
              "America/Nipigon",
              "America/Nome",
              "America/Noronha",
              "America/North_Dakota/Beulah",
              "America/North_Dakota/Center",
              "America/North_Dakota/New_Salem",
              "America/Nuuk",
              "America/Ojinaga",
              "America/Panama",
              "America/Pangnirtung",
              "America/Paramaribo",
              "America/Phoenix",
              "America/Port-au-Prince",
              "America/Port_of_Spain",
              "America/Porto_Velho",
              "America/Puerto_Rico",
              "America/Punta_Arenas",
              "America/Rainy_River",
              "America/Rankin_Inlet",
              "America/Recife",
              "America/Regina",
              "America/Resolute",
              "America/Rio_Branco",
              "America/Santarem",
              "America/Santiago",
              "America/Santo_Domingo",
              "America/Sao_Paulo",
              "America/Scoresbysund",
              "America/Sitka",
              "America/St_Barthelemy",
              "America/St_Johns",
              "America/St_Kitts",
              "America/St_Lucia",
              "America/St_Thomas",
              "America/St_Vincent",
              "America/Swift_Current",
              "America/Tegucigalpa",
              "America/Thule",
              "America/Thunder_Bay",
              "America/Tijuana",
              "America/Toronto",
              "America/Tortola",
              "America/Vancouver",
              "America/Whitehorse",
              "America/Winnipeg",
              "America/Yakutat",
              "America/Yellowknife",
              "Antarctica/Casey",
              "Antarctica/Davis",
              "Antarctica/DumontDUrville",
              "Antarctica/Macquarie",
              "Antarctica/Mawson",
              "Antarctica/McMurdo",
              "Antarctica/Palmer",
              "Antarctica/Rothera",
              "Antarctica/Syowa",
              "Antarctica/Troll",
              "Antarctica/Vostok",
              "Arctic/Longyearbyen",
              "Asia/Aden",
              "Asia/Almaty",
              "Asia/Amman",
              "Asia/Anadyr",
              "Asia/Aqtau",
              "Asia/Aqtobe",
              "Asia/Ashgabat",
              "Asia/Atyrau",
              "Asia/Baghdad",
              "Asia/Bahrain",
              "Asia/Baku",
              "Asia/Bangkok",
              "Asia/Barnaul",
              "Asia/Beirut",
              "Asia/Bishkek",
              "Asia/Brunei",
              "Asia/Chita",
              "Asia/Choibalsan",
              "Asia/Colombo",
              "Asia/Damascus",
              "Asia/Dhaka",
              "Asia/Dili",
              "Asia/Dubai",
              "Asia/Dushanbe",
              "Asia/Famagusta",
              "Asia/Gaza",
              "Asia/Hebron",
              "Asia/Ho_Chi_Minh",
              "Asia/Hong_Kong",
              "Asia/Hovd",
              "Asia/Irkutsk",
              "Asia/Jakarta",
              "Asia/Jayapura",
              "Asia/Jerusalem",
              "Asia/Kabul",
              "Asia/Kamchatka",
              "Asia/Karachi",
              "Asia/Kathmandu",
              "Asia/Khandyga",
              "Asia/Kolkata",
              "Asia/Krasnoyarsk",
              "Asia/Kuala_Lumpur",
              "Asia/Kuching",
              "Asia/Kuwait",
              "Asia/Macau",
              "Asia/Magadan",
              "Asia/Makassar",
              "Asia/Manila",
              "Asia/Muscat",
              "Asia/Nicosia",
              "Asia/Novokuznetsk",
              "Asia/Novosibirsk",
              "Asia/Omsk",
              "Asia/Oral",
              "Asia/Phnom_Penh",
              "Asia/Pontianak",
              "Asia/Pyongyang",
              "Asia/Qatar",
              "Asia/Qostanay",
              "Asia/Qyzylorda",
              "Asia/Riyadh",
              "Asia/Sakhalin",
              "Asia/Samarkand",
              "Asia/Seoul",
              "Asia/Shanghai",
              "Asia/Singapore",
              "Asia/Srednekolymsk",
              "Asia/Taipei",
              "Asia/Tashkent",
              "Asia/Tbilisi",
              "Asia/Tehran",
              "Asia/Thimphu",
              "Asia/Tokyo",
              "Asia/Tomsk",
              "Asia/Ulaanbaatar",
              "Asia/Urumqi",
              "Asia/Ust-Nera",
              "Asia/Vientiane",
              "Asia/Vladivostok",
              "Asia/Yakutsk",
              "Asia/Yangon",
              "Asia/Yekaterinburg",
              "Asia/Yerevan",
              "Atlantic/Azores",
              "Atlantic/Bermuda",
              "Atlantic/Canary",
              "Atlantic/Cape_Verde",
              "Atlantic/Faroe",
              "Atlantic/Madeira",
              "Atlantic/Reykjavik",
              "Atlantic/South_Georgia",
              "Atlantic/St_Helena",
              "Atlantic/Stanley",
              "Australia/Adelaide",
              "Australia/Brisbane",
              "Australia/Broken_Hill",
              "Australia/Darwin",
              "Australia/Eucla",
              "Australia/Hobart",
              "Australia/Lindeman",
              "Australia/Lord_Howe",
              "Australia/Melbourne",
              "Australia/Perth",
              "Australia/Sydney",
              "Canada/Atlantic",
              "Canada/Central",
              "Canada/Eastern",
              "Canada/Mountain",
              "Canada/Newfoundland",
              "Canada/Pacific",
              "Europe/Amsterdam",
              "Europe/Andorra",
              "Europe/Astrakhan",
              "Europe/Athens",
              "Europe/Belgrade",
              "Europe/Berlin",
              "Europe/Bratislava",
              "Europe/Brussels",
              "Europe/Bucharest",
              "Europe/Budapest",
              "Europe/Busingen",
              "Europe/Chisinau",
              "Europe/Copenhagen",
              "Europe/Dublin",
              "Europe/Gibraltar",
              "Europe/Guernsey",
              "Europe/Helsinki",
              "Europe/Isle_of_Man",
              "Europe/Istanbul",
              "Europe/Jersey",
              "Europe/Kaliningrad",
              "Europe/Kiev",
              "Europe/Kirov",
              "Europe/Lisbon",
              "Europe/Ljubljana",
              "Europe/London",
              "Europe/Luxembourg",
              "Europe/Madrid",
              "Europe/Malta",
              "Europe/Mariehamn",
              "Europe/Minsk",
              "Europe/Monaco",
              "Europe/Moscow",
              "Europe/Oslo",
              "Europe/Paris",
              "Europe/Podgorica",
              "Europe/Prague",
              "Europe/Riga",
              "Europe/Rome",
              "Europe/Samara",
              "Europe/San_Marino",
              "Europe/Sarajevo",
              "Europe/Saratov",
              "Europe/Simferopol",
              "Europe/Skopje",
              "Europe/Sofia",
              "Europe/Stockholm",
              "Europe/Tallinn",
              "Europe/Tirane",
              "Europe/Ulyanovsk",
              "Europe/Uzhgorod",
              "Europe/Vaduz",
              "Europe/Vatican",
              "Europe/Vienna",
              "Europe/Vilnius",
              "Europe/Volgograd",
              "Europe/Warsaw",
              "Europe/Zagreb",
              "Europe/Zaporozhye",
              "Europe/Zurich",
              "GMT",
              "Indian/Antananarivo",
              "Indian/Chagos",
              "Indian/Christmas",
              "Indian/Cocos",
              "Indian/Comoro",
              "Indian/Kerguelen",
              "Indian/Mahe",
              "Indian/Maldives",
              "Indian/Mauritius",
              "Indian/Mayotte",
              "Indian/Reunion",
              "Pacific/Apia",
              "Pacific/Auckland",
              "Pacific/Bougainville",
              "Pacific/Chatham",
              "Pacific/Chuuk",
              "Pacific/Easter",
              "Pacific/Efate",
              "Pacific/Enderbury",
              "Pacific/Fakaofo",
              "Pacific/Fiji",
              "Pacific/Funafuti",
              "Pacific/Galapagos",
              "Pacific/Gambier",
              "Pacific/Guadalcanal",
              "Pacific/Guam",
              "Pacific/Honolulu",
              "Pacific/Kiritimati",
              "Pacific/Kosrae",
              "Pacific/Kwajalein",
              "Pacific/Majuro",
              "Pacific/Marquesas",
              "Pacific/Midway",
              "Pacific/Nauru",
              "Pacific/Niue",
              "Pacific/Norfolk",
              "Pacific/Noumea",
              "Pacific/Pago_Pago",
              "Pacific/Palau",
              "Pacific/Pitcairn",
              "Pacific/Pohnpei",
              "Pacific/Port_Moresby",
              "Pacific/Rarotonga",
              "Pacific/Saipan",
              "Pacific/Tahiti",
              "Pacific/Tarawa",
              "Pacific/Tongatapu",
              "Pacific/Wake",
              "Pacific/Wallis",
              "US/Alaska",
              "US/Arizona",
              "US/Central",
              "US/Eastern",
              "US/Hawaii",
              "US/Mountain",
              "US/Pacific",
              "UTC"
            ],
            "type": "string",
            "readOnly": true
          },
          "access_control": {
            "type": "boolean",
            "readOnly": true
          }
        },
        "required": [
          "access_control",
          "api_token",
          "completed_snippet_onboarding",
          "id",
          "ingested_event",
          "is_demo",
          "name",
          "organization",
          "timezone",
          "uuid"
        ]
      },
      "Trend": {
        "type": "object",
        "properties": {
          "events": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FilterEvent"
            },
            "description": "Events to filter on. One of `events` or `actions` is required."
          },
          "actions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FilterAction"
            },
            "description": "Actions to filter on. One of `events` or `actions` is required."
          },
          "properties": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Property"
              }
            ],
            "description": "Filter events by event property, person property, cohort, groups and more."
          },
          "filter_test_accounts": {
            "type": "boolean",
            "default": false,
            "description": "Whether to filter out internal and test accounts. See \"project settings\" in your PostHog account for the filters."
          },
          "date_from": {
            "type": "string",
            "default": "-7d",
            "description": "What date to filter the results from. Can either be a date `2021-01-01`, or a relative date, like `-7d` for last seven days, `-1m` for last month, `mStart` for start of the month or `yStart` for the start of the year."
          },
          "date_to": {
            "type": "string",
            "default": "-7d",
            "description": "What date to filter the results to. Can either be a date `2021-01-01`, or a relative date, like `-7d` for last seven days, `-1m` for last month, `mStart` for start of the month or `yStart` for the start of the year."
          },
          "breakdown": {
            "type": "string",
            "description": "A property or cohort to break down on. You can select the type of the property with breakdown_type.\n- `event` (default): a property key\n- `person`: a person property key\n- `cohort`: an array of cohort IDs (ie `[9581,5812]`)"
          },
          "breakdown_type": {
            "enum": ["event", "person", "cohort", "group", "session", "hogql"],
            "type": "string",
            "default": "event",
            "description": "Type of property to break down on."
          },
          "display": {
            "enum": [
              "ActionsLineGraph",
              "ActionsLineGraphCumulative",
              "ActionsTable",
              "ActionsPie",
              "ActionsBar",
              "ActionsBarValue",
              "WorldMap",
              "BoldNumber"
            ],
            "type": "string",
            "default": "ActionsLineGraph",
            "description": "How to display the data. Will change how the data is returned."
          },
          "formula": {
            "type": "string",
            "description": "Combine the result of events or actions into a single number. For example `A + B` or `(A-B)/B`. The letters correspond to the order of the `events` or `actions` lists."
          },
          "compare": {
            "type": "boolean",
            "description": "For each returned result show the current period and the previous period. The result will contain `compare:true` and a `compare_label` with either `current` or `previous`."
          }
        }
      },
      "TrendResult": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "type": "integer"
            },
            "description": "The requested counts."
          },
          "days": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "date"
            },
            "description": "The dates corresponding to the data field above."
          },
          "labels": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The dates corresponding to the data field above."
          },
          "filter": {
            "allOf": [
              {
                "$ref": "#/components/schemas/GenericInsights"
              }
            ],
            "description": "The insight that's being returned."
          },
          "label": {
            "type": "string",
            "description": "A label describing this result. Will include\n- The event or action\n- Breakdown value\n- If `compare:true`, whether it's `current` or `previous`"
          }
        },
        "required": ["data", "days", "filter", "label", "labels"]
      },
      "TrendResults": {
        "type": "object",
        "properties": {
          "is_cached": {
            "type": "boolean",
            "description": "Whether the result is cached. To force a refresh, pass ?refresh=true"
          },
          "last_refresh": {
            "type": "string",
            "format": "date-time",
            "description": "If the result is cached, when it was last refreshed."
          },
          "timezone": {
            "enum": [
              "Africa/Abidjan",
              "Africa/Accra",
              "Africa/Addis_Ababa",
              "Africa/Algiers",
              "Africa/Asmara",
              "Africa/Bamako",
              "Africa/Bangui",
              "Africa/Banjul",
              "Africa/Bissau",
              "Africa/Blantyre",
              "Africa/Brazzaville",
              "Africa/Bujumbura",
              "Africa/Cairo",
              "Africa/Casablanca",
              "Africa/Ceuta",
              "Africa/Conakry",
              "Africa/Dakar",
              "Africa/Dar_es_Salaam",
              "Africa/Djibouti",
              "Africa/Douala",
              "Africa/El_Aaiun",
              "Africa/Freetown",
              "Africa/Gaborone",
              "Africa/Harare",
              "Africa/Johannesburg",
              "Africa/Juba",
              "Africa/Kampala",
              "Africa/Khartoum",
              "Africa/Kigali",
              "Africa/Kinshasa",
              "Africa/Lagos",
              "Africa/Libreville",
              "Africa/Lome",
              "Africa/Luanda",
              "Africa/Lubumbashi",
              "Africa/Lusaka",
              "Africa/Malabo",
              "Africa/Maputo",
              "Africa/Maseru",
              "Africa/Mbabane",
              "Africa/Mogadishu",
              "Africa/Monrovia",
              "Africa/Nairobi",
              "Africa/Ndjamena",
              "Africa/Niamey",
              "Africa/Nouakchott",
              "Africa/Ouagadougou",
              "Africa/Porto-Novo",
              "Africa/Sao_Tome",
              "Africa/Tripoli",
              "Africa/Tunis",
              "Africa/Windhoek",
              "America/Adak",
              "America/Anchorage",
              "America/Anguilla",
              "America/Antigua",
              "America/Araguaina",
              "America/Argentina/Buenos_Aires",
              "America/Argentina/Catamarca",
              "America/Argentina/Cordoba",
              "America/Argentina/Jujuy",
              "America/Argentina/La_Rioja",
              "America/Argentina/Mendoza",
              "America/Argentina/Rio_Gallegos",
              "America/Argentina/Salta",
              "America/Argentina/San_Juan",
              "America/Argentina/San_Luis",
              "America/Argentina/Tucuman",
              "America/Argentina/Ushuaia",
              "America/Aruba",
              "America/Asuncion",
              "America/Atikokan",
              "America/Bahia",
              "America/Bahia_Banderas",
              "America/Barbados",
              "America/Belem",
              "America/Belize",
              "America/Blanc-Sablon",
              "America/Boa_Vista",
              "America/Bogota",
              "America/Boise",
              "America/Cambridge_Bay",
              "America/Campo_Grande",
              "America/Cancun",
              "America/Caracas",
              "America/Cayenne",
              "America/Cayman",
              "America/Chicago",
              "America/Chihuahua",
              "America/Costa_Rica",
              "America/Creston",
              "America/Cuiaba",
              "America/Curacao",
              "America/Danmarkshavn",
              "America/Dawson",
              "America/Dawson_Creek",
              "America/Denver",
              "America/Detroit",
              "America/Dominica",
              "America/Edmonton",
              "America/Eirunepe",
              "America/El_Salvador",
              "America/Fort_Nelson",
              "America/Fortaleza",
              "America/Glace_Bay",
              "America/Goose_Bay",
              "America/Grand_Turk",
              "America/Grenada",
              "America/Guadeloupe",
              "America/Guatemala",
              "America/Guayaquil",
              "America/Guyana",
              "America/Halifax",
              "America/Havana",
              "America/Hermosillo",
              "America/Indiana/Indianapolis",
              "America/Indiana/Knox",
              "America/Indiana/Marengo",
              "America/Indiana/Petersburg",
              "America/Indiana/Tell_City",
              "America/Indiana/Vevay",
              "America/Indiana/Vincennes",
              "America/Indiana/Winamac",
              "America/Inuvik",
              "America/Iqaluit",
              "America/Jamaica",
              "America/Juneau",
              "America/Kentucky/Louisville",
              "America/Kentucky/Monticello",
              "America/Kralendijk",
              "America/La_Paz",
              "America/Lima",
              "America/Los_Angeles",
              "America/Lower_Princes",
              "America/Maceio",
              "America/Managua",
              "America/Manaus",
              "America/Marigot",
              "America/Martinique",
              "America/Matamoros",
              "America/Mazatlan",
              "America/Menominee",
              "America/Merida",
              "America/Metlakatla",
              "America/Mexico_City",
              "America/Miquelon",
              "America/Moncton",
              "America/Monterrey",
              "America/Montevideo",
              "America/Montserrat",
              "America/Nassau",
              "America/New_York",
              "America/Nipigon",
              "America/Nome",
              "America/Noronha",
              "America/North_Dakota/Beulah",
              "America/North_Dakota/Center",
              "America/North_Dakota/New_Salem",
              "America/Nuuk",
              "America/Ojinaga",
              "America/Panama",
              "America/Pangnirtung",
              "America/Paramaribo",
              "America/Phoenix",
              "America/Port-au-Prince",
              "America/Port_of_Spain",
              "America/Porto_Velho",
              "America/Puerto_Rico",
              "America/Punta_Arenas",
              "America/Rainy_River",
              "America/Rankin_Inlet",
              "America/Recife",
              "America/Regina",
              "America/Resolute",
              "America/Rio_Branco",
              "America/Santarem",
              "America/Santiago",
              "America/Santo_Domingo",
              "America/Sao_Paulo",
              "America/Scoresbysund",
              "America/Sitka",
              "America/St_Barthelemy",
              "America/St_Johns",
              "America/St_Kitts",
              "America/St_Lucia",
              "America/St_Thomas",
              "America/St_Vincent",
              "America/Swift_Current",
              "America/Tegucigalpa",
              "America/Thule",
              "America/Thunder_Bay",
              "America/Tijuana",
              "America/Toronto",
              "America/Tortola",
              "America/Vancouver",
              "America/Whitehorse",
              "America/Winnipeg",
              "America/Yakutat",
              "America/Yellowknife",
              "Antarctica/Casey",
              "Antarctica/Davis",
              "Antarctica/DumontDUrville",
              "Antarctica/Macquarie",
              "Antarctica/Mawson",
              "Antarctica/McMurdo",
              "Antarctica/Palmer",
              "Antarctica/Rothera",
              "Antarctica/Syowa",
              "Antarctica/Troll",
              "Antarctica/Vostok",
              "Arctic/Longyearbyen",
              "Asia/Aden",
              "Asia/Almaty",
              "Asia/Amman",
              "Asia/Anadyr",
              "Asia/Aqtau",
              "Asia/Aqtobe",
              "Asia/Ashgabat",
              "Asia/Atyrau",
              "Asia/Baghdad",
              "Asia/Bahrain",
              "Asia/Baku",
              "Asia/Bangkok",
              "Asia/Barnaul",
              "Asia/Beirut",
              "Asia/Bishkek",
              "Asia/Brunei",
              "Asia/Chita",
              "Asia/Choibalsan",
              "Asia/Colombo",
              "Asia/Damascus",
              "Asia/Dhaka",
              "Asia/Dili",
              "Asia/Dubai",
              "Asia/Dushanbe",
              "Asia/Famagusta",
              "Asia/Gaza",
              "Asia/Hebron",
              "Asia/Ho_Chi_Minh",
              "Asia/Hong_Kong",
              "Asia/Hovd",
              "Asia/Irkutsk",
              "Asia/Jakarta",
              "Asia/Jayapura",
              "Asia/Jerusalem",
              "Asia/Kabul",
              "Asia/Kamchatka",
              "Asia/Karachi",
              "Asia/Kathmandu",
              "Asia/Khandyga",
              "Asia/Kolkata",
              "Asia/Krasnoyarsk",
              "Asia/Kuala_Lumpur",
              "Asia/Kuching",
              "Asia/Kuwait",
              "Asia/Macau",
              "Asia/Magadan",
              "Asia/Makassar",
              "Asia/Manila",
              "Asia/Muscat",
              "Asia/Nicosia",
              "Asia/Novokuznetsk",
              "Asia/Novosibirsk",
              "Asia/Omsk",
              "Asia/Oral",
              "Asia/Phnom_Penh",
              "Asia/Pontianak",
              "Asia/Pyongyang",
              "Asia/Qatar",
              "Asia/Qostanay",
              "Asia/Qyzylorda",
              "Asia/Riyadh",
              "Asia/Sakhalin",
              "Asia/Samarkand",
              "Asia/Seoul",
              "Asia/Shanghai",
              "Asia/Singapore",
              "Asia/Srednekolymsk",
              "Asia/Taipei",
              "Asia/Tashkent",
              "Asia/Tbilisi",
              "Asia/Tehran",
              "Asia/Thimphu",
              "Asia/Tokyo",
              "Asia/Tomsk",
              "Asia/Ulaanbaatar",
              "Asia/Urumqi",
              "Asia/Ust-Nera",
              "Asia/Vientiane",
              "Asia/Vladivostok",
              "Asia/Yakutsk",
              "Asia/Yangon",
              "Asia/Yekaterinburg",
              "Asia/Yerevan",
              "Atlantic/Azores",
              "Atlantic/Bermuda",
              "Atlantic/Canary",
              "Atlantic/Cape_Verde",
              "Atlantic/Faroe",
              "Atlantic/Madeira",
              "Atlantic/Reykjavik",
              "Atlantic/South_Georgia",
              "Atlantic/St_Helena",
              "Atlantic/Stanley",
              "Australia/Adelaide",
              "Australia/Brisbane",
              "Australia/Broken_Hill",
              "Australia/Darwin",
              "Australia/Eucla",
              "Australia/Hobart",
              "Australia/Lindeman",
              "Australia/Lord_Howe",
              "Australia/Melbourne",
              "Australia/Perth",
              "Australia/Sydney",
              "Canada/Atlantic",
              "Canada/Central",
              "Canada/Eastern",
              "Canada/Mountain",
              "Canada/Newfoundland",
              "Canada/Pacific",
              "Europe/Amsterdam",
              "Europe/Andorra",
              "Europe/Astrakhan",
              "Europe/Athens",
              "Europe/Belgrade",
              "Europe/Berlin",
              "Europe/Bratislava",
              "Europe/Brussels",
              "Europe/Bucharest",
              "Europe/Budapest",
              "Europe/Busingen",
              "Europe/Chisinau",
              "Europe/Copenhagen",
              "Europe/Dublin",
              "Europe/Gibraltar",
              "Europe/Guernsey",
              "Europe/Helsinki",
              "Europe/Isle_of_Man",
              "Europe/Istanbul",
              "Europe/Jersey",
              "Europe/Kaliningrad",
              "Europe/Kiev",
              "Europe/Kirov",
              "Europe/Lisbon",
              "Europe/Ljubljana",
              "Europe/London",
              "Europe/Luxembourg",
              "Europe/Madrid",
              "Europe/Malta",
              "Europe/Mariehamn",
              "Europe/Minsk",
              "Europe/Monaco",
              "Europe/Moscow",
              "Europe/Oslo",
              "Europe/Paris",
              "Europe/Podgorica",
              "Europe/Prague",
              "Europe/Riga",
              "Europe/Rome",
              "Europe/Samara",
              "Europe/San_Marino",
              "Europe/Sarajevo",
              "Europe/Saratov",
              "Europe/Simferopol",
              "Europe/Skopje",
              "Europe/Sofia",
              "Europe/Stockholm",
              "Europe/Tallinn",
              "Europe/Tirane",
              "Europe/Ulyanovsk",
              "Europe/Uzhgorod",
              "Europe/Vaduz",
              "Europe/Vatican",
              "Europe/Vienna",
              "Europe/Vilnius",
              "Europe/Volgograd",
              "Europe/Warsaw",
              "Europe/Zagreb",
              "Europe/Zaporozhye",
              "Europe/Zurich",
              "GMT",
              "Indian/Antananarivo",
              "Indian/Chagos",
              "Indian/Christmas",
              "Indian/Cocos",
              "Indian/Comoro",
              "Indian/Kerguelen",
              "Indian/Mahe",
              "Indian/Maldives",
              "Indian/Mauritius",
              "Indian/Mayotte",
              "Indian/Reunion",
              "Pacific/Apia",
              "Pacific/Auckland",
              "Pacific/Bougainville",
              "Pacific/Chatham",
              "Pacific/Chuuk",
              "Pacific/Easter",
              "Pacific/Efate",
              "Pacific/Enderbury",
              "Pacific/Fakaofo",
              "Pacific/Fiji",
              "Pacific/Funafuti",
              "Pacific/Galapagos",
              "Pacific/Gambier",
              "Pacific/Guadalcanal",
              "Pacific/Guam",
              "Pacific/Honolulu",
              "Pacific/Kiritimati",
              "Pacific/Kosrae",
              "Pacific/Kwajalein",
              "Pacific/Majuro",
              "Pacific/Marquesas",
              "Pacific/Midway",
              "Pacific/Nauru",
              "Pacific/Niue",
              "Pacific/Norfolk",
              "Pacific/Noumea",
              "Pacific/Pago_Pago",
              "Pacific/Palau",
              "Pacific/Pitcairn",
              "Pacific/Pohnpei",
              "Pacific/Port_Moresby",
              "Pacific/Rarotonga",
              "Pacific/Saipan",
              "Pacific/Tahiti",
              "Pacific/Tarawa",
              "Pacific/Tongatapu",
              "Pacific/Wake",
              "Pacific/Wallis",
              "US/Alaska",
              "US/Arizona",
              "US/Central",
              "US/Eastern",
              "US/Hawaii",
              "US/Mountain",
              "US/Pacific",
              "UTC"
            ],
            "type": "string",
            "default": "UTC",
            "description": "Timezone the chart is displayed in"
          },
          "result": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TrendResult"
            }
          }
        },
        "required": ["is_cached", "last_refresh", "result"]
      },
      "UserBasic": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "uuid": {
            "type": "string",
            "format": "uuid",
            "readOnly": true
          },
          "distinct_id": {
            "type": "string",
            "nullable": true,
            "maxLength": 200
          },
          "first_name": {
            "type": "string",
            "maxLength": 150
          },
          "email": {
            "type": "string",
            "format": "email",
            "title": "Email address",
            "maxLength": 254
          },
          "is_email_verified": {
            "type": "boolean",
            "nullable": true
          }
        },
        "required": ["email", "id", "uuid"]
      }
    }
  },
  "x-tagGroups": [
    {
      "name": "All endpoints",
      "tags": [
        "actions",
        "activity_log",
        "annotations",
        "app_metrics",
        "batch_exports",
        "cohorts",
        "dashboard_templates",
        "dashboards",
        "data_management",
        "domains",
        "early_access_feature",
        "event_definitions",
        "events",
        "experiments",
        "exports",
        "feature_flags",
        "funnel",
        "groups",
        "groups_types",
        "hooks",
        "ingestion_warnings",
        "insights",
        "integrations",
        "invites",
        "is_generating_demo_data",
        "members",
        "organizations",
        "performance_events",
        "persons",
        "plugin_configs",
        "plugins",
        "projects",
        "prompts",
        "property_definitions",
        "query",
        "reset_token",
        "resource_access",
        "roles",
        "session_recording_playlists",
        "session_recordings",
        "subscriptions",
        "surveys",
        "tags",
        "trend",
        "uploaded_media",
        "warehouse_table"
      ]
    }
  ]
}
